// Test Division Error Propagation in VM

print("=== Division Error Propagation Test ===");

// Division function that returns an error on division by zero
fn divide(a: int, b: int): int?DivisionByZero {
    if (b == 0) {
        print("Division by zero detected, returning error");
        return err(DivisionByZero("Cannot divide by zero"));
    }
    return ok(a / b);
}

// Function that calls divide and propagates the error
fn safe_divide(a: int, b: int): int?DivisionByZero {
    print("Calling divide with", a, "/", b);
    var result = divide(a, b)?;
    print("Division successful, result:", result);
    return ok(result);
}

// Test error propagation
fn test_division() {
    print("\nTest 1: Valid division (10 / 2)");
    var valid = safe_divide(10, 2);
    match valid {
        ok(value) => print("Got valid result:", value),
        err(e) => print("Unexpected error:", e)
    }

    print("\nTest 2: Division by zero (10 / 0) - should propagate error");
    var invalid = safe_divide(10, 0);
    match invalid {
        ok(value) => print("Unexpected success, got:", value),
        err(e) => print("Caught expected error:", e)
    }
}

// Run the test
test_division();

print("=== Division Error Propagation Test Complete ===");

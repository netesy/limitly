Bytecode for test_error_bytecode.lm
========================================

Total instructions: 310

   1: BEGIN_FUNCTION       (line 4)
2   : BEGIN_SCOPE          (line 4)
3   : OP_92                (line 6)
4   : STORE_VAR            (line 6) error_val
5   : PUSH_STRING          (line 7) "Error construction test:"
6   : LOAD_VAR             (line 7) error_val
7   : PRINT                (line 7)
8   : END_SCOPE            (line 4)
9   : PUSH_NULL            (line 4)
10  : RETURN               (line 4)
11  : END_FUNCTION         (line 4)
12  : BEGIN_FUNCTION       (line 17)
13  : BEGIN_SCOPE          (line 17)
14  : PUSH_INT             (line 19) 42
15  : OP_93                (line 19)
16  : STORE_VAR            (line 19) success_val
17  : PUSH_STRING          (line 20) "success"
18  : OP_93                (line 20)
19  : STORE_VAR            (line 20) success_str
20  : PUSH_STRING          (line 21) "Success construction test:"
21  : LOAD_VAR             (line 21) success_val
22  : LOAD_VAR             (line 21) success_str
23  : PRINT                (line 21)
24  : END_SCOPE            (line 17)
25  : PUSH_NULL            (line 17)
26  : RETURN               (line 17)
27  : END_FUNCTION         (line 17)
28  : BEGIN_FUNCTION       (line 29)
29  : DEFINE_PARAM         (line 29) a
30  : DEFINE_PARAM         (line 29) b
31  : BEGIN_SCOPE          (line 29)
32  : LOAD_VAR             (line 30) b
33  : PUSH_INT             (line 30) 0
34  : EQUAL                (line 30)
35  : JUMP_IF_FALSE        (line 30) 5
36  : BEGIN_SCOPE          (line 30)
37  : OP_92                (line 31)
38  : RETURN               (line 31)
39  : END_SCOPE            (line 30)
40  : JUMP                 (line 30) 0
41  : LOAD_VAR             (line 33) a
42  : LOAD_VAR             (line 33) b
43  : DIVIDE               (line 33)
44  : OP_93                (line 33)
45  : RETURN               (line 33)
46  : END_SCOPE            (line 29)
47  : PUSH_NULL            (line 29)
48  : RETURN               (line 29)
49  : END_FUNCTION         (line 29)
50  : BEGIN_FUNCTION       (line 37)
51  : DEFINE_PARAM         (line 37) s
52  : BEGIN_SCOPE          (line 37)
53  : PUSH_INT             (line 39) 0
54  : OP_93                (line 39)
55  : RETURN               (line 39)
56  : END_SCOPE            (line 37)
57  : PUSH_NULL            (line 37)
58  : RETURN               (line 37)
59  : END_FUNCTION         (line 37)
60  : BEGIN_FUNCTION       (line 42)
61  : BEGIN_SCOPE          (line 42)
62  : PUSH_INT             (line 44) 10
63  : PUSH_INT             (line 44) 2
64  : CALL                 (line 44) 2
65  : OP_90                (line 44)
66  : JUMP_IF_FALSE        (line 44) 1
67  : OP_91                (line 44)
68  : OP_96                (line 44)
69  : STORE_VAR            (line 44) result
70  : PUSH_STRING          (line 45) "Division result:"
71  : LOAD_VAR             (line 45) result
72  : PRINT                (line 45)
73  : PUSH_INT             (line 48) 10
74  : PUSH_INT             (line 48) 0
75  : CALL                 (line 48) 2
76  : OP_90                (line 48)
77  : JUMP_IF_FALSE        (line 48) 1
78  : OP_91                (line 48)
79  : OP_96                (line 48)
80  : STORE_VAR            (line 48) error_result
81  : PUSH_STRING          (line 49) "This should not print due to error propagation"
82  : PRINT                (line 49)
83  : END_SCOPE            (line 42)
84  : PUSH_NULL            (line 42)
85  : RETURN               (line 42)
86  : END_FUNCTION         (line 42)
87  : BEGIN_FUNCTION       (line 56)
88  : BEGIN_SCOPE          (line 56)
89  : PUSH_INT             (line 58) 10
90  : PUSH_INT             (line 58) 0
91  : CALL                 (line 58) 2
92  : OP_90                (line 58)
93  : JUMP_IF_TRUE         (line 58) 2
94  : OP_96                (line 58)
95  : JUMP                 (line 58) 9
96  : STORE_VAR            (line 58) error
97  : BEGIN_SCOPE          (line 58)
98  : PUSH_STRING          (line 59) "Caught error:"
99  : LOAD_VAR             (line 59) error
100 : PRINT                (line 59)
101 : PUSH_INT             (line 60) 1
102 : NEGATE               (line 60)
103 : RETURN               (line 60)
104 : END_SCOPE            (line 58)
105 : STORE_VAR            (line 58) result
106 : PUSH_STRING          (line 64) "123"
107 : CALL                 (line 64) 1
108 : OP_90                (line 64)
109 : JUMP_IF_TRUE         (line 64) 2
110 : OP_96                (line 64)
111 : JUMP                 (line 64) 24
112 : STORE_VAR            (line 64) error
113 : BEGIN_SCOPE          (line 64)
114 : LOAD_VAR             (line 69) error
115 : PUSH_STRING          (line 69) "InvalidNumber"
116 : EQUAL                (line 69)
117 : JUMP_IF_FALSE        (line 69) 5
118 : BEGIN_SCOPE          (line 69)
119 : PUSH_STRING          (line 70) "Invalid number format"
120 : PRINT                (line 70)
121 : END_SCOPE            (line 69)
122 : JUMP                 (line 69) 9
123 : LOAD_VAR             (line 71) error
124 : PUSH_STRING          (line 71) "Overflow"
125 : EQUAL                (line 71)
126 : JUMP_IF_FALSE        (line 71) 5
127 : BEGIN_SCOPE          (line 71)
128 : PUSH_STRING          (line 72) "Number too large"
129 : PRINT                (line 72)
130 : END_SCOPE            (line 71)
131 : JUMP                 (line 71) 0
132 : PUSH_INT             (line 74) 1
133 : NEGATE               (line 74)
134 : RETURN               (line 74)
135 : END_SCOPE            (line 64)
136 : STORE_VAR            (line 64) parsed
137 : PUSH_STRING          (line 77) "Result after error handling:"
138 : LOAD_VAR             (line 77) result
139 : PRINT                (line 77)
140 : END_SCOPE            (line 56)
141 : PUSH_NULL            (line 56)
142 : RETURN               (line 56)
143 : END_FUNCTION         (line 56)
144 : BEGIN_FUNCTION       (line 81)
145 : BEGIN_SCOPE          (line 81)
146 : PUSH_INT             (line 82) 42
147 : OP_93                (line 82)
148 : STORE_VAR            (line 82) success_val
149 : OP_92                (line 83)
150 : STORE_VAR            (line 83) error_val
151 : LOAD_VAR             (line 86) success_val
152 : CALL                 (line 86) 1
153 : JUMP_IF_FALSE        (line 86) 5
154 : BEGIN_SCOPE          (line 86)
155 : PUSH_STRING          (line 87) "Success value incorrectly identified as error"
156 : PRINT                (line 87)
157 : END_SCOPE            (line 86)
158 : JUMP                 (line 86) 4
159 : BEGIN_SCOPE          (line 88)
160 : PUSH_STRING          (line 89) "Success value correctly identified"
161 : PRINT                (line 89)
162 : END_SCOPE            (line 88)
163 : LOAD_VAR             (line 92) error_val
164 : CALL                 (line 92) 1
165 : JUMP_IF_FALSE        (line 92) 5
166 : BEGIN_SCOPE          (line 92)
167 : PUSH_STRING          (line 93) "Error value correctly identified"
168 : PRINT                (line 93)
169 : END_SCOPE            (line 92)
170 : JUMP                 (line 92) 4
171 : BEGIN_SCOPE          (line 94)
172 : PUSH_STRING          (line 95) "Error value incorrectly identified as success"
173 : PRINT                (line 95)
174 : END_SCOPE            (line 94)
175 : END_SCOPE            (line 81)
176 : PUSH_NULL            (line 81)
177 : RETURN               (line 81)
178 : END_FUNCTION         (line 81)
179 : BEGIN_FUNCTION       (line 111)
180 : DEFINE_PARAM         (line 111) data
181 : BEGIN_SCOPE          (line 111)
182 : LOAD_VAR             (line 113) data
183 : PUSH_NULL            (line 113)
184 : EQUAL                (line 113)
185 : JUMP_IF_FALSE        (line 113) 5
186 : BEGIN_SCOPE          (line 113)
187 : OP_92                (line 114)
188 : RETURN               (line 114)
189 : END_SCOPE            (line 113)
190 : JUMP                 (line 113) 0
191 : PUSH_STRING          (line 116) "processed_"
192 : LOAD_VAR             (line 116) data
193 : ADD                  (line 116)
194 : OP_93                (line 116)
195 : RETURN               (line 116)
196 : END_SCOPE            (line 111)
197 : PUSH_NULL            (line 111)
198 : RETURN               (line 111)
199 : END_FUNCTION         (line 111)
200 : BEGIN_FUNCTION       (line 120)
201 : DEFINE_PARAM         (line 120) s
202 : DEFINE_PARAM         (line 120) divisor
203 : BEGIN_SCOPE          (line 120)
204 : LOAD_VAR             (line 121) s
205 : CALL                 (line 121) 1
206 : OP_90                (line 121)
207 : JUMP_IF_FALSE        (line 121) 1
208 : OP_91                (line 121)
209 : OP_96                (line 121)
210 : STORE_VAR            (line 121) processed
211 : LOAD_VAR             (line 122) processed
212 : GET_PROPERTY         (line 122) length
213 : LOAD_VAR             (line 122) divisor
214 : CALL                 (line 122) 2
215 : OP_90                (line 122)
216 : JUMP_IF_FALSE        (line 122) 1
217 : OP_91                (line 122)
218 : OP_96                (line 122)
219 : RETURN               (line 122)
220 : END_SCOPE            (line 120)
221 : PUSH_NULL            (line 120)
222 : RETURN               (line 120)
223 : END_FUNCTION         (line 120)
224 : BEGIN_FUNCTION       (line 125)
225 : BEGIN_SCOPE          (line 125)
226 : PUSH_STRING          (line 129) "test"
227 : PUSH_INT             (line 129) 2
228 : CALL                 (line 129) 2
229 : OP_90                (line 129)
230 : JUMP_IF_TRUE         (line 129) 2
231 : OP_96                (line 129)
232 : JUMP                 (line 129) 33
233 : STORE_VAR            (line 129) error
234 : BEGIN_SCOPE          (line 129)
235 : LOAD_VAR             (line 130) error
236 : PUSH_STRING          (line 130) "DivisionByZero"
237 : EQUAL                (line 130)
238 : JUMP_IF_FALSE        (line 130) 5
239 : BEGIN_SCOPE          (line 130)
240 : PUSH_STRING          (line 131) "Cannot divide by zero"
241 : PRINT                (line 131)
242 : END_SCOPE            (line 130)
243 : JUMP                 (line 130) 18
244 : LOAD_VAR             (line 132) error
245 : PUSH_STRING          (line 132) "ParseError"
246 : EQUAL                (line 132)
247 : JUMP_IF_FALSE        (line 132) 5
248 : BEGIN_SCOPE          (line 132)
249 : PUSH_STRING          (line 133) "Failed to parse input"
250 : PRINT                (line 133)
251 : END_SCOPE            (line 132)
252 : JUMP                 (line 132) 9
253 : LOAD_VAR             (line 134) error
254 : PUSH_STRING          (line 134) "IOError"
255 : EQUAL                (line 134)
256 : JUMP_IF_FALSE        (line 134) 5
257 : BEGIN_SCOPE          (line 134)
258 : PUSH_STRING          (line 135) "IO error occurred"
259 : PRINT                (line 135)
260 : END_SCOPE            (line 134)
261 : JUMP                 (line 134) 0
262 : PUSH_INT             (line 137) 1
263 : NEGATE               (line 137)
264 : RETURN               (line 137)
265 : END_SCOPE            (line 129)
266 : STORE_VAR            (line 129) result
267 : PUSH_STRING          (line 140) "Processed result:"
268 : LOAD_VAR             (line 140) result
269 : PRINT                (line 140)
270 : END_SCOPE            (line 125)
271 : PUSH_NULL            (line 125)
272 : RETURN               (line 125)
273 : END_FUNCTION         (line 125)
274 : BEGIN_FUNCTION       (line 144)
275 : BEGIN_SCOPE          (line 144)
276 : PUSH_INT             (line 146) 10
277 : PUSH_INT             (line 146) 2
278 : CALL                 (line 146) 2
279 : STORE_VAR            (line 146) maybe_num
280 : PUSH_INT             (line 147) 10
281 : PUSH_INT             (line 147) 2
282 : CALL                 (line 147) 2
283 : STORE_VAR            (line 147) inferred
284 : PUSH_INT             (line 150) 10
285 : PUSH_INT             (line 150) 2
286 : CALL                 (line 150) 2
287 : STORE_VAR            (line 150) wrong_type
288 : PUSH_INT             (line 153) 10
289 : PUSH_INT             (line 153) 2
290 : CALL                 (line 153) 2
291 : STORE_VAR            (line 153) with_errors
292 : END_SCOPE            (line 144)
293 : PUSH_NULL            (line 144)
294 : RETURN               (line 144)
295 : END_FUNCTION         (line 144)
296 : CALL                 (line 160) 0
297 : POP                  (line 160)
298 : CALL                 (line 161) 0
299 : POP                  (line 161)
300 : CALL                 (line 162) 0
301 : POP                  (line 162)
302 : CALL                 (line 163) 0
303 : POP                  (line 163)
304 : CALL                 (line 164) 0
305 : POP                  (line 164)
306 : CALL                 (line 165) 0
307 : POP                  (line 165)
308 : CALL                 (line 166) 0
309 : POP                  (line 166)
310 : HALT                 (line 0)

// Test builtin function error handling integration

print("Testing builtin function error handling...");

// Test 1: len with nil (should produce error)
print("Test 1: len(nil) - should produce error");
var result1 = len(nil);
print("Result: " + result1);

// Test 2: len with invalid type (number)
print("Test 2: len(42) - should produce error");
var result2 = len(42);
print("Result: " + result2);

// Test 3: round with string (should produce error)
print("Test 3: round(\"hello\", 2) - should produce error");
var result3 = round("hello", 2);
print("Result: " + result3);

// Test 4: assert with false condition (should produce error)
print("Test 4: assert(false, \"Test assertion\") - should produce error");
assert(false, "Test assertion");
print("This should not be reached");

// Test 5: map with invalid list type
print("Test 5: map(nil, \"not a list\") - should produce error");
var result5 = map(nil, "not a list");
print("Result: " + result5);

// Test 6: filter with invalid list type
print("Test 6: filter(nil, 42) - should produce error");
var result6 = filter(nil, 42);
print("Result: " + result6);

// Test 7: find with invalid list type
print("Test 7: find(\"even\", \"not a list\") - should produce error");
var result7 = find("even", "not a list");
print("Result: " + result7);

// Test 8: some with invalid list type
print("Test 8: some(\"even\", 123) - should produce error");
var result8 = some("even", 123);
print("Result: " + result8);

// Test 9: every with invalid list type
print("Test 9: every(\"even\", true) - should produce error");
var result9 = every("even", true);
print("Result: " + result9);

// Test 10: reduce with invalid list type
print("Test 10: reduce(nil, \"not a list\") - should produce error");
var result10 = reduce(nil, "not a list");
print("Result: " + result10);

print("Error handling tests completed!");
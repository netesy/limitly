#ifndef BACKEND_H
#define BACKEND_H

#include "frontend/ast.hh"
#include "opcodes.hh"
#include <vector>
#include <memory>

// Backend interface - base class for different backend implementations
class Backend {
public:
    virtual ~Backend() = default;
    virtual void process(const std::shared_ptr<AST::Program>& program) = 0;
};

// Bytecode generation backend
class BytecodeGenerator : public Backend {
public:
    BytecodeGenerator() = default;
    
    void process(const std::shared_ptr<AST::Program>& program) override;
    
    // Get the generated bytecode
    const std::vector<Instruction>& getBytecode() const { return bytecode; }
    
private:
    std::vector<Instruction> bytecode;
    int tempVarCounter = 0;
    std::vector<size_t> loopStartAddresses;
    std::vector<size_t> loopContinueAddresses;
    std::vector<std::vector<size_t>> loopBreakPatches;
    
    // Visitor methods for AST nodes
    void visitStatement(const std::shared_ptr<AST::Statement>& stmt);
    void visitExpression(const std::shared_ptr<AST::Expression>& expr);
    
    // Statement visitors
    void visitVarDeclaration(const std::shared_ptr<AST::VarDeclaration>& stmt);
    void visitFunctionDeclaration(const std::shared_ptr<AST::FunctionDeclaration>& stmt);
    void visitClassDeclaration(const std::shared_ptr<AST::ClassDeclaration>& stmt);
    void visitBlockStatement(const std::shared_ptr<AST::BlockStatement>& stmt);
    void visitIfStatement(const std::shared_ptr<AST::IfStatement>& stmt);
    void visitForStatement(const std::shared_ptr<AST::ForStatement>& stmt);
    void visitWhileStatement(const std::shared_ptr<AST::WhileStatement>& stmt);
    void visitBreakStatement(const std::shared_ptr<AST::BreakStatement>& stmt);
    void visitContinueStatement(const std::shared_ptr<AST::ContinueStatement>& stmt);
    void visitReturnStatement(const std::shared_ptr<AST::ReturnStatement>& stmt);
    void visitPrintStatement(const std::shared_ptr<AST::PrintStatement>& stmt);
    void visitExprStatement(const std::shared_ptr<AST::ExprStatement>& stmt);
    void visitAttemptStatement(const std::shared_ptr<AST::AttemptStatement>& stmt);
    void visitParallelStatement(const std::shared_ptr<AST::ParallelStatement>& stmt);
    void visitConcurrentStatement(const std::shared_ptr<AST::ConcurrentStatement>& stmt);
    void visitImportStatement(const std::shared_ptr<AST::ImportStatement>& stmt);
    void visitEnumDeclaration(const std::shared_ptr<AST::EnumDeclaration>& stmt);
    void visitMatchStatement(const std::shared_ptr<AST::MatchStatement>& stmt);
    void visitIterStatement(const std::shared_ptr<AST::IterStatement>& stmt);
    void visitModuleDeclaration(const std::shared_ptr<AST::ModuleDeclaration>& stmt);
    void visitContractStatement(const std::shared_ptr<AST::ContractStatement>& stmt);
    
    // Expression visitors
    void visitBinaryExpr(const std::shared_ptr<AST::BinaryExpr>& expr);
    void visitUnaryExpr(const std::shared_ptr<AST::UnaryExpr>& expr);
    void visitLiteralExpr(const std::shared_ptr<AST::LiteralExpr>& expr);
    void visitVariableExpr(const std::shared_ptr<AST::VariableExpr>& expr);
    void visitCallExpr(const std::shared_ptr<AST::CallExpr>& expr);
    void visitAssignExpr(const std::shared_ptr<AST::AssignExpr>& expr);
    void visitGroupingExpr(const std::shared_ptr<AST::GroupingExpr>& expr);
    void visitListExpr(const std::shared_ptr<AST::ListExpr>& expr);
    void visitDictExpr(const std::shared_ptr<AST::DictExpr>& expr);
    void visitIndexExpr(const std::shared_ptr<AST::IndexExpr>& expr);
    void visitMemberExpr(const std::shared_ptr<AST::MemberExpr>& expr);
    void visitAwaitExpr(const std::shared_ptr<AST::AwaitExpr>& expr);
    void visitRangeExpr(const std::shared_ptr<AST::RangeExpr>& expr);
    void visitInterpolatedStringExpr(const std::shared_ptr<AST::InterpolatedStringExpr>& expr);
    
    // Pattern expression visitors for match statements
    void visitTypePatternExpr(const std::shared_ptr<AST::TypePatternExpr>& expr);
    void visitBindingPatternExpr(const std::shared_ptr<AST::BindingPatternExpr>& expr);
    void visitDictPatternExpr(const std::shared_ptr<AST::DictPatternExpr>& expr);
    void visitTuplePatternExpr(const std::shared_ptr<AST::TuplePatternExpr>& expr);
    void visitListPatternExpr(const std::shared_ptr<AST::ListPatternExpr>& expr);
    
    // Helper methods
    void emit(Opcode op, uint32_t lineNumber, 
              int32_t intValue = 0, 
              float floatValue = 0.0f, 
              bool boolValue = false, 
              const std::string& stringValue = "");
};

// AST Printer has been moved to ast_printer.hh

#endif // BACKEND_H
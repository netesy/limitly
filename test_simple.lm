// Unformatted code to test the formatter
var x:int=5;
var y:int = 10;
var name: str = "Alice";
var numbers: [int] = [1,2,3,4,5];
var person: {name: str, age: int} = {"name": "Bob", "age": 25};

fn add(a:int,b:int):int{
return a+b;
}

fn greet(name: str = "World"): str {
return "Hello, " + name + "!";
}

fn processData(data: [int], multiplier: int = 2): [int] {
var result: [int] = [];
iter (item in data) {
result.append(item * multiplier);
}
return result;
}

class Person {
var name: str;
var age: int;

fn constructor(name: str, age: int) {
this.name = name;
this.age = age;
}

fn greet(): str {
return "Hello, I'm " + this.name;
}
}

if(x>y){
print("x is greater");
}else{
print("y is greater or equal");
}

while(x<20){
x+=1;
print("x is now {x}");
}

for(var i:int=0;i<5;i+=1){
print("Loop iteration {i}");
}

iter(num in 1..10){
if(num%2==0){
print("Even: {num}");
}
}

var result:int=add(x,y);
print("Result: {result}");

var greeting:str=greet();
print(greeting);

var processed:[int]=processData(numbers,3);
print("Processed: {processed}");

attempt {
var division: int = 10 / 0;
print("Division result: {division}");
} handle DivisionByZeroError {
print("Cannot divide by zero!");
}

parallel {
print("This runs in parallel");
var computation: int = 42 * 42;
print("Computation: {computation}");
}

concurrent {
print("This runs concurrently");
await someAsyncOperation();
}

match (x) {
case 5 => {
print("x is five");
}
case 10 => {
print("x is ten");
}
}

enum Color {
Red,
Green,
Blue
}
// Test file for error handling bytecode operations

// Test 1: Basic error construction
fn test_error_construction() {
    var error_val = err("DivisionByZero");
    print("Error construction test:", error_val);
}

// Test 2: Success value construction
fn test_success_construction() {
    var success_val = ok(42);
    print("Success construction test:", success_val);
}

// Test 3: Fallible expression with error propagation
fn divide(a: int, b: int): int?DivisionByZero {
    if (b == 0) {
        return err("DivisionByZero");
    }
    return ok(a / b);
}

fn test_error_propagation() {
    var result = divide(10, 2)?;
    print("Division result:", result);
    
    var error_result = divide(10, 0)?;
    print("This should not print due to error propagation");
}

// Test 4: Fallible expression with error handling
fn test_error_handling() {
    var result = divide(10, 0)? else error {
        print("Caught error:", error);
        return -1;
    };
    print("Result after error handling:", result);
}

// Test 5: Error type checking
fn test_error_checking() {
    var success_val = ok(42);
    var error_val = err("TestError");
    
    if (is_error(success_val)) {
        print("Success value incorrectly identified as error");
    } else {
        print("Success value correctly identified");
    }
    
    if (is_error(error_val)) {
        print("Error value correctly identified");
    } else {
        print("Error value incorrectly identified as success");
    }
}

// Run tests
test_error_construction();
test_success_construction();
test_error_propagation();
test_error_handling();
test_error_checking();
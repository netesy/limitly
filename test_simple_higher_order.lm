// Test simple higher-order functions without closures

// Define some simple functions
fn add_one(x: int): int {
    return x + 1;
}

fn multiply_by_two(x: int): int {
    return x * 2;
}

fn square(x: int): int {
    return x * x;
}

// Define a function that takes another function as parameter
fn apply_twice(func: function(int): int, x: int): int {
    var temp: int = func(x);
    return func(temp);
}

// Define a function that applies two functions in sequence
fn compose(f: function(int): int, g: function(int): int, x: int): int {
    return f(g(x));
}

// Test function parameters
print("Testing higher-order functions:");

var result1: int = apply_twice(add_one, 5);
print("apply_twice(add_one, 5) =", result1);  // Should be 7

var result2: int = apply_twice(multiply_by_two, 3);
print("apply_twice(multiply_by_two, 3) =", result2);  // Should be 12

var result3: int = compose(square, add_one, 4);
print("compose(square, add_one, 4) =", result3);  // Should be 25 (square(add_one(4)) = square(5) = 25)

var result4: int = compose(add_one, square, 4);
print("compose(add_one, square, 4) =", result4);  // Should be 17 (add_one(square(4)) = add_one(16) = 17)
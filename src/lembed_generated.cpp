#include "lembed.hh"
#include "opcodes.hh"
#include <string>
#include <vector>

// Generated by tools/goembed.py
static Instruction I(Opcode op, uint32_t line = 0, int64_t iv = 0, float fv = 0.0f, bool bv = false, const std::string& sv = "") {
    Instruction ins; ins.opcode = op; ins.line = line; ins.intValue = iv; ins.floatValue = fv; ins.boolValue = bv; ins.stringValue = sv; return ins;
}

extern "C" void registerGeneratedEmbeds() {
    // Embed: test_error_embed
    lembed::Bytecode bc;
    bc.push_back(I(Opcode::BEGIN_FUNCTION));
    bc.push_back(I(Opcode::BEGIN_SCOPE));
    bc.push_back(I(Opcode::CONSTRUCT_ERROR));
    bc.push_back(I(Opcode::STORE_VAR, 0, 0, 0.0f, false, "error_val"));
    bc.push_back(I(Opcode::PUSH_STRING, 0, 0, 0.0f, false, "\"Error construction test:\""));
    bc.push_back(I(Opcode::LOAD_VAR, 0, 0, 0.0f, false, "error_val"));
    bc.push_back(I(Opcode::PRINT));
    bc.push_back(I(Opcode::END_SCOPE));
    bc.push_back(I(Opcode::PUSH_NULL));
    bc.push_back(I(Opcode::RETURN));
    bc.push_back(I(Opcode::END_FUNCTION));
    bc.push_back(I(Opcode::BEGIN_FUNCTION));
    bc.push_back(I(Opcode::BEGIN_SCOPE));
    bc.push_back(I(Opcode::PUSH_INT, 0, 42));
    bc.push_back(I(Opcode::CONSTRUCT_OK));
    bc.push_back(I(Opcode::STORE_VAR, 0, 0, 0.0f, false, "success_val"));
    bc.push_back(I(Opcode::PUSH_STRING, 0, 0, 0.0f, false, "success"));
    bc.push_back(I(Opcode::CONSTRUCT_OK));
    bc.push_back(I(Opcode::STORE_VAR, 0, 0, 0.0f, false, "success_str"));
    bc.push_back(I(Opcode::PUSH_STRING, 0, 0, 0.0f, false, "\"Success construction test:\""));
    bc.push_back(I(Opcode::LOAD_VAR, 0, 0, 0.0f, false, "success_val"));
    bc.push_back(I(Opcode::LOAD_VAR, 0, 0, 0.0f, false, "success_str"));
    bc.push_back(I(Opcode::PRINT));
    bc.push_back(I(Opcode::END_SCOPE));
    bc.push_back(I(Opcode::PUSH_NULL));
    bc.push_back(I(Opcode::RETURN));
    bc.push_back(I(Opcode::END_FUNCTION));
    bc.push_back(I(Opcode::BEGIN_FUNCTION));
    bc.push_back(I(Opcode::DEFINE_PARAM, 0, 0, 0.0f, false, "a"));
    bc.push_back(I(Opcode::DEFINE_PARAM, 0, 0, 0.0f, false, "b"));
    bc.push_back(I(Opcode::BEGIN_SCOPE));
    bc.push_back(I(Opcode::LOAD_VAR, 0, 0, 0.0f, false, "b"));
    bc.push_back(I(Opcode::PUSH_INT, 0, 0));
    bc.push_back(I(Opcode::EQUAL));
    bc.push_back(I(Opcode::JUMP_IF_FALSE, 0, 5));
    bc.push_back(I(Opcode::BEGIN_SCOPE));
    bc.push_back(I(Opcode::CONSTRUCT_ERROR));
    bc.push_back(I(Opcode::RETURN));
    bc.push_back(I(Opcode::END_SCOPE));
    bc.push_back(I(Opcode::JUMP, 0, 0));
    bc.push_back(I(Opcode::LOAD_VAR, 0, 0, 0.0f, false, "a"));
    bc.push_back(I(Opcode::LOAD_VAR, 0, 0, 0.0f, false, "b"));
    bc.push_back(I(Opcode::DIVIDE));
    bc.push_back(I(Opcode::CONSTRUCT_OK));
    bc.push_back(I(Opcode::RETURN));
    bc.push_back(I(Opcode::END_SCOPE));
    bc.push_back(I(Opcode::PUSH_NULL));
    bc.push_back(I(Opcode::RETURN));
    bc.push_back(I(Opcode::END_FUNCTION));
    bc.push_back(I(Opcode::BEGIN_FUNCTION));
    bc.push_back(I(Opcode::DEFINE_PARAM, 0, 0, 0.0f, false, "s"));
    bc.push_back(I(Opcode::BEGIN_SCOPE));
    bc.push_back(I(Opcode::PUSH_INT, 0, 0));
    bc.push_back(I(Opcode::CONSTRUCT_OK));
    bc.push_back(I(Opcode::RETURN));
    bc.push_back(I(Opcode::END_SCOPE));
    bc.push_back(I(Opcode::PUSH_NULL));
    bc.push_back(I(Opcode::RETURN));
    bc.push_back(I(Opcode::END_FUNCTION));
    bc.push_back(I(Opcode::BEGIN_FUNCTION));
    bc.push_back(I(Opcode::BEGIN_SCOPE));
    bc.push_back(I(Opcode::PUSH_INT, 0, 10));
    bc.push_back(I(Opcode::PUSH_INT, 0, 2));
    bc.push_back(I(Opcode::CALL, 0, 2));
    bc.push_back(I(Opcode::CHECK_ERROR));
    bc.push_back(I(Opcode::JUMP_IF_FALSE, 0, 1));
    bc.push_back(I(Opcode::PROPAGATE_ERROR));
    bc.push_back(I(Opcode::UNWRAP_VALUE));
    bc.push_back(I(Opcode::STORE_VAR, 0, 0, 0.0f, false, "result"));
    bc.push_back(I(Opcode::PUSH_STRING, 0, 0, 0.0f, false, "\"Division result:\""));
    bc.push_back(I(Opcode::LOAD_VAR, 0, 0, 0.0f, false, "result"));
    bc.push_back(I(Opcode::PRINT));
    bc.push_back(I(Opcode::PUSH_INT, 0, 10));
    bc.push_back(I(Opcode::PUSH_INT, 0, 0));
    bc.push_back(I(Opcode::CALL, 0, 2));
    bc.push_back(I(Opcode::CHECK_ERROR));
    bc.push_back(I(Opcode::JUMP_IF_FALSE, 0, 1));
    bc.push_back(I(Opcode::PROPAGATE_ERROR));
    bc.push_back(I(Opcode::UNWRAP_VALUE));
    bc.push_back(I(Opcode::STORE_VAR, 0, 0, 0.0f, false, "error_result"));
    bc.push_back(I(Opcode::PUSH_STRING, 0, 0, 0.0f, false, "\"This should not print due to error propagation\""));
    bc.push_back(I(Opcode::PRINT));
    bc.push_back(I(Opcode::END_SCOPE));
    bc.push_back(I(Opcode::PUSH_NULL));
    bc.push_back(I(Opcode::RETURN));
    bc.push_back(I(Opcode::END_FUNCTION));
    bc.push_back(I(Opcode::BEGIN_FUNCTION));
    bc.push_back(I(Opcode::BEGIN_SCOPE));
    bc.push_back(I(Opcode::PUSH_INT, 0, 10));
    bc.push_back(I(Opcode::PUSH_INT, 0, 0));
    bc.push_back(I(Opcode::CALL, 0, 2));
    bc.push_back(I(Opcode::CHECK_ERROR));
    bc.push_back(I(Opcode::JUMP_IF_TRUE, 0, 2));
    bc.push_back(I(Opcode::UNWRAP_VALUE));
    bc.push_back(I(Opcode::JUMP, 0, 9));
    bc.push_back(I(Opcode::STORE_VAR, 0, 0, 0.0f, false, "error"));
    bc.push_back(I(Opcode::BEGIN_SCOPE));
    bc.push_back(I(Opcode::PUSH_STRING, 0, 0, 0.0f, false, "\"Caught error:\""));
    bc.push_back(I(Opcode::LOAD_VAR, 0, 0, 0.0f, false, "error"));
    bc.push_back(I(Opcode::PRINT));
    bc.push_back(I(Opcode::PUSH_INT, 0, 1));
    bc.push_back(I(Opcode::NEGATE));
    bc.push_back(I(Opcode::RETURN));
    bc.push_back(I(Opcode::END_SCOPE));
    bc.push_back(I(Opcode::STORE_VAR, 0, 0, 0.0f, false, "result"));
    bc.push_back(I(Opcode::PUSH_STRING, 0, 0, 0.0f, false, "123"));
    bc.push_back(I(Opcode::CALL, 0, 1));
    bc.push_back(I(Opcode::CHECK_ERROR));
    bc.push_back(I(Opcode::JUMP_IF_TRUE, 0, 2));
    bc.push_back(I(Opcode::UNWRAP_VALUE));
    bc.push_back(I(Opcode::JUMP, 0, 24));
    bc.push_back(I(Opcode::STORE_VAR, 0, 0, 0.0f, false, "error"));
    bc.push_back(I(Opcode::BEGIN_SCOPE));
    bc.push_back(I(Opcode::LOAD_VAR, 0, 0, 0.0f, false, "error"));
    bc.push_back(I(Opcode::PUSH_STRING, 0, 0, 0.0f, false, "InvalidNumber"));
    bc.push_back(I(Opcode::EQUAL));
    bc.push_back(I(Opcode::JUMP_IF_FALSE, 0, 5));
    bc.push_back(I(Opcode::BEGIN_SCOPE));
    bc.push_back(I(Opcode::PUSH_STRING, 0, 0, 0.0f, false, "\"Invalid number format\""));
    bc.push_back(I(Opcode::PRINT));
    bc.push_back(I(Opcode::END_SCOPE));
    bc.push_back(I(Opcode::JUMP, 0, 9));
    bc.push_back(I(Opcode::LOAD_VAR, 0, 0, 0.0f, false, "error"));
    bc.push_back(I(Opcode::PUSH_STRING, 0, 0, 0.0f, false, "Overflow"));
    bc.push_back(I(Opcode::EQUAL));
    bc.push_back(I(Opcode::JUMP_IF_FALSE, 0, 5));
    bc.push_back(I(Opcode::BEGIN_SCOPE));
    bc.push_back(I(Opcode::PUSH_STRING, 0, 0, 0.0f, false, "\"Number too large\""));
    bc.push_back(I(Opcode::PRINT));
    bc.push_back(I(Opcode::END_SCOPE));
    bc.push_back(I(Opcode::JUMP, 0, 0));
    bc.push_back(I(Opcode::PUSH_INT, 0, 1));
    bc.push_back(I(Opcode::NEGATE));
    bc.push_back(I(Opcode::RETURN));
    bc.push_back(I(Opcode::END_SCOPE));
    bc.push_back(I(Opcode::STORE_VAR, 0, 0, 0.0f, false, "parsed"));
    bc.push_back(I(Opcode::PUSH_STRING, 0, 0, 0.0f, false, "\"Result after error handling:\""));
    bc.push_back(I(Opcode::LOAD_VAR, 0, 0, 0.0f, false, "result"));
    bc.push_back(I(Opcode::PRINT));
    bc.push_back(I(Opcode::END_SCOPE));
    bc.push_back(I(Opcode::PUSH_NULL));
    bc.push_back(I(Opcode::RETURN));
    bc.push_back(I(Opcode::END_FUNCTION));
    bc.push_back(I(Opcode::BEGIN_FUNCTION));
    bc.push_back(I(Opcode::BEGIN_SCOPE));
    bc.push_back(I(Opcode::PUSH_INT, 0, 42));
    bc.push_back(I(Opcode::CONSTRUCT_OK));
    bc.push_back(I(Opcode::STORE_VAR, 0, 0, 0.0f, false, "success_val"));
    bc.push_back(I(Opcode::CONSTRUCT_ERROR));
    bc.push_back(I(Opcode::STORE_VAR, 0, 0, 0.0f, false, "error_val"));
    bc.push_back(I(Opcode::LOAD_VAR, 0, 0, 0.0f, false, "success_val"));
    bc.push_back(I(Opcode::CALL, 0, 1));
    bc.push_back(I(Opcode::JUMP_IF_FALSE, 0, 5));
    bc.push_back(I(Opcode::BEGIN_SCOPE));
    bc.push_back(I(Opcode::PUSH_STRING, 0, 0, 0.0f, false, "\"Success value incorrectly identified as error\""));
    bc.push_back(I(Opcode::PRINT));
    bc.push_back(I(Opcode::END_SCOPE));
    bc.push_back(I(Opcode::JUMP, 0, 4));
    bc.push_back(I(Opcode::BEGIN_SCOPE));
    bc.push_back(I(Opcode::PUSH_STRING, 0, 0, 0.0f, false, "\"Success value correctly identified\""));
    bc.push_back(I(Opcode::PRINT));
    bc.push_back(I(Opcode::END_SCOPE));
    bc.push_back(I(Opcode::LOAD_VAR, 0, 0, 0.0f, false, "error_val"));
    bc.push_back(I(Opcode::CALL, 0, 1));
    bc.push_back(I(Opcode::JUMP_IF_FALSE, 0, 5));
    bc.push_back(I(Opcode::BEGIN_SCOPE));
    bc.push_back(I(Opcode::PUSH_STRING, 0, 0, 0.0f, false, "\"Error value correctly identified\""));
    bc.push_back(I(Opcode::PRINT));
    bc.push_back(I(Opcode::END_SCOPE));
    bc.push_back(I(Opcode::JUMP, 0, 4));
    bc.push_back(I(Opcode::BEGIN_SCOPE));
    bc.push_back(I(Opcode::PUSH_STRING, 0, 0, 0.0f, false, "\"Error value incorrectly identified as success\""));
    bc.push_back(I(Opcode::PRINT));
    bc.push_back(I(Opcode::END_SCOPE));
    bc.push_back(I(Opcode::END_SCOPE));
    bc.push_back(I(Opcode::PUSH_NULL));
    bc.push_back(I(Opcode::RETURN));
    bc.push_back(I(Opcode::END_FUNCTION));
    bc.push_back(I(Opcode::BEGIN_FUNCTION));
    bc.push_back(I(Opcode::DEFINE_PARAM, 0, 0, 0.0f, false, "data"));
    bc.push_back(I(Opcode::BEGIN_SCOPE));
    bc.push_back(I(Opcode::LOAD_VAR, 0, 0, 0.0f, false, "data"));
    bc.push_back(I(Opcode::PUSH_NULL));
    bc.push_back(I(Opcode::EQUAL));
    bc.push_back(I(Opcode::JUMP_IF_FALSE, 0, 5));
    bc.push_back(I(Opcode::BEGIN_SCOPE));
    bc.push_back(I(Opcode::CONSTRUCT_ERROR));
    bc.push_back(I(Opcode::RETURN));
    bc.push_back(I(Opcode::END_SCOPE));
    bc.push_back(I(Opcode::JUMP, 0, 0));
    bc.push_back(I(Opcode::PUSH_STRING, 0, 0, 0.0f, false, "processed_"));
    bc.push_back(I(Opcode::LOAD_VAR, 0, 0, 0.0f, false, "data"));
    bc.push_back(I(Opcode::ADD));
    bc.push_back(I(Opcode::CONSTRUCT_OK));
    bc.push_back(I(Opcode::RETURN));
    bc.push_back(I(Opcode::END_SCOPE));
    bc.push_back(I(Opcode::PUSH_NULL));
    bc.push_back(I(Opcode::RETURN));
    bc.push_back(I(Opcode::END_FUNCTION));
    bc.push_back(I(Opcode::BEGIN_FUNCTION));
    bc.push_back(I(Opcode::DEFINE_PARAM, 0, 0, 0.0f, false, "s"));
    bc.push_back(I(Opcode::DEFINE_PARAM, 0, 0, 0.0f, false, "divisor"));
    bc.push_back(I(Opcode::BEGIN_SCOPE));
    bc.push_back(I(Opcode::LOAD_VAR, 0, 0, 0.0f, false, "s"));
    bc.push_back(I(Opcode::CALL, 0, 1));
    bc.push_back(I(Opcode::CHECK_ERROR));
    bc.push_back(I(Opcode::JUMP_IF_FALSE, 0, 1));
    bc.push_back(I(Opcode::PROPAGATE_ERROR));
    bc.push_back(I(Opcode::UNWRAP_VALUE));
    bc.push_back(I(Opcode::STORE_VAR, 0, 0, 0.0f, false, "processed"));
    bc.push_back(I(Opcode::LOAD_VAR, 0, 0, 0.0f, false, "processed"));
    bc.push_back(I(Opcode::GET_PROPERTY, 0, 0, 0.0f, false, "length"));
    bc.push_back(I(Opcode::LOAD_VAR, 0, 0, 0.0f, false, "divisor"));
    bc.push_back(I(Opcode::CALL, 0, 2));
    bc.push_back(I(Opcode::CHECK_ERROR));
    bc.push_back(I(Opcode::JUMP_IF_FALSE, 0, 1));
    bc.push_back(I(Opcode::PROPAGATE_ERROR));
    bc.push_back(I(Opcode::UNWRAP_VALUE));
    bc.push_back(I(Opcode::RETURN));
    bc.push_back(I(Opcode::END_SCOPE));
    bc.push_back(I(Opcode::PUSH_NULL));
    bc.push_back(I(Opcode::RETURN));
    bc.push_back(I(Opcode::END_FUNCTION));
    bc.push_back(I(Opcode::BEGIN_FUNCTION));
    bc.push_back(I(Opcode::BEGIN_SCOPE));
    bc.push_back(I(Opcode::PUSH_STRING, 0, 0, 0.0f, false, "test"));
    bc.push_back(I(Opcode::PUSH_INT, 0, 2));
    bc.push_back(I(Opcode::CALL, 0, 2));
    bc.push_back(I(Opcode::CHECK_ERROR));
    bc.push_back(I(Opcode::JUMP_IF_TRUE, 0, 2));
    bc.push_back(I(Opcode::UNWRAP_VALUE));
    bc.push_back(I(Opcode::JUMP, 0, 33));
    bc.push_back(I(Opcode::STORE_VAR, 0, 0, 0.0f, false, "error"));
    bc.push_back(I(Opcode::BEGIN_SCOPE));
    bc.push_back(I(Opcode::LOAD_VAR, 0, 0, 0.0f, false, "error"));
    bc.push_back(I(Opcode::PUSH_STRING, 0, 0, 0.0f, false, "DivisionByZero"));
    bc.push_back(I(Opcode::EQUAL));
    bc.push_back(I(Opcode::JUMP_IF_FALSE, 0, 5));
    bc.push_back(I(Opcode::BEGIN_SCOPE));
    bc.push_back(I(Opcode::PUSH_STRING, 0, 0, 0.0f, false, "\"Cannot divide by zero\""));
    bc.push_back(I(Opcode::PRINT));
    bc.push_back(I(Opcode::END_SCOPE));
    bc.push_back(I(Opcode::JUMP, 0, 18));
    bc.push_back(I(Opcode::LOAD_VAR, 0, 0, 0.0f, false, "error"));
    bc.push_back(I(Opcode::PUSH_STRING, 0, 0, 0.0f, false, "ParseError"));
    bc.push_back(I(Opcode::EQUAL));
    bc.push_back(I(Opcode::JUMP_IF_FALSE, 0, 5));
    bc.push_back(I(Opcode::BEGIN_SCOPE));
    bc.push_back(I(Opcode::PUSH_STRING, 0, 0, 0.0f, false, "\"Failed to parse input\""));
    bc.push_back(I(Opcode::PRINT));
    bc.push_back(I(Opcode::END_SCOPE));
    bc.push_back(I(Opcode::JUMP, 0, 9));
    bc.push_back(I(Opcode::LOAD_VAR, 0, 0, 0.0f, false, "error"));
    bc.push_back(I(Opcode::PUSH_STRING, 0, 0, 0.0f, false, "IOError"));
    bc.push_back(I(Opcode::EQUAL));
    bc.push_back(I(Opcode::JUMP_IF_FALSE, 0, 5));
    bc.push_back(I(Opcode::BEGIN_SCOPE));
    bc.push_back(I(Opcode::PUSH_STRING, 0, 0, 0.0f, false, "\"IO error occurred\""));
    bc.push_back(I(Opcode::PRINT));
    bc.push_back(I(Opcode::END_SCOPE));
    bc.push_back(I(Opcode::JUMP, 0, 0));
    bc.push_back(I(Opcode::PUSH_INT, 0, 1));
    bc.push_back(I(Opcode::NEGATE));
    bc.push_back(I(Opcode::RETURN));
    bc.push_back(I(Opcode::END_SCOPE));
    bc.push_back(I(Opcode::STORE_VAR, 0, 0, 0.0f, false, "result"));
    bc.push_back(I(Opcode::PUSH_STRING, 0, 0, 0.0f, false, "\"Processed result:\""));
    bc.push_back(I(Opcode::LOAD_VAR, 0, 0, 0.0f, false, "result"));
    bc.push_back(I(Opcode::PRINT));
    bc.push_back(I(Opcode::END_SCOPE));
    bc.push_back(I(Opcode::PUSH_NULL));
    bc.push_back(I(Opcode::RETURN));
    bc.push_back(I(Opcode::END_FUNCTION));
    bc.push_back(I(Opcode::BEGIN_FUNCTION));
    bc.push_back(I(Opcode::BEGIN_SCOPE));
    bc.push_back(I(Opcode::PUSH_INT, 0, 10));
    bc.push_back(I(Opcode::PUSH_INT, 0, 2));
    bc.push_back(I(Opcode::CALL, 0, 2));
    bc.push_back(I(Opcode::STORE_VAR, 0, 0, 0.0f, false, "maybe_num"));
    bc.push_back(I(Opcode::PUSH_INT, 0, 10));
    bc.push_back(I(Opcode::PUSH_INT, 0, 2));
    bc.push_back(I(Opcode::CALL, 0, 2));
    bc.push_back(I(Opcode::STORE_VAR, 0, 0, 0.0f, false, "inferred"));
    bc.push_back(I(Opcode::PUSH_INT, 0, 10));
    bc.push_back(I(Opcode::PUSH_INT, 0, 2));
    bc.push_back(I(Opcode::CALL, 0, 2));
    bc.push_back(I(Opcode::STORE_VAR, 0, 0, 0.0f, false, "wrong_type"));
    bc.push_back(I(Opcode::PUSH_INT, 0, 10));
    bc.push_back(I(Opcode::PUSH_INT, 0, 2));
    bc.push_back(I(Opcode::CALL, 0, 2));
    bc.push_back(I(Opcode::STORE_VAR, 0, 0, 0.0f, false, "with_errors"));
    bc.push_back(I(Opcode::END_SCOPE));
    bc.push_back(I(Opcode::PUSH_NULL));
    bc.push_back(I(Opcode::RETURN));
    bc.push_back(I(Opcode::END_FUNCTION));
    bc.push_back(I(Opcode::CALL, 0, 0));
    bc.push_back(I(Opcode::POP));
    bc.push_back(I(Opcode::CALL, 0, 0));
    bc.push_back(I(Opcode::POP));
    bc.push_back(I(Opcode::CALL, 0, 0));
    bc.push_back(I(Opcode::POP));
    bc.push_back(I(Opcode::CALL, 0, 0));
    bc.push_back(I(Opcode::POP));
    bc.push_back(I(Opcode::CALL, 0, 0));
    bc.push_back(I(Opcode::POP));
    bc.push_back(I(Opcode::CALL, 0, 0));
    bc.push_back(I(Opcode::POP));
    bc.push_back(I(Opcode::CALL, 0, 0));
    bc.push_back(I(Opcode::POP));
    bc.push_back(I(Opcode::HALT));
    bc.push_back(I(Opcode::HALT, 0));
    lembed::registerEmbed("test_error_embed", bc);
}

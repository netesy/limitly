AST for C:\Projects\limitly\tests\integration\error_handling_vm.lm
Parser: New CSTParser (cst_parser.cpp)
Mode: CST with AST compatibility
Note: CST nodes were created internally with trivia preservation
      AST output shown below for compatibility testing
========================================

AST Dump:
==========
PrintStatement:
  Literal: "=== Test 1: Basic Error Construction ==="
VarDeclaration: x
  Type: int
  Initializer:
    Literal: 10
VarDeclaration: y
  Type: int
  Initializer:
    Literal: 0
IfStatement:
  Condition:
    BinaryExpression: ==
      Left:
        Variable: y
      Operator: ==
      Right:
        Literal: 0
  Then:
    BlockStatement:
      PrintStatement:
        Literal: "Division by zero detected"
  Else:
    BlockStatement:
      VarDeclaration: result
        Type: int
        Initializer:
          BinaryExpression: /
            Left:
              Variable: x
            Operator: /
            Right:
              Variable: y
      PrintStatement:
        BinaryExpression: +
          Left:
            Literal: "Result: "
          Operator: +
          Right:
            Variable: result
PrintStatement:
  Literal: "=== Test 2: Success Value Construction ==="
VarDeclaration: success_value
  Type: int
  Initializer:
    Literal: 42
PrintStatement:
  BinaryExpression: +
    Left:
      Literal: "Success value: "
    Operator: +
    Right:
      Variable: success_value
PrintStatement:
  Literal: "=== Test 3: Error Propagation Simulation ==="
FunctionDeclaration: divide
  Parameters:
    a: int
    b: int
  ReturnType: int
  Body:
    BlockStatement:
      IfStatement:
        Condition:
          BinaryExpression: ==
            Left:
              Variable: b
            Operator: ==
            Right:
              Literal: 0
        Then:
          BlockStatement:
            PrintStatement:
              Literal: "Error: Division by zero in divide function"
            ReturnStatement:
              Value:
                UnaryExpression: -
                  Operand:
                    Literal: 1
      ReturnStatement:
        Value:
          BinaryExpression: /
            Left:
              Variable: a
            Operator: /
            Right:
              Variable: b
VarDeclaration: result1
  Type: int
  Initializer:
    CallExpression:
      Callee:
        Variable: divide
      Arguments:
        Literal: 10
        Literal: 2
PrintStatement:
  BinaryExpression: +
    Left:
      Literal: "10 / 2 = "
    Operator: +
    Right:
      Variable: result1
VarDeclaration: result2
  Type: int
  Initializer:
    CallExpression:
      Callee:
        Variable: divide
      Arguments:
        Literal: 10
        Literal: 0
PrintStatement:
  BinaryExpression: +
    Left:
      Literal: "10 / 0 = "
    Operator: +
    Right:
      Variable: result2
PrintStatement:
  Literal: "=== Test 4: Nested Error Propagation ==="
FunctionDeclaration: safe_divide
  Parameters:
    a: int
    b: int
  ReturnType: int
  Body:
    BlockStatement:
      ReturnStatement:
        Value:
          CallExpression:
            Callee:
              Variable: divide
            Arguments:
              Variable: a
              Variable: b
VarDeclaration: result3
  Type: int
  Initializer:
    CallExpression:
      Callee:
        Variable: safe_divide
      Arguments:
        Literal: 20
        Literal: 4
PrintStatement:
  BinaryExpression: +
    Left:
      Literal: "20 / 4 = "
    Operator: +
    Right:
      Variable: result3
VarDeclaration: result4
  Type: int
  Initializer:
    CallExpression:
      Callee:
        Variable: safe_divide
      Arguments:
        Literal: 20
        Literal: 0
PrintStatement:
  BinaryExpression: +
    Left:
      Literal: "20 / 0 = "
    Operator: +
    Right:
      Variable: result4
PrintStatement:
  Literal: "=== Test 5: Error Handling Simulation ==="
FunctionDeclaration: handle_division
  Parameters:
    a: int
    b: int
  Body:
    BlockStatement:
      IfStatement:
        Condition:
          BinaryExpression: ==
            Left:
              Variable: b
            Operator: ==
            Right:
              Literal: 0
        Then:
          BlockStatement:
            PrintStatement:
              BinaryExpression: +
                Left:
                  BinaryExpression: +
                    Left:
                      Literal: "Handled error: Cannot divide "
                    Operator: +
                    Right:
                      Variable: a
                Operator: +
                Right:
                  Literal: " by zero"
        Else:
          BlockStatement:
            VarDeclaration: result
              Type: int
              Initializer:
                BinaryExpression: /
                  Left:
                    Variable: a
                  Operator: /
                  Right:
                    Variable: b
            PrintStatement:
              BinaryExpression: +
                Left:
                  Literal: "Division result: "
                Operator: +
                Right:
                  Variable: result
ExpressionStatement:
  CallExpression:
    Callee:
      Variable: handle_division
    Arguments:
      Literal: 15
      Literal: 3
ExpressionStatement:
  CallExpression:
    Callee:
      Variable: handle_division
    Arguments:
      Literal: 15
      Literal: 0
PrintStatement:
  Literal: "=== Error Handling VM Tests Compvare ==="

AST for C:\Projects\limitly\tests\integration\error_infrastructure_test.lm
Parser: New CSTParser (cst_parser.cpp)
Mode: CST with AST compatibility
Note: CST nodes were created internally with trivia preservation
      AST output shown below for compatibility testing
========================================

AST Dump:
==========
PrintStatement:
  Literal: "=== Error Infrastructure Test ==="
VarDeclaration: a
  Initializer:
    Literal: 10
VarDeclaration: b
  Initializer:
    Literal: 2
VarDeclaration: result1
  Initializer:
    BinaryExpression: /
      Left:
        Variable: a
      Operator: /
      Right:
        Variable: b
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      Variable: result1
    String: "\"10 / 2 = {result1}"
VarDeclaration: c
  Initializer:
    Literal: 10
VarDeclaration: d
  Initializer:
    Literal: 1
VarDeclaration: result2
  Initializer:
    BinaryExpression: /
      Left:
        Variable: c
      Operator: /
      Right:
        Variable: d
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      Variable: result2
    String: "\"10 / 1 = {result2}"
VarDeclaration: arr
  Initializer:
    ListExpression: [5 elements]
      Literal: 1
      Literal: 2
      Literal: 3
      Literal: 4
      Literal: 5
VarDeclaration: item1
  Initializer:
    IndexExpression:
      Object:
        Variable: arr
      Index:
        Literal: 2
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      Variable: item1
    String: "\"arr[2] = {item1}"
FunctionDeclaration: divide_safe
  Parameters:
    x
    y
  Body:
    BlockStatement:
      ReturnStatement:
        Value:
          BinaryExpression: /
            Left:
              Variable: x
            Operator: /
            Right:
              Variable: y
VarDeclaration: safe_result
  Initializer:
    CallExpression:
      Callee:
        Variable: divide_safe
      Arguments:
        Literal: 20
        Literal: 4
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      Variable: safe_result
    String: "\"Safe division: 20 / 4 = {safe_result}"
VarDeclaration: myList
  Initializer:
    ListExpression: [3 elements]
      Literal: 10
      Literal: 20
      Literal: 30
VarDeclaration: first
  Initializer:
    IndexExpression:
      Object:
        Variable: myList
      Index:
        Literal: 0
VarDeclaration: last
  Initializer:
    IndexExpression:
      Object:
        Variable: myList
      Index:
        Literal: 2
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      Variable: first
    String: "\"First element: {first}"
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      Variable: last
    String: "\"Last element: {last}"
PrintStatement:
  Literal: "=== Error Infrastructure Ready ==="
PrintStatement:
  Literal: "VM error handling opcodes implemented:"
PrintStatement:
  Literal: "- CHECK_ERROR: Check if value is error"
PrintStatement:
  Literal: "- PROPAGATE_ERROR: Propagate error up call stack"
PrintStatement:
  Literal: "- CONSTRUCT_ERROR: Create error values"
PrintStatement:
  Literal: "- CONSTRUCT_OK: Create success values"
PrintStatement:
  Literal: "- IS_ERROR: Check if union contains error"
PrintStatement:
  Literal: "- IS_SUCCESS: Check if union contains success"
PrintStatement:
  Literal: "- UNWRAP_VALUE: Extract value from success union"
PrintStatement:
  Literal: "=== Test Complete ==="

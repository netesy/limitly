AST for C:\Projects\limitly\tests\integration\error_value_test.lm
Parser: New CSTParser (cst_parser.cpp)
Mode: CST with AST compatibility
Note: CST nodes were created internally with trivia preservation
      AST output shown below for compatibility testing
========================================

AST Dump:
==========
PrintStatement:
  Literal: "=== Error Value Construction Test ==="
VarDeclaration: x
  Initializer:
    Literal: 42
VarDeclaration: y
  Initializer:
    Literal: "test"
VarDeclaration: z
  Initializer:
    Literal: true
PrintStatement:
  Literal: "Basic values:"
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      Variable: x
    String: "\"x = {x}"
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      Variable: y
    String: "\"y = {y}"
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      Variable: z
    String: "\"z = {z}"
VarDeclaration: list1
  Initializer:
    ListExpression: [3 elements]
      Literal: 1
      Literal: 2
      Literal: 3
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      Variable: list1
    String: "\"List: {list1}"
VarDeclaration: dict1
  Initializer:
    DictionaryExpression: {2 entries}
      Key:
        Literal: "key"
      Value:
        Literal: "value"
      Key:
        Literal: "num"
      Value:
        Literal: 123
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      Variable: dict1
    String: "\"Dict: {dict1}"
FunctionDeclaration: testFunc
  Parameters:
    a
    b
  Body:
    BlockStatement:
      ReturnStatement:
        Value:
          BinaryExpression: +
            Left:
              Variable: a
            Operator: +
            Right:
              Variable: b
VarDeclaration: sum
  Initializer:
    CallExpression:
      Callee:
        Variable: testFunc
      Arguments:
        Literal: 5
        Literal: 7
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      Variable: sum
    String: "\"Function result: {sum}"
PrintStatement:
  Literal: "=== Error Value Infrastructure Ready ==="
PrintStatement:
  Literal: "VM error handling opcodes are implemented and ready for compiler integration"
PrintStatement:
  Literal: "=== Test Complete ==="

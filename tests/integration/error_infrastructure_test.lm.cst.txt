CST for C:\Projects\limitly\tests\integration\error_infrastructure_test.lm
Parser: New CSTParser from cst_parser.cpp
Mode: CST (cstMode=true)
========================================

CST Statistics:
- CST nodes created: 48
- Trivia attachments: 86
- Parse errors: 0

=== Full CST Structure ===
+ Node: PROGRAM [118-985] (Program root node)
├─ + Node: VAR_DECLARATION [118-211] (var declaration)
│ ├─ + Node: WHITESPACE_NODE | Token: 
 [118-119]
│ ├─ + Node: WHITESPACE_NODE | Token: 
 [119-120]
│ ├─ + Node: COMMENT_NODE | Token: // Test basic arithmetic operations that will eventually support error handling [120-199]
│ ├─ + Node: WHITESPACE_NODE | Token: 
 [199-200]
│ ├─ Token: var [200-203]
│ ├─ + Node: WHITESPACE_NODE | Token:   [203-204]
│ ├─ + Node: IDENTIFIER [204-205]
│ │ └─ Token: a [204-205]
│ ├─ + Node: ASSIGNMENT_EXPR [206-210]
│ │ ├─ Token: = [206-207]
│ │ └─ + Node: LITERAL_EXPR [208-210]
│ │   └─ Token: 10 [208-210]
│ └─ Token: ; [210-211]
├─ + Node: VAR_DECLARATION [211-222] (var declaration)
│ ├─ + Node: WHITESPACE_NODE | Token: 
 [211-212]
│ ├─ Token: var [212-215]
│ ├─ + Node: WHITESPACE_NODE | Token:   [215-216]
│ ├─ + Node: IDENTIFIER [216-217]
│ │ └─ Token: b [216-217]
│ ├─ + Node: ASSIGNMENT_EXPR [218-221]
│ │ ├─ Token: = [218-219]
│ │ └─ + Node: LITERAL_EXPR [220-221]
│ │   └─ Token: 2 [220-221]
│ └─ Token: ; [221-222]
├─ + Node: VAR_DECLARATION [222-243] (var declaration)
│ ├─ + Node: WHITESPACE_NODE | Token: 
 [222-223]
│ ├─ Token: var [223-226]
│ ├─ + Node: WHITESPACE_NODE | Token:   [226-227]
│ ├─ + Node: IDENTIFIER [227-234]
│ │ └─ Token: result1 [227-234]
│ ├─ + Node: ASSIGNMENT_EXPR [235-242]
│ │ ├─ Token: = [235-236]
│ │ └─ + Node: LITERAL_EXPR [241-242]
│ │   └─ Token: b [241-242]
│ └─ Token: ; [242-243]
├─ + Node: VAR_DECLARATION [272-384] (var declaration)
│ ├─ + Node: WHITESPACE_NODE | Token: 
 [272-273]
│ ├─ + Node: WHITESPACE_NODE | Token: 
 [273-274]
│ ├─ + Node: COMMENT_NODE | Token: // Test with edge case (currently works, will generate error when built-in errors are implemented) [274-372]
│ ├─ + Node: WHITESPACE_NODE | Token: 
 [372-373]
│ ├─ Token: var [373-376]
│ ├─ + Node: WHITESPACE_NODE | Token:   [376-377]
│ ├─ + Node: IDENTIFIER [377-378]
│ │ └─ Token: c [377-378]
│ ├─ + Node: ASSIGNMENT_EXPR [379-383]
│ │ ├─ Token: = [379-380]
│ │ └─ + Node: LITERAL_EXPR [381-383]
│ │   └─ Token: 10 [381-383]
│ └─ Token: ; [383-384]
├─ + Node: VAR_DECLARATION [384-395] (var declaration)
│ ├─ + Node: WHITESPACE_NODE | Token: 
 [384-385]
│ ├─ Token: var [385-388]
│ ├─ + Node: WHITESPACE_NODE | Token:   [388-389]
│ ├─ + Node: IDENTIFIER [389-390]
│ │ └─ Token: d [389-390]
│ ├─ + Node: ASSIGNMENT_EXPR [391-394]
│ │ ├─ Token: = [391-392]
│ │ └─ + Node: LITERAL_EXPR [393-394]
│ │   └─ Token: 1 [393-394]
│ └─ Token: ; [394-395]
├─ + Node: VAR_DECLARATION [395-416] (var declaration)
│ ├─ + Node: WHITESPACE_NODE | Token: 
 [395-396]
│ ├─ Token: var [396-399]
│ ├─ + Node: WHITESPACE_NODE | Token:   [399-400]
│ ├─ + Node: IDENTIFIER [400-407]
│ │ └─ Token: result2 [400-407]
│ ├─ + Node: ASSIGNMENT_EXPR [408-415]
│ │ ├─ Token: = [408-409]
│ │ └─ + Node: LITERAL_EXPR [414-415]
│ │   └─ Token: d [414-415]
│ └─ Token: ; [415-416]
├─ + Node: VAR_DECLARATION [445-569] (var declaration)
│ ├─ + Node: WHITESPACE_NODE | Token: 
 [445-446]
│ ├─ + Node: WHITESPACE_NODE | Token: 
 [446-447]
│ ├─ + Node: COMMENT_NODE | Token: // Test array access (currently works, will generate error when bounds checking is implemented) [447-542]
│ ├─ + Node: WHITESPACE_NODE | Token: 
 [542-543]
│ ├─ Token: var [543-546]
│ ├─ + Node: WHITESPACE_NODE | Token:   [546-547]
│ ├─ + Node: IDENTIFIER [547-550]
│ │ └─ Token: arr [547-550]
│ ├─ + Node: ASSIGNMENT_EXPR [551-568]
│ │ ├─ Token: = [551-552]
│ │ └─ + Node: LITERAL_EXPR [567-568]
│ │   └─ Token: ] [567-568]
│ └─ Token: ; [568-569]
├─ + Node: VAR_DECLARATION [569-589] (var declaration)
│ ├─ + Node: WHITESPACE_NODE | Token: 
 [569-570]
│ ├─ Token: var [570-573]
│ ├─ + Node: WHITESPACE_NODE | Token:   [573-574]
│ ├─ + Node: IDENTIFIER [574-579]
│ │ └─ Token: item1 [574-579]
│ ├─ + Node: ASSIGNMENT_EXPR [580-588]
│ │ ├─ Token: = [580-581]
│ │ └─ + Node: LITERAL_EXPR [587-588]
│ │   └─ Token: ] [587-588]
│ └─ Token: ; [588-589]
├─ + Node: VAR_DECLARATION [801-840] (var declaration)
│ ├─ + Node: WHITESPACE_NODE | Token: 
 [801-802]
│ ├─ + Node: WHITESPACE_NODE | Token: 
 [802-803]
│ ├─ Token: var [803-806]
│ ├─ + Node: WHITESPACE_NODE | Token:   [806-807]
│ ├─ + Node: IDENTIFIER [807-818]
│ │ └─ Token: safe_result [807-818]
│ ├─ + Node: ASSIGNMENT_EXPR [819-839]
│ │ ├─ Token: = [819-820]
│ │ └─ + Node: LITERAL_EXPR [838-839]
│ │   └─ Token: ) [838-839]
│ └─ Token: ; [839-840]
├─ + Node: VAR_DECLARATION [888-940] (var declaration)
│ ├─ + Node: WHITESPACE_NODE | Token: 
 [888-889]
│ ├─ + Node: WHITESPACE_NODE | Token: 
 [889-890]
│ ├─ + Node: COMMENT_NODE | Token: // Test list operations [890-913]
│ ├─ + Node: WHITESPACE_NODE | Token: 
 [913-914]
│ ├─ Token: var [914-917]
│ ├─ + Node: WHITESPACE_NODE | Token:   [917-918]
│ ├─ + Node: IDENTIFIER [918-924]
│ │ └─ Token: myList [918-924]
│ ├─ + Node: ASSIGNMENT_EXPR [925-939]
│ │ ├─ Token: = [925-926]
│ │ └─ + Node: LITERAL_EXPR [938-939]
│ │   └─ Token: ] [938-939]
│ └─ Token: ; [939-940]
├─ + Node: VAR_DECLARATION [940-963] (var declaration)
│ ├─ + Node: WHITESPACE_NODE | Token: 
 [940-941]
│ ├─ Token: var [941-944]
│ ├─ + Node: WHITESPACE_NODE | Token:   [944-945]
│ ├─ + Node: IDENTIFIER [945-950]
│ │ └─ Token: first [945-950]
│ ├─ + Node: ASSIGNMENT_EXPR [951-962]
│ │ ├─ Token: = [951-952]
│ │ └─ + Node: LITERAL_EXPR [961-962]
│ │   └─ Token: ] [961-962]
│ └─ Token: ; [962-963]
└─ + Node: VAR_DECLARATION [963-985] (var declaration)
  ├─ + Node: WHITESPACE_NODE | Token: 
 [963-964]
  ├─ Token: var [964-967]
  ├─ + Node: WHITESPACE_NODE | Token:   [967-968]
  ├─ + Node: IDENTIFIER [968-972]
  │ └─ Token: last [968-972]
  ├─ + Node: ASSIGNMENT_EXPR [973-984]
  │ ├─ Token: = [973-974]
  │ └─ + Node: LITERAL_EXPR [983-984]
  │   └─ Token: ] [983-984]
  └─ Token: ; [984-985]


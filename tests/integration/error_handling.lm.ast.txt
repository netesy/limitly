AST for tests/integration/error_handling.lm
========================================

AST Dump:
==========
FunctionDeclaration: divide
  Parameters:
    a: int
    b: int
  ReturnType: int
  Body:
    BlockStatement:
      IfStatement:
        Condition:
          BinaryExpression: ==
            Left:
              Variable: b
            Operator: ==
            Right:
              Literal: 0
        Then:
          BlockStatement:
            ReturnStatement:
              Value:
                ErrorConstruct: DivisionByZero
                  Arguments:
                    Literal: "Cannot divide by zero"
      ReturnStatement:
        Value:
          OkConstruct:
            Value:
              BinaryExpression: /
                Left:
                  Variable: a
                Operator: /
                Right:
                  Variable: b
FunctionDeclaration: safeDivision
  Parameters:
    x: int
    y: int
  ReturnType: int
  Body:
    BlockStatement:
      VarDeclaration: result
        Initializer:
          FallibleExpression:
            Expression:
              CallExpression:
                Callee:
                  Variable: divide
                Arguments:
                  Variable: x
                  Variable: y
      ReturnStatement:
        Value:
          OkConstruct:
            Value:
              BinaryExpression: *
                Left:
                  Variable: result
                Operator: *
                Right:
                  Literal: 2
FunctionDeclaration: divisionWithFallback
  Parameters:
    a: int
    b: int
  ReturnType: int
  Body:
    BlockStatement:
      VarDeclaration: result
        Initializer:
          FallibleExpression:
            Expression:
              CallExpression:
                Callee:
                  Variable: divide
                Arguments:
                  Variable: a
                  Variable: b
            ElseHandler:
              ErrorVariable: error
              BlockStatement:
                PrintStatement:
                  BinaryExpression: +
                    Left:
                      Literal: "Division failed: "
                    Operator: +
                    Right:
                      Variable: error
                PrintStatement:
                  BinaryExpression: +
                    Left:
                      Literal: "Division failed message: "
                    Operator: +
                    Right:
                      MemberExpression: .message
                        Object:
                          Variable: error
                ReturnStatement:
                  Value:
                    Literal: 0
      ReturnStatement:
        Value:
          Variable: result
FunctionDeclaration: parseAndDivide
  Parameters:
    numStr: str
    divisor: int
  ReturnType: int
  Body:
    BlockStatement:
      VarDeclaration: num
        Initializer:
          FallibleExpression:
            Expression:
              CallExpression:
                Callee:
                  Variable: parseInt
                Arguments:
                  Variable: numStr
      VarDeclaration: result
        Initializer:
          FallibleExpression:
            Expression:
              CallExpression:
                Callee:
                  Variable: divide
                Arguments:
                  Variable: num
                  Variable: divisor
      ReturnStatement:
        Value:
          OkConstruct:
            Value:
              Variable: result
PrintStatement:
  Literal: "Testing error handling AST nodes"
VarDeclaration: success
  Initializer:
    FallibleExpression:
      Expression:
        CallExpression:
          Callee:
            Variable: divide
          Arguments:
            Literal: 10
            Literal: 2
PrintStatement:
  BinaryExpression: +
    Left:
      Literal: "10 / 2 = "
    Operator: +
    Right:
      Variable: success
VarDeclaration: withFallback
  Initializer:
    CallExpression:
      Callee:
        Variable: divisionWithFallback
      Arguments:
        Literal: 10
        Literal: 0
PrintStatement:
  BinaryExpression: +
    Left:
      Literal: "Division with fallback result: "
    Operator: +
    Right:
      Variable: withFallback

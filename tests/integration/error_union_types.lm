# Error Union Types Integration Tests
# These tests will work once the error handling system is fully integrated

print("=== Error Union Types Integration Tests ===")

# Test 1: Function that can return error or success
print("=== Test 1: Fallible Function Declaration ===")

# This syntax will be supported once the parser is updated:
# func safe_divide(a: int, b: int) -> int?DivisionByZero {
#     if b == 0 {
#         return err(DivisionByZero("Cannot divide by zero"))
#     }
#     return ok(a / b)
# }

# For now, simulate with regular function
func safe_divide_sim(a: int, b: int) -> int {
    if b == 0 {
        print("Error: DivisionByZero - Cannot divide by zero")
        return -1  # Error indicator
    }
    return a / b
}

# Test 2: Error propagation with ? operator
print("=== Test 2: Error Propagation Simulation ===")

# This syntax will be supported:
# func calculate(a: int, b: int, c: int) -> int?DivisionByZero {
#     let result1: int = safe_divide(a, b)?  # Propagate error if any
#     let result2: int = safe_divide(result1, c)?  # Propagate error if any
#     return ok(result2)
# }

# Simulation:
func calculate_sim(a: int, b: int, c: int) -> int {
    let result1: int = safe_divide_sim(a, b)
    if result1 == -1 {
        return -1  # Propagate error
    }
    
    let result2: int = safe_divide_sim(result1, c)
    if result2 == -1 {
        return -1  # Propagate error
    }
    
    return result2
}

# Test 3: Pattern matching on error unions
print("=== Test 3: Pattern Matching Simulation ===")

# This syntax will be supported:
# match safe_divide(10, 0) {
#     val result -> print("Success: " + result)
#     err DivisionByZero(msg) -> print("Error: " + msg)
# }

# Simulation:
func handle_result(a: int, b: int) {
    let result: int = safe_divide_sim(a, b)
    if result == -1 {
        print("Error case: Division by zero")
    } else {
        print("Success case: " + result)
    }
}

# Test cases
print("--- Running test cases ---")

handle_result(10, 2)   # Should succeed
handle_result(10, 0)   # Should error

let calc_result1: int = calculate_sim(20, 4, 2)  # 20/4/2 = 2.5 -> 2
print("Calculate result 1: " + calc_result1)

let calc_result2: int = calculate_sim(20, 0, 2)  # Should error on first division
print("Calculate result 2: " + calc_result2)

let calc_result3: int = calculate_sim(20, 4, 0)  # Should error on second division  
print("Calculate result 3: " + calc_result3)

print("=== Error Union Types Tests Complete ===")
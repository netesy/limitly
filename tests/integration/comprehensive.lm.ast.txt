AST for C:\Projects\limitly\tests\integration\comprehensive.lm
Parser: New CSTParser (cst_parser.cpp)
Mode: CST with AST compatibility
Note: CST nodes were created internally with trivia preservation
      AST output shown below for compatibility testing
========================================

AST Dump:
==========
PrintStatement:
  Literal: "=== Comprehensive Integration Test ==="
PrintStatement:
  Literal: "Multi-feature test:"
VarDeclaration: name
  Initializer:
    Literal: "Luminar"
VarDeclaration: version
  Initializer:
    Literal: 1
VarDeclaration: isStable
  Initializer:
    Literal: true
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      Variable: name
    Expression:
      Variable: version
    String: "\"Language: {name} v{version}"
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      Variable: isStable
    String: "\"Stable: {isStable}"
PrintStatement:
  Literal: "Feature matrix:"
ForStatement (traditional):
  Initializer:
    VarDeclaration: feature
      Initializer:
        Literal: 1
  Condition:
    BinaryExpression: <=
      Left:
        Variable: feature
      Operator: <=
      Right:
        Literal: 3
  Increment:
    Assignment: +=
      Target: feature
      Value:
      Literal: 1
  Body:
    BlockStatement:
      PrintStatement:
        InterpolatedString:
          String: ""
          Expression:
            Variable: feature
          String: ":"
      IfStatement:
        Condition:
          BinaryExpression: ==
            Left:
              Variable: feature
            Operator: ==
            Right:
              Literal: 1
        Then:
          BlockStatement:
            PrintStatement:
              Literal: "  - Variables and expressions"
            VarDeclaration: x
              Initializer:
                Literal: 10
            VarDeclaration: y
              Initializer:
                Literal: 5
            PrintStatement:
              InterpolatedString:
                String: ""
                Expression:
                  Variable: x
                Expression:
                  Variable: y
                Expression:
                  BinaryExpression: +
                    Left:
                      Variable: x
                    Operator: +
                    Right:
                      Variable: y
                String: "\"  - Example: {x} + {y} = {x + y}"
        Else:
          IfStatement:
            Condition:
              BinaryExpression: ==
                Left:
                  Variable: feature
                Operator: ==
                Right:
                  Literal: 2
            Then:
              BlockStatement:
                PrintStatement:
                  Literal: "  - Control flow and loops"
                IterStatement:
                  Variables: i
                  Iterable:
                    RangeExpression:
                      Start:
                        Literal: 1
                      End:
                        Literal: 4
                      Inclusive: true
                  Body:
                    BlockStatement:
                      PrintStatement:
                        InterpolatedString:
                          String: ""
                          Expression:
                            Variable: i
                          String: "\"  - Loop iteration {i}"
            Else:
              BlockStatement:
                PrintStatement:
                  Literal: "  - String interpolation"
                VarDeclaration: msg
                  Initializer:
                    InterpolatedString:
                      String: ""
                      Expression:
                        Variable: name
                      String: "!"
                PrintStatement:
                  InterpolatedString:
                    String: ""
                    Expression:
                      Variable: msg
                    String: "\"  - Message: {msg}"
PrintStatement:
  Literal: "Complex expression test:"
VarDeclaration: a
  Initializer:
    Literal: 5
VarDeclaration: b
  Initializer:
    Literal: 3
VarDeclaration: c
  Initializer:
    Literal: 2
VarDeclaration: result
  Initializer:
    BinaryExpression: -
      Left:
        BinaryExpression: *
          Left:
            Grouping:
              BinaryExpression: +
                Left:
                  Variable: a
                Operator: +
                Right:
                  Variable: b
          Operator: *
          Right:
            Variable: c
      Operator: -
      Right:
        Grouping:
          BinaryExpression: -
            Left:
              Variable: a
            Operator: -
            Right:
              Variable: b
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      Variable: a
    Expression:
      Variable: b
    Expression:
      Variable: c
    Expression:
      Variable: a
    Expression:
      Variable: b
    Expression:
      Variable: result
    String: "\"({a} + {b}) * {c} - ({a} - {b}) = {result}"
VarDeclaration: condition
  Initializer:
    BinaryExpression: <unknown>
      Left:
        BinaryExpression: and
          Left:
            Grouping:
              BinaryExpression: >
                Left:
                  Variable: a
                Operator: >
                Right:
                  Variable: b
          Operator: and
          Right:
            Grouping:
              BinaryExpression: >
                Left:
                  Variable: b
                Operator: >
                Right:
                  Variable: c
      Operator: <unknown>
      Right:
        Grouping:
          BinaryExpression: ==
            Left:
              Variable: a
            Operator: ==
            Right:
              Literal: 5
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      Variable: condition
    String: "\"Complex condition: {condition}"
PrintStatement:
  Literal: "String processing:"
VarDeclaration: words
  Initializer:
    ListExpression: [4 elements]
      Literal: "Hello"
      Literal: "World"
      Literal: "from"
      Literal: "Limit"
ForStatement (traditional):
  Initializer:
    VarDeclaration: i
      Initializer:
        Literal: 0
  Condition:
    BinaryExpression: <
      Left:
        Variable: i
      Operator: <
      Right:
        Literal: 4
  Increment:
    Assignment: +=
      Target: i
      Value:
      Literal: 1
  Body:
    BlockStatement:
      VarDeclaration: word
        Initializer:
          IndexExpression:
            Object:
              Variable: words
            Index:
              Variable: i
      PrintStatement:
        InterpolatedString:
          String: ""
          Expression:
            BinaryExpression: +
              Left:
                Variable: i
              Operator: +
              Right:
                Literal: 1
          Expression:
            Variable: word
          String: "\"Word {i + 1}: {word}"
PrintStatement:
  Literal: "Integration test complete!"

// Test file for error handling AST nodes
// This file demonstrates the syntax that should be parseable with the new AST nodes

// Function that can return errors
func divide(a: int, b: int): int?DivisionByZero {
    if (b == 0) {
        return err(DivisionByZero("Cannot divide by zero"));
    }
    return ok(a / b);
}

// Function using fallible expressions with ? operator
func safeDivision(x: int, y: int): int?DivisionByZero {
    var result = divide(x, y)?;
    return ok(result * 2);
}

// Function with error handling using else clause
func divisionWithFallback(a: int, b: int): int {
    var result = divide(a, b)? else error {
        print("Division failed: " + error.message);
        return 0;
    };
    return result;
}

// Function demonstrating multiple error types
func parseAndDivide(numStr: str, divisor: int): int?ParseError, DivisionByZero {
    var num = parseInt(numStr)?;  // Could return ParseError
    var result = divide(num, divisor)?;  // Could return DivisionByZero
    return ok(result);
}

// Test the error handling
print("Testing error handling AST nodes");

// This should work
var success = divide(10, 2)?;
print("10 / 2 = " + success);

// This should trigger error handling
var withFallback = divisionWithFallback(10, 0);
print("Division with fallback result: " + withFallback);
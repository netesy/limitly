AST for tests\strings\operations.lm
Parser mode: CST
========================================

AST Dump:
==========
PrintStatement:
PrintStatement:
VarDeclaration: <missing>
VarDeclaration: <missing>
VarDeclaration: <missing>
PrintStatement:
PrintStatement:
ExpressionStatement:
  Variable: str1
ExpressionStatement:
  Variable: str2
ExpressionStatement:
  BinaryExpression: ==
    Left:
      Variable: str1
    Operator: ==
    Right:
      Variable: str2
ExpressionStatement:
  Literal: "\"{str1} == {str2}: {str1 == str2}"
PrintStatement:
ExpressionStatement:
  Variable: str1
ExpressionStatement:
  Variable: str2
ExpressionStatement:
  BinaryExpression: !=
    Left:
      Variable: str1
    Operator: !=
    Right:
      Variable: str2
ExpressionStatement:
  Literal: "\"{str1} != {str2}: {str1 != str2}"
VarDeclaration: <missing>
VarDeclaration: <missing>
PrintStatement:
ExpressionStatement:
  Variable: numStr
ExpressionStatement:
  Variable: num
ExpressionStatement:
  BinaryExpression: ==
    Left:
      Variable: numStr
    Operator: ==
    Right:
      Variable: num
ExpressionStatement:
  Literal: "\"String vs number: {numStr} == {num}: {numStr == num}"
VarDeclaration: <missing>
PrintStatement:
ExpressionStatement:
  Variable: empty
ExpressionStatement:
  Literal: "'"
VarDeclaration: <missing>
PrintStatement:
ExpressionStatement:
  BinaryExpression: ==
    Left:
      Variable: empty
    Operator: ==
    Right:
      Variable: emptyStr
ExpressionStatement:
  Literal: "\"Empty length check: {empty == emptyStr}"
VarDeclaration: <missing>
PrintStatement:
ExpressionStatement:
  Variable: special
ExpressionStatement:
  Literal: "\"Special chars: {special}"
VarDeclaration: <missing>
PrintStatement:
ExpressionStatement:
  Variable: quoted
ExpressionStatement:
  Literal: "\"Quoted: {quoted}"

AST for tests\strings\interpolation.lm
Parser mode: CST
========================================

AST Dump:
==========
PrintStatement:
PrintStatement:
VarDeclaration: <missing>
VarDeclaration: <missing>
VarDeclaration: <missing>
PrintStatement:
ExpressionStatement:
  Variable: name
ExpressionStatement:
  Literal: "!"
PrintStatement:
ExpressionStatement:
  Variable: age
ExpressionStatement:
  Literal: "\"Age: {age}"
PrintStatement:
ExpressionStatement:
  Variable: pi
ExpressionStatement:
  Literal: "\"Pi: {pi}"
PrintStatement:
ExpressionStatement:
  BinaryExpression: +
    Left:
      Variable: age
    Operator: +
    Right:
      Literal: 1
ExpressionStatement:
  Literal: "\"Next year: {age + 1}"
PrintStatement:
ExpressionStatement:
  BinaryExpression: *
    Left:
      BinaryExpression: *
        Left:
          Variable: pi
        Operator: *
        Right:
          Literal: 2
    Operator: *
    Right:
      Literal: 2
ExpressionStatement:
  Literal: "\"Area of circle: {pi * 2 * 2}"
PrintStatement:
ExpressionStatement:
  Variable: name
ExpressionStatement:
  Variable: age
ExpressionStatement:
  Literal: "\"Name: {name}, Age: {age}"
PrintStatement:
ExpressionStatement:
  Variable: name
ExpressionStatement:
  Variable: age
ExpressionStatement:
  Literal: " years old"
PrintStatement:
ExpressionStatement:
  Variable: name
ExpressionStatement:
  Literal: " says hello"
PrintStatement:
ExpressionStatement:
  Variable: age
ExpressionStatement:
  Literal: " is the age"
VarDeclaration: <missing>
VarDeclaration: <missing>
PrintStatement:
ExpressionStatement:
  Variable: x
ExpressionStatement:
  Variable: y
ExpressionStatement:
  BinaryExpression: +
    Left:
      Variable: x
    Operator: +
    Right:
      Variable: y
ExpressionStatement:
  Literal: "\"Math: {x} + {y} = {x + y}"
PrintStatement:
ExpressionStatement:
  Variable: x
ExpressionStatement:
  Variable: y
ExpressionStatement:
  BinaryExpression: >
    Left:
      Variable: x
    Operator: >
    Right:
      Variable: y
ExpressionStatement:
  Literal: "\"Comparison: {x} > {y} is {x > y}"
PrintStatement:
ExpressionStatement:
  BinaryExpression: -
    Left:
      BinaryExpression: *
        Left:
          BinaryExpression: +
            Left:
              Variable: x
            Operator: +
            Right:
              Variable: y
        Operator: *
        Right:
          Literal: 2
    Operator: -
    Right:
      Literal: 1
ExpressionStatement:
  Literal: "\"Complex: {(x + y) * 2 - 1}"
VarDeclaration: <missing>
ExpressionStatement:
  Variable: name
ExpressionStatement:
  Variable: age
ExpressionStatement:
  Literal: "."
PrintStatement:

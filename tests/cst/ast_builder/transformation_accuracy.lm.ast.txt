AST for C:\Projects\limitly\tests\cst\ast_builder\transformation_accuracy.lm
Parser: New CSTParser (cst_parser.cpp)
Mode: CST with AST compatibility
Note: CST nodes were created internally with trivia preservation
      AST output shown below for compatibility testing
========================================

AST Dump:
==========
VarDeclaration: x
  Initializer:
    Literal: 42
VarDeclaration: name
  Initializer:
    Literal: "test"
VarDeclaration: active
  Initializer:
    Literal: true
VarDeclaration: result
  Initializer:
    BinaryExpression: -
      Left:
        BinaryExpression: *
          Left:
            Grouping:
              BinaryExpression: +
                Left:
                  Variable: x
                Operator: +
                Right:
                  Literal: 10
          Operator: *
          Right:
            Literal: 2
      Operator: -
      Right:
        Literal: 5
IfStatement:
  Condition:
    Variable: active
  Then:
    BlockStatement:
      PrintStatement:
        BinaryExpression: +
          Left:
            Literal: "Active: "
          Operator: +
          Right:
            CallExpression:
              Callee:
                Literal: nil
              Arguments:
                Variable: x
      ForStatement (traditional):
        Initializer:
          VarDeclaration: i
            Initializer:
              Literal: 0
        Condition:
          BinaryExpression: <
            Left:
              Variable: i
            Operator: <
            Right:
              Literal: 3
        Increment:
          Assignment: =
            Target: i
            Value:
            BinaryExpression: +
              Left:
                Variable: i
              Operator: +
              Right:
                Literal: 1
        Body:
          BlockStatement:
            PrintStatement:
              BinaryExpression: +
                Left:
                  Literal: "Loop: "
                Operator: +
                Right:
                  CallExpression:
                    Callee:
                      Literal: nil
                    Arguments:
                      Variable: i
  Else:
    BlockStatement:
      PrintStatement:
        Literal: "Inactive"
PrintStatement:
  BinaryExpression: +
    Left:
      Literal: "Final result: "
    Operator: +
    Right:
      CallExpression:
        Callee:
          Literal: nil
        Arguments:
          Variable: result

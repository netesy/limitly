AST for tests\loops\match_advanced copy.lm
Parser mode: CST
========================================

AST Dump:
==========
PrintStatement:
TypeDeclaration:  = <unknown>
BlockStatement:
  ExpressionStatement:
    Variable: kind
  ExpressionStatement:
    Literal: "Some"
  ExpressionStatement:
    Variable: value
TypeDeclaration:  = <unknown>
ExpressionStatement:
  Literal: nil
FunctionDeclaration: <missing>
  Body:
    BlockStatement:
      ExpressionStatement:
        Variable: value
      BlockStatement:
        ExpressionStatement:
          CallExpression:
            Callee:
              (null)
        BlockStatement:
          PrintStatement:
          ExpressionStatement:
            Variable: x
          ExpressionStatement:
            Literal: "\"Some: {x}"
        ExpressionStatement:
          Variable: <invalid>
        BlockStatement:
          PrintStatement:
FunctionDeclaration: <missing>
  Body:
    BlockStatement:
      ExpressionStatement:
        Variable: value
      BlockStatement:
        BlockStatement:
          PrintStatement:
        ExpressionStatement:
          Variable: x
        BlockStatement:
          PrintStatement:
          ExpressionStatement:
            Variable: x
          ExpressionStatement:
            Literal: "\"One element: {x}"
        ExpressionStatement:
          Variable: x
        ExpressionStatement:
          Variable: y
        BlockStatement:
          PrintStatement:
          ExpressionStatement:
            Variable: x
          ExpressionStatement:
            Variable: y
          ExpressionStatement:
            Literal: "\"Two elements: {x}, {y}"
        ExpressionStatement:
          Variable: head
        ExpressionStatement:
          Variable: tail
        BlockStatement:
          PrintStatement:
          ExpressionStatement:
            Variable: head
          ExpressionStatement:
            Variable: tail
          ExpressionStatement:
            Literal: "\"Head: {head}, Tail: {tail}"
ExpressionStatement:
  CallExpression:
    Callee:
      (null)
ExpressionStatement:
  CallExpression:
    Callee:
      (null)
ExpressionStatement:
  CallExpression:
    Callee:
      (null)
ExpressionStatement:
  CallExpression:
    Callee:
      (null)
FunctionDeclaration: <missing>
  Body:
    BlockStatement:
      ExpressionStatement:
        Variable: value
      BlockStatement:
        ExpressionStatement:
          Variable: <invalid>
        ExpressionStatement:
          BinaryExpression: +
            Left:
              Variable: <invalid>
            Operator: +
            Right:
              Literal: nil
        BlockStatement:
          PrintStatement:
          ExpressionStatement:
            Variable: x
          ExpressionStatement:
            Literal: " is greater than 10"
        ExpressionStatement:
          Variable: <invalid>
        ExpressionStatement:
          BinaryExpression: +
            Left:
              Variable: <invalid>
            Operator: +
            Right:
              Literal: nil
        BlockStatement:
          PrintStatement:
          ExpressionStatement:
            Variable: x
          ExpressionStatement:
            Literal: " is less than 10"
        ExpressionStatement:
          Variable: <invalid>
        BlockStatement:
          PrintStatement:

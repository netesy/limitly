AST for tests/loops/while_loops.lm
========================================

AST Dump:
==========
PrintStatement:
  Literal: "=== While Loop Tests ==="
PrintStatement:
  Literal: "Basic while loop:"
VarDeclaration: i
  Initializer:
    Literal: 0
WhileStatement:
  Condition:
    BinaryExpression: <
      Left:
        Variable: i
      Operator: <
      Right:
        Literal: 5
  Body:
    BlockStatement:
      PrintStatement:
        Literal: "i = {i}"
      ExpressionStatement:
        Assignment: +=
          Target: i
          Value:
          Literal: 1
PrintStatement:
  Literal: "While with complex condition:"
VarDeclaration: x
  Initializer:
    Literal: 1
WhileStatement:
  Condition:
    BinaryExpression: <
      Left:
        BinaryExpression: *
          Left:
            Variable: x
          Operator: *
          Right:
            Variable: x
      Operator: <
      Right:
        Literal: 100
  Body:
    BlockStatement:
      PrintStatement:
        Literal: "x = {x}, xÂ² = {x * x}"
      ExpressionStatement:
        Assignment: +=
          Target: x
          Value:
          Literal: 1
PrintStatement:
  Literal: "Nested while loops:"
VarDeclaration: outer
  Initializer:
    Literal: 0
WhileStatement:
  Condition:
    BinaryExpression: <
      Left:
        Variable: outer
      Operator: <
      Right:
        Literal: 2
  Body:
    BlockStatement:
      VarDeclaration: inner
        Initializer:
          Literal: 0
      WhileStatement:
        Condition:
          BinaryExpression: <
            Left:
              Variable: inner
            Operator: <
            Right:
              Literal: 3
        Body:
          BlockStatement:
            PrintStatement:
              Literal: "({outer}, {inner})"
            ExpressionStatement:
              Assignment: +=
                Target: inner
                Value:
                Literal: 1
      ExpressionStatement:
        Assignment: +=
          Target: outer
          Value:
          Literal: 1
PrintStatement:
  Literal: "While with early termination:"
VarDeclaration: count
  Initializer:
    Literal: 0
WhileStatement:
  Condition:
    BinaryExpression: <
      Left:
        Variable: count
      Operator: <
      Right:
        Literal: 10
  Body:
    BlockStatement:
      IfStatement:
        Condition:
          BinaryExpression: ==
            Left:
              Variable: count
            Operator: ==
            Right:
              Literal: 3
        Then:
          BlockStatement:
            ExpressionStatement:
              Assignment: +=
                Target: count
                Value:
                Literal: 1
            Unknown node type
      IfStatement:
        Condition:
          BinaryExpression: ==
            Left:
              Variable: count
            Operator: ==
            Right:
              Literal: 7
        Then:
          BlockStatement:
            Unknown node type
      PrintStatement:
        Literal: "count = {count}"
      ExpressionStatement:
        Assignment: +=
          Target: count
          Value:
          Literal: 1

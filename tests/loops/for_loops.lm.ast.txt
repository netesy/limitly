AST for tests/loops/for_loops.lm
========================================

AST Dump:
==========
PrintStatement:
  Literal: "=== For Loop Tests ==="
PrintStatement:
  Literal: "Basic for loop (0 to 4):"
ForStatement (traditional):
  Initializer:
    VarDeclaration: i
      Initializer:
        Literal: 0
  Condition:
    BinaryExpression: <
      Left:
        Variable: i
      Operator: <
      Right:
        Literal: 5
  Increment:
    Assignment: +=
      Target: i
      Value:
      Literal: 1
  Body:
    BlockStatement:
      PrintStatement:
        Literal: "i = {i}"
PrintStatement:
  Literal: "For loop with increment 2:"
ForStatement (traditional):
  Initializer:
    VarDeclaration: j
      Initializer:
        Literal: 0
  Condition:
    BinaryExpression: <
      Left:
        Variable: j
      Operator: <
      Right:
        Literal: 10
  Increment:
    Assignment: +=
      Target: j
      Value:
      Literal: 2
  Body:
    BlockStatement:
      PrintStatement:
        Literal: "j = {j}"
PrintStatement:
  Literal: "Countdown loop:"
ForStatement (traditional):
  Initializer:
    VarDeclaration: k
      Initializer:
        Literal: 5
  Condition:
    BinaryExpression: >
      Left:
        Variable: k
      Operator: >
      Right:
        Literal: 0
  Increment:
    Assignment: -=
      Target: k
      Value:
      Literal: 1
  Body:
    BlockStatement:
      PrintStatement:
        Literal: "k = {k}"
PrintStatement:
  Literal: "Complex condition:"
ForStatement (traditional):
  Initializer:
    VarDeclaration: x
      Initializer:
        Literal: 1
  Condition:
    BinaryExpression: <
      Left:
        BinaryExpression: *
          Left:
            Variable: x
          Operator: *
          Right:
            Variable: x
      Operator: <
      Right:
        Literal: 20
  Increment:
    Assignment: +=
      Target: x
      Value:
      Literal: 1
  Body:
    BlockStatement:
      PrintStatement:
        Literal: "x = {x}, xÂ² = {x * x}"
PrintStatement:
  Literal: "Nested for loops (2x3 grid):"
ForStatement (traditional):
  Initializer:
    VarDeclaration: row
      Initializer:
        Literal: 0
  Condition:
    BinaryExpression: <
      Left:
        Variable: row
      Operator: <
      Right:
        Literal: 2
  Increment:
    Assignment: +=
      Target: row
      Value:
      Literal: 1
  Body:
    BlockStatement:
      ForStatement (traditional):
        Initializer:
          VarDeclaration: col
            Initializer:
              Literal: 0
        Condition:
          BinaryExpression: <
            Left:
              Variable: col
            Operator: <
            Right:
              Literal: 3
        Increment:
          Assignment: +=
            Target: col
            Value:
            Literal: 1
        Body:
          BlockStatement:
            PrintStatement:
              Literal: "({row}, {col})"
PrintStatement:
  Literal: "Variable scope test:"
VarDeclaration: outer
  Initializer:
    Literal: 100
ForStatement (traditional):
  Initializer:
    VarDeclaration: i
      Initializer:
        Literal: 0
  Condition:
    BinaryExpression: <
      Left:
        Variable: i
      Operator: <
      Right:
        Literal: 3
  Increment:
    Assignment: +=
      Target: i
      Value:
      Literal: 1
  Body:
    BlockStatement:
      VarDeclaration: inner
        Initializer:
          BinaryExpression: *
            Left:
              Variable: i
            Operator: *
            Right:
              Literal: 10
      PrintStatement:
        Literal: "outer: {outer}, inner: {inner}"

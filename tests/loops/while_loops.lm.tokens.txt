Tokens for tests/loops/while_loops.lm
========================================

Line 2: PRINT = 'print'
Line 2: LEFT_PAREN = '('
Line 2: STRING = '=== While Loop Tests ==='
Line 2: RIGHT_PAREN = ')'
Line 2: SEMICOLON = ';'
Line 5: PRINT = 'print'
Line 5: LEFT_PAREN = '('
Line 5: STRING = 'Basic while loop:'
Line 5: RIGHT_PAREN = ')'
Line 5: SEMICOLON = ';'
Line 6: VAR = 'var'
Line 6: IDENTIFIER = 'i'
Line 6: EQUAL = '='
Line 6: NUMBER = '0'
Line 6: SEMICOLON = ';'
Line 7: WHILE = 'while'
Line 7: LEFT_PAREN = '('
Line 7: IDENTIFIER = 'i'
Line 7: LESS = '<'
Line 7: NUMBER = '5'
Line 7: RIGHT_PAREN = ')'
Line 7: LEFT_BRACE = '{'
Line 8: PRINT = 'print'
Line 8: LEFT_PAREN = '('
Line 8: STRING = 'i = {i}'
Line 8: RIGHT_PAREN = ')'
Line 8: SEMICOLON = ';'
Line 9: IDENTIFIER = 'i'
Line 9: PLUS_EQUAL = '+='
Line 9: NUMBER = '1'
Line 9: SEMICOLON = ';'
Line 10: RIGHT_BRACE = '}'
Line 13: PRINT = 'print'
Line 13: LEFT_PAREN = '('
Line 13: STRING = 'While with complex condition:'
Line 13: RIGHT_PAREN = ')'
Line 13: SEMICOLON = ';'
Line 14: VAR = 'var'
Line 14: IDENTIFIER = 'x'
Line 14: EQUAL = '='
Line 14: NUMBER = '1'
Line 14: SEMICOLON = ';'
Line 15: WHILE = 'while'
Line 15: LEFT_PAREN = '('
Line 15: IDENTIFIER = 'x'
Line 15: STAR = '*'
Line 15: IDENTIFIER = 'x'
Line 15: LESS = '<'
Line 15: NUMBER = '100'
Line 15: RIGHT_PAREN = ')'
Line 15: LEFT_BRACE = '{'
Line 16: PRINT = 'print'
Line 16: LEFT_PAREN = '('
Line 16: STRING = 'x = {x}, xÂ² = {x * x}'
Line 16: RIGHT_PAREN = ')'
Line 16: SEMICOLON = ';'
Line 17: IDENTIFIER = 'x'
Line 17: PLUS_EQUAL = '+='
Line 17: NUMBER = '1'
Line 17: SEMICOLON = ';'
Line 18: RIGHT_BRACE = '}'
Line 21: PRINT = 'print'
Line 21: LEFT_PAREN = '('
Line 21: STRING = 'Nested while loops:'
Line 21: RIGHT_PAREN = ')'
Line 21: SEMICOLON = ';'
Line 22: VAR = 'var'
Line 22: IDENTIFIER = 'outer'
Line 22: EQUAL = '='
Line 22: NUMBER = '0'
Line 22: SEMICOLON = ';'
Line 23: WHILE = 'while'
Line 23: LEFT_PAREN = '('
Line 23: IDENTIFIER = 'outer'
Line 23: LESS = '<'
Line 23: NUMBER = '2'
Line 23: RIGHT_PAREN = ')'
Line 23: LEFT_BRACE = '{'
Line 24: VAR = 'var'
Line 24: IDENTIFIER = 'inner'
Line 24: EQUAL = '='
Line 24: NUMBER = '0'
Line 24: SEMICOLON = ';'
Line 25: WHILE = 'while'
Line 25: LEFT_PAREN = '('
Line 25: IDENTIFIER = 'inner'
Line 25: LESS = '<'
Line 25: NUMBER = '3'
Line 25: RIGHT_PAREN = ')'
Line 25: LEFT_BRACE = '{'
Line 26: PRINT = 'print'
Line 26: LEFT_PAREN = '('
Line 26: STRING = '({outer}, {inner})'
Line 26: RIGHT_PAREN = ')'
Line 26: SEMICOLON = ';'
Line 27: IDENTIFIER = 'inner'
Line 27: PLUS_EQUAL = '+='
Line 27: NUMBER = '1'
Line 27: SEMICOLON = ';'
Line 28: RIGHT_BRACE = '}'
Line 29: IDENTIFIER = 'outer'
Line 29: PLUS_EQUAL = '+='
Line 29: NUMBER = '1'
Line 29: SEMICOLON = ';'
Line 30: RIGHT_BRACE = '}'
Line 33: PRINT = 'print'
Line 33: LEFT_PAREN = '('
Line 33: STRING = 'While with early termination:'
Line 33: RIGHT_PAREN = ')'
Line 33: SEMICOLON = ';'
Line 34: VAR = 'var'
Line 34: IDENTIFIER = 'count'
Line 34: EQUAL = '='
Line 34: NUMBER = '0'
Line 34: SEMICOLON = ';'
Line 35: WHILE = 'while'
Line 35: LEFT_PAREN = '('
Line 35: IDENTIFIER = 'count'
Line 35: LESS = '<'
Line 35: NUMBER = '10'
Line 35: RIGHT_PAREN = ')'
Line 35: LEFT_BRACE = '{'
Line 36: IF = 'if'
Line 36: LEFT_PAREN = '('
Line 36: IDENTIFIER = 'count'
Line 36: EQUAL_EQUAL = '=='
Line 36: NUMBER = '3'
Line 36: RIGHT_PAREN = ')'
Line 36: LEFT_BRACE = '{'
Line 37: IDENTIFIER = 'count'
Line 37: PLUS_EQUAL = '+='
Line 37: NUMBER = '1'
Line 37: SEMICOLON = ';'
Line 38: CONTINUE = 'continue'
Line 38: SEMICOLON = ';'
Line 39: RIGHT_BRACE = '}'
Line 40: IF = 'if'
Line 40: LEFT_PAREN = '('
Line 40: IDENTIFIER = 'count'
Line 40: EQUAL_EQUAL = '=='
Line 40: NUMBER = '7'
Line 40: RIGHT_PAREN = ')'
Line 40: LEFT_BRACE = '{'
Line 41: BREAK = 'break'
Line 41: SEMICOLON = ';'
Line 42: RIGHT_BRACE = '}'
Line 43: PRINT = 'print'
Line 43: LEFT_PAREN = '('
Line 43: STRING = 'count = {count}'
Line 43: RIGHT_PAREN = ')'
Line 43: SEMICOLON = ';'
Line 44: IDENTIFIER = 'count'
Line 44: PLUS_EQUAL = '+='
Line 44: NUMBER = '1'
Line 44: SEMICOLON = ';'
Line 45: RIGHT_BRACE = '}'
Line 45: EOF_TOKEN = ''

AST for C:\Projects\limitly\tests\basic\control_flow.lm
Parser: New CSTParser (cst_parser.cpp)
Mode: CST with AST compatibility
Note: CST nodes were created internally with trivia preservation
      AST output shown below for compatibility testing
========================================

AST Dump:
==========
PrintStatement:
  Literal: "=== Control Flow Tests ==="
VarDeclaration: x
  Initializer:
    Literal: 10
VarDeclaration: y
  Initializer:
    Literal: 5
PrintStatement:
  Literal: "If statement tests:"
IfStatement:
  Condition:
    BinaryExpression: >
      Left:
        Variable: x
      Operator: >
      Right:
        Variable: y
  Then:
    BlockStatement:
      PrintStatement:
        Literal: "x is greater than y"
IfStatement:
  Condition:
    BinaryExpression: <
      Left:
        Variable: x
      Operator: <
      Right:
        Variable: y
  Then:
    BlockStatement:
      PrintStatement:
        Literal: "This should not print"
  Else:
    BlockStatement:
      PrintStatement:
        Literal: "x is not less than y"
VarDeclaration: score
  Initializer:
    Literal: 85
PrintStatement:
  Literal: "Grade calculation:"
IfStatement:
  Condition:
    BinaryExpression: >=
      Left:
        Variable: score
      Operator: >=
      Right:
        Literal: 90
  Then:
    BlockStatement:
      PrintStatement:
        Literal: "Grade: A"
  Else:
    IfStatement:
      Condition:
        BinaryExpression: >=
          Left:
            Variable: score
          Operator: >=
          Right:
            Literal: 80
      Then:
        BlockStatement:
          PrintStatement:
            Literal: "Grade: B"
      Else:
        IfStatement:
          Condition:
            BinaryExpression: >=
              Left:
                Variable: score
              Operator: >=
              Right:
                Literal: 70
          Then:
            BlockStatement:
              PrintStatement:
                Literal: "Grade: C"
          Else:
            BlockStatement:
              PrintStatement:
                Literal: "Grade: F"
PrintStatement:
  Literal: "Nested if test:"
VarDeclaration: a
  Initializer:
    Literal: 15
IfStatement:
  Condition:
    BinaryExpression: >
      Left:
        Variable: a
      Operator: >
      Right:
        Literal: 10
  Then:
    BlockStatement:
      PrintStatement:
        Literal: "a is greater than 10"
      IfStatement:
        Condition:
          BinaryExpression: >
            Left:
              Variable: a
            Operator: >
            Right:
              Literal: 20
        Then:
          BlockStatement:
            PrintStatement:
              Literal: "a is also greater than 20"
        Else:
          BlockStatement:
            PrintStatement:
              Literal: "but a is not greater than 20"
VarDeclaration: isActive
  Initializer:
    Literal: true
VarDeclaration: isValid
  Initializer:
    Literal: false
IfStatement:
  Condition:
    BinaryExpression: and
      Left:
        Variable: isActive
      Operator: and
      Right:
        UnaryExpression: !
          Operand:
            Variable: isValid
  Then:
    BlockStatement:
      PrintStatement:
        Literal: "Active but not valid"
IfStatement:
  Condition:
    BinaryExpression: <unknown>
      Left:
        Variable: isActive
      Operator: <unknown>
      Right:
        Variable: isValid
  Then:
    BlockStatement:
      PrintStatement:
        Literal: "At least one is true"

AST for C:\Projects\limitly\tests\basic\print_statements.lm
Parser: New CSTParser (cst_parser.cpp)
Mode: CST with AST compatibility
Note: CST nodes were created internally with trivia preservation
      AST output shown below for compatibility testing
========================================

AST Dump:
==========
PrintStatement:
  Literal: "=== Print Statement Tests ==="
PrintStatement:
  Literal: "Hello, World!"
VarDeclaration: name
  Initializer:
    Literal: "Limit"
VarDeclaration: version
  Initializer:
    Literal: 1
PrintStatement:
  Variable: name
PrintStatement:
  Variable: version
PrintStatement:
  BinaryExpression: +
    Left:
      Literal: 2
    Operator: +
    Right:
      Literal: 3
PrintStatement:
  BinaryExpression: >
    Left:
      Literal: 10
    Operator: >
    Right:
      Literal: 5
PrintStatement:
  BinaryExpression: +
    Left:
      Literal: "Result: "
    Operator: +
    Right:
      Literal: "Success"
VarDeclaration: x
  Initializer:
    Literal: 42
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      Variable: x
    String: "\"The answer is {x}"
PrintStatement:
  Literal: true
PrintStatement:
  Literal: false
PrintStatement:
  Literal: nil
PrintStatement:
  Literal: 0
PrintStatement:
  Literal: "\""
VarDeclaration: a
  Initializer:
    Literal: 5
VarDeclaration: b
  Initializer:
    Literal: 3
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      Variable: a
    Expression:
      Variable: b
    Expression:
      BinaryExpression: +
        Left:
          Variable: a
        Operator: +
        Right:
          Variable: b
    String: "\"Math: {a} + {b} = {a + b}"
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      Variable: a
    Expression:
      Variable: b
    Expression:
      BinaryExpression: >
        Left:
          Variable: a
        Operator: >
        Right:
          Variable: b
    String: "\"Logic: {a} > {b} is {a > b}"
PrintStatement:
  Literal: "Numbers 1-3:"
ForStatement (traditional):
  Initializer:
    VarDeclaration: i
      Initializer:
        Literal: 1
  Condition:
    BinaryExpression: <=
      Left:
        Variable: i
      Operator: <=
      Right:
        Literal: 3
  Increment:
    Assignment: +=
      Target: i
      Value:
      Literal: 1
  Body:
    BlockStatement:
      PrintStatement:
        InterpolatedString:
          String: ""
          Expression:
            Variable: i
          String: "\"Number: {i}"
PrintStatement:
  Literal: "Line 1\nLine 2"
PrintStatement:
  Literal: "Tab\tSeparated"
PrintStatement:
  Literal: "Quote: \"Hello\""

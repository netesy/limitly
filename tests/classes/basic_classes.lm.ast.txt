AST for C:\Projects\limitly\tests\classes\basic_classes.lm
Parser: New CSTParser (cst_parser.cpp)
Mode: CST with AST compatibility
Note: CST nodes were created internally with trivia preservation
      AST output shown below for compatibility testing
========================================

AST Dump:
==========
PrintStatement:
  Literal: "=== Basic Class Tests ==="
ClassDeclaration: Person
  Methods:
    FunctionDeclaration: init
      Parameters:
        name
        age
      Body:
        BlockStatement:
          ExpressionStatement:
            Assignment: =
              Member: name
              Object:
                This
              Value:
              Variable: name
          ExpressionStatement:
            Assignment: =
              Member: age
              Object:
                This
              Value:
              Variable: age
    FunctionDeclaration: greet
      Body:
        BlockStatement:
          PrintStatement:
            InterpolatedString:
              String: ""
              Expression:
                MemberExpression: .name
                  Object:
                    This
              Expression:
                MemberExpression: .age
                  Object:
                    This
              String: " years old"
    FunctionDeclaration: birthday
      Body:
        BlockStatement:
          ExpressionStatement:
            Assignment: +=
              Member: age
              Object:
                This
              Value:
              Literal: 1
          PrintStatement:
            InterpolatedString:
              String: ""
              Expression:
                MemberExpression: .name
                  Object:
                    This
              Expression:
                MemberExpression: .age
                  Object:
                    This
              String: " years old"
PrintStatement:
  Literal: "Creating Person objects:"
VarDeclaration: person1
  Initializer:
    CallExpression:
      Callee:
        Variable: Person
      Arguments:
        Literal: "Alice"
        Literal: 25
VarDeclaration: person2
  Initializer:
    CallExpression:
      Callee:
        Variable: Person
      Arguments:
        Literal: "Bob"
        Literal: 30
PrintStatement:
  Literal: "Calling methods:"
ExpressionStatement:
  CallExpression:
    Callee:
      MemberExpression: .greet
        Object:
          Variable: person1
ExpressionStatement:
  CallExpression:
    Callee:
      MemberExpression: .greet
        Object:
          Variable: person2
PrintStatement:
  Literal: "Birthday test:"
ExpressionStatement:
  CallExpression:
    Callee:
      MemberExpression: .birthday
        Object:
          Variable: person1
ExpressionStatement:
  CallExpression:
    Callee:
      MemberExpression: .greet
        Object:
          Variable: person1
ClassDeclaration: Rectangle
  Fields:
    VarDeclaration: width
      Type: int
      Initializer:
        Literal: 0
    VarDeclaration: height
      Type: int
      Initializer:
        Literal: 0
  Methods:
    FunctionDeclaration: init
      Parameters:
        width
        height
      Body:
        BlockStatement:
          ExpressionStatement:
            Assignment: =
              Member: width
              Object:
                This
              Value:
              Variable: width
          ExpressionStatement:
            Assignment: =
              Member: height
              Object:
                This
              Value:
              Variable: height
    FunctionDeclaration: area
      Body:
        BlockStatement:
          ReturnStatement:
            Value:
              BinaryExpression: *
                Left:
                  MemberExpression: .width
                    Object:
                      This
                Operator: *
                Right:
                  MemberExpression: .height
                    Object:
                      This
    FunctionDeclaration: perimeter
      Body:
        BlockStatement:
          ReturnStatement:
            Value:
              BinaryExpression: *
                Left:
                  Literal: 2
                Operator: *
                Right:
                  Grouping:
                    BinaryExpression: +
                      Left:
                        MemberExpression: .width
                          Object:
                            This
                      Operator: +
                      Right:
                        MemberExpression: .height
                          Object:
                            This
PrintStatement:
  Literal: "Rectangle class:"
VarDeclaration: rect
  Initializer:
    CallExpression:
      Callee:
        Variable: Rectangle
      Arguments:
        Literal: 5
        Literal: 3
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      CallExpression:
        Callee:
          MemberExpression: .area
            Object:
              Variable: rect
    String: "\"Area: {rect.area()}"
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      CallExpression:
        Callee:
          MemberExpression: .perimeter
            Object:
              Variable: rect
    String: "\"Perimeter: {rect.perimeter()}"
ClassDeclaration: BankAccount
  Fields:
    VarDeclaration: balance
      Type: float
      Initializer:
        Literal: 
  Methods:
    FunctionDeclaration: deposit
      Parameters:
        amount: float
      ReturnType: float
      Body:
        BlockStatement:
          ExpressionStatement:
            Assignment: =
              Member: balance
              Object:
                This
              Value:
              BinaryExpression: +
                Left:
                  MemberExpression: .balance
                    Object:
                      This
                Operator: +
                Right:
                  Variable: amount
          ReturnStatement:
            Value:
              MemberExpression: .balance
                Object:
                  This
    FunctionDeclaration: withdraw
      Parameters:
        amount: float
      ReturnType: float
      Body:
        BlockStatement:
          IfStatement:
            Condition:
              BinaryExpression: >
                Left:
                  Variable: amount
                Operator: >
                Right:
                  MemberExpression: .balance
                    Object:
                      This
            Then:
              BlockStatement:
                PrintStatement:
                  Literal: "Insufficient funds!"
                ReturnStatement:
                  Value:
                    MemberExpression: .balance
                      Object:
                        This
          ExpressionStatement:
            Assignment: =
              Member: balance
              Object:
                This
              Value:
              BinaryExpression: -
                Left:
                  MemberExpression: .balance
                    Object:
                      This
                Operator: -
                Right:
                  Variable: amount
          ReturnStatement:
            Value:
              Variable: amount
FunctionDeclaration: test_bank_account
  Body:
    BlockStatement:
      VarDeclaration: account
        Initializer:
          CallExpression:
            Callee:
              Variable: BankAccount
      ExpressionStatement:
        CallExpression:
          Callee:
            MemberExpression: .deposit
              Object:
                Variable: account
          Arguments:
            Literal: 1
      PrintStatement:
        InterpolatedString:
          String: ""
          Expression:
            MemberExpression: .balance
              Object:
                Variable: account
          String: "\"Balance after deposit: {account.balance}"
      VarDeclaration: withdrawn
        Initializer:
          CallExpression:
            Callee:
              MemberExpression: .withdraw
                Object:
                  Variable: account
            Arguments:
              Literal: 3
      PrintStatement:
        InterpolatedString:
          String: ""
          Expression:
            Variable: withdrawn
          String: "\"Withdrawn: {withdrawn}"
      PrintStatement:
        InterpolatedString:
          String: ""
          Expression:
            MemberExpression: .balance
              Object:
                Variable: account
          String: "\"Balance after withdrawal: {account.balance}"
      VarDeclaration: failed_withdraw
        Initializer:
          CallExpression:
            Callee:
              MemberExpression: .withdraw
                Object:
                  Variable: account
            Arguments:
              Literal: 1
      PrintStatement:
        InterpolatedString:
          String: ""
          Expression:
            Variable: failed_withdraw
          String: "\"Failed withdrawal: {failed_withdraw}"
ExpressionStatement:
  CallExpression:
    Callee:
      Variable: test_bank_account

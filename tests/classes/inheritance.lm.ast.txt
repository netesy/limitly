AST for C:\Projects\limitly\tests\classes\inheritance.lm
Parser: New CSTParser (cst_parser.cpp)
Mode: CST with AST compatibility
Note: CST nodes were created internally with trivia preservation
      AST output shown below for compatibility testing
========================================

AST Dump:
==========
PrintStatement:
  Literal: "=== Class Inheritance Tests ==="
ClassDeclaration: Animal
  Methods:
    FunctionDeclaration: init
      Parameters:
        name: str
      Body:
        BlockStatement:
          ExpressionStatement:
            Assignment: =
              Member: name
              Object:
                This
              Value:
              Variable: name
    FunctionDeclaration: speak
      Body:
        BlockStatement:
          PrintStatement:
            InterpolatedString:
              String: ""
              Expression:
                MemberExpression: .name
                  Object:
                    This
              String: " makes a sound"
    FunctionDeclaration: info
      Body:
        BlockStatement:
          PrintStatement:
            InterpolatedString:
              String: ""
              Expression:
                MemberExpression: .name
                  Object:
                    This
              String: "\"Animal is {self.name}"
ClassDeclaration: Dog : Animal(arg0) (inline constructor: name, breed)
  Methods:
    FunctionDeclaration: speak
      Body:
        BlockStatement:
          PrintStatement:
            InterpolatedString:
              String: ""
              Expression:
                MemberExpression: .name
                  Object:
                    This
              String: " barks!"
    FunctionDeclaration: wagTail
      Body:
        BlockStatement:
          PrintStatement:
            InterpolatedString:
              String: ""
              Expression:
                MemberExpression: .name
                  Object:
                    This
              String: " wags tail happily"
    FunctionDeclaration: info
      Body:
        BlockStatement:
          PrintStatement:
            InterpolatedString:
              String: ""
              Expression:
                MemberExpression: .name
                  Object:
                    This
              Expression:
                MemberExpression: .breed
                  Object:
                    This
              String: "\"Dog {self.name} is a {self.breed}"
    FunctionDeclaration: init
      Parameters:
        name: str
        breed: str
      Body:
        BlockStatement:
          ExpressionStatement:
            CallExpression:
              Callee:
                MemberExpression: .init
                  Object:
                    Variable: super
              Arguments:
                Variable: name
          ExpressionStatement:
            Assignment: =
              Member: name
              Object:
                MemberExpression: .name
                  Object:
                    This
              Value:
              Variable: name
          ExpressionStatement:
            Assignment: =
              Member: breed
              Object:
                MemberExpression: .breed
                  Object:
                    This
              Value:
              Variable: breed
ClassDeclaration: Cat : Animal(arg0) (inline constructor: name)
  Methods:
    FunctionDeclaration: speak
      Body:
        BlockStatement:
          PrintStatement:
            InterpolatedString:
              String: ""
              Expression:
                MemberExpression: .name
                  Object:
                    This
              String: " meows"
    FunctionDeclaration: purr
      Body:
        BlockStatement:
          PrintStatement:
            InterpolatedString:
              String: ""
              Expression:
                MemberExpression: .name
                  Object:
                    This
              String: " purrs contentedly"
    FunctionDeclaration: init
      Parameters:
        name: str
      Body:
        BlockStatement:
          ExpressionStatement:
            CallExpression:
              Callee:
                MemberExpression: .init
                  Object:
                    Variable: super
              Arguments:
                Variable: name
          ExpressionStatement:
            Assignment: =
              Member: name
              Object:
                MemberExpression: .name
                  Object:
                    This
              Value:
              Variable: name
ClassDeclaration: SmartDog : Dog(arg0, arg1) (inline constructor: name, breed, iq)
  Methods:
    FunctionDeclaration: speak
      Body:
        BlockStatement:
          ExpressionStatement:
            CallExpression:
              Callee:
                MemberExpression: .speak
                  Object:
                    Super
          PrintStatement:
            Literal: "Woof woof! (intelligently)"
    FunctionDeclaration: solve
      Parameters:
        problem: str
      Body:
        BlockStatement:
          PrintStatement:
            InterpolatedString:
              String: ""
              Expression:
                MemberExpression: .name
                  Object:
                    This
              Expression:
                Variable: problem
              String: "\"{self.name} solves: {problem}"
    FunctionDeclaration: getIQ
      Body:
        BlockStatement:
          ReturnStatement:
            Value:
              MemberExpression: .iq
                Object:
                  This
    FunctionDeclaration: init
      Parameters:
        name: str
        breed: str
        iq: int
      Body:
        BlockStatement:
          ExpressionStatement:
            CallExpression:
              Callee:
                MemberExpression: .init
                  Object:
                    Variable: super
              Arguments:
                Variable: name
                Variable: breed
          ExpressionStatement:
            Assignment: =
              Member: name
              Object:
                MemberExpression: .name
                  Object:
                    This
              Value:
              Variable: name
          ExpressionStatement:
            Assignment: =
              Member: breed
              Object:
                MemberExpression: .breed
                  Object:
                    This
              Value:
              Variable: breed
          ExpressionStatement:
            Assignment: =
              Member: iq
              Object:
                MemberExpression: .iq
                  Object:
                    This
              Value:
              Variable: iq
ClassDeclaration: Bird : Animal(arg0) (inline constructor: name, species, canFly)
  Methods:
    FunctionDeclaration: speak
      Body:
        BlockStatement:
          PrintStatement:
            InterpolatedString:
              String: ""
              Expression:
                MemberExpression: .name
                  Object:
                    This
              String: " chirps melodiously"
    FunctionDeclaration: fly
      Body:
        BlockStatement:
          IfStatement:
            Condition:
              MemberExpression: .canFly
                Object:
                  This
            Then:
              BlockStatement:
                PrintStatement:
                  InterpolatedString:
                    String: ""
                    Expression:
                      MemberExpression: .name
                        Object:
                          This
                    String: " soars through the sky"
            Else:
              BlockStatement:
                PrintStatement:
                  InterpolatedString:
                    String: ""
                    Expression:
                      MemberExpression: .name
                        Object:
                          This
                    String: " cannot fly but runs fast"
    FunctionDeclaration: info
      Body:
        BlockStatement:
          PrintStatement:
            InterpolatedString:
              String: ""
              Expression:
                MemberExpression: .name
                  Object:
                    This
              Expression:
                MemberExpression: .species
                  Object:
                    This
              String: "\"Bird {self.name} is a {self.species}"
    FunctionDeclaration: init
      Parameters:
        name: str
        species: str
        canFly: bool
      Body:
        BlockStatement:
          ExpressionStatement:
            CallExpression:
              Callee:
                MemberExpression: .init
                  Object:
                    Variable: super
              Arguments:
                Variable: name
          ExpressionStatement:
            Assignment: =
              Member: name
              Object:
                MemberExpression: .name
                  Object:
                    This
              Value:
              Variable: name
          ExpressionStatement:
            Assignment: =
              Member: species
              Object:
                MemberExpression: .species
                  Object:
                    This
              Value:
              Variable: species
          ExpressionStatement:
            Assignment: =
              Member: canFly
              Object:
                MemberExpression: .canFly
                  Object:
                    This
              Value:
              Variable: canFly
ClassDeclaration: Fish : Animal(arg0) (inline constructor: name, waterType)
  Methods:
    FunctionDeclaration: speak
      Body:
        BlockStatement:
          PrintStatement:
            InterpolatedString:
              String: ""
              Expression:
                MemberExpression: .name
                  Object:
                    This
              String: " makes bubbles"
    FunctionDeclaration: swim
      Body:
        BlockStatement:
          PrintStatement:
            InterpolatedString:
              String: ""
              Expression:
                MemberExpression: .name
                  Object:
                    This
              Expression:
                MemberExpression: .waterType
                  Object:
                    This
              String: " water"
    FunctionDeclaration: info
      Body:
        BlockStatement:
          PrintStatement:
            InterpolatedString:
              String: ""
              Expression:
                MemberExpression: .name
                  Object:
                    This
              Expression:
                MemberExpression: .waterType
                  Object:
                    This
              String: " water"
    FunctionDeclaration: init
      Parameters:
        name: str
        waterType: str
      Body:
        BlockStatement:
          ExpressionStatement:
            CallExpression:
              Callee:
                MemberExpression: .init
                  Object:
                    Variable: super
              Arguments:
                Variable: name
          ExpressionStatement:
            Assignment: =
              Member: name
              Object:
                MemberExpression: .name
                  Object:
                    This
              Value:
              Variable: name
          ExpressionStatement:
            Assignment: =
              Member: waterType
              Object:
                MemberExpression: .waterType
                  Object:
                    This
              Value:
              Variable: waterType
ClassDeclaration: HybridPet : Animal
  Fields:
    VarDeclaration: species1
      Type: str
    VarDeclaration: species2
      Type: str
    VarDeclaration: age
      Type: int
    VarDeclaration: isValidHybrid
      Type: bool
    VarDeclaration: traits
      Type: [str]
  Methods:
    FunctionDeclaration: init
      Parameters:
        name: str
        species1: str
        species2: str
        age: int
      Body:
        BlockStatement:
          ExpressionStatement:
            CallExpression:
              Callee:
                MemberExpression: .init
                  Object:
                    Super
              Arguments:
                Variable: name
          IfStatement:
            Condition:
              BinaryExpression: and
                Left:
                  BinaryExpression: <
                    Left:
                      Variable: age
                    Operator: <
                    Right:
                      Literal: 0
                Operator: and
                Right:
                  BinaryExpression: >
                    Left:
                      Variable: age
                    Operator: >
                    Right:
                      Literal: 30
            Then:
              BlockStatement:
                PrintStatement:
                  InterpolatedString:
                    String: ""
                    Expression:
                      Variable: age
                    String: "\"Invalid age for hybrid pet: {age}"
          IfStatement:
            Condition:
              BinaryExpression: ==
                Left:
                  Variable: species1
                Operator: ==
                Right:
                  Variable: species2
            Then:
              BlockStatement:
                PrintStatement:
                  InterpolatedString:
                    String: ""
                    Expression:
                      Variable: species1
                    String: "\"Cannot create hybrid from same species: {species1}"
          ExpressionStatement:
            Assignment: =
              Member: species1
              Object:
                This
              Value:
              Variable: species1
          ExpressionStatement:
            Assignment: =
              Member: species2
              Object:
                This
              Value:
              Variable: species2
          ExpressionStatement:
            Assignment: =
              Member: age
              Object:
                This
              Value:
              Variable: age
          ExpressionStatement:
            Assignment: =
              Member: isValidHybrid
              Object:
                This
              Value:
              CallExpression:
                Callee:
                  MemberExpression: .validateHybrid
                    Object:
                      This
          ExpressionStatement:
            Assignment: =
              Member: traits
              Object:
                This
              Value:
              CallExpression:
                Callee:
                  MemberExpression: .generateTraits
                    Object:
                      This
          PrintStatement:
            InterpolatedString:
              String: ""
              Expression:
                MemberExpression: .name
                  Object:
                    This
              Expression:
                MemberExpression: .species1
                  Object:
                    This
              Expression:
                MemberExpression: .species2
                  Object:
                    This
              String: " mix"
          IfStatement:
            Condition:
              UnaryExpression: !
                Operand:
                  MemberExpression: .isValidHybrid
                    Object:
                      This
            Then:
              BlockStatement:
                PrintStatement:
                  Literal: "Warning: Unusual hybrid combination detected"
    FunctionDeclaration: validateHybrid
      Body:
        BlockStatement:
          VarDeclaration: validCombos
            Initializer:
              ListExpression: [6 elements]
                ListExpression: [2 elements]
                  Literal: "Cat"
                  Literal: "Lion"
                ListExpression: [2 elements]
                  Literal: "Dog"
                  Literal: "Wolf"
                ListExpression: [2 elements]
                  Literal: "Horse"
                  Literal: "Donkey"
                ListExpression: [2 elements]
                  Literal: "Tiger"
                  Literal: "Lion"
                ListExpression: [2 elements]
                  Literal: "Cat"
                  Literal: "Tiger"
                ListExpression: [2 elements]
                  Literal: "Dog"
                  Literal: "Fox"
          IterStatement:
            Variables: combo
            Iterable:
              Variable: validCombos
            Body:
              BlockStatement:
                IfStatement:
                  Condition:
                    BinaryExpression: and
                      Left:
                        Grouping:
                          BinaryExpression: <unknown>
                            Left:
                              BinaryExpression: ==
                                Left:
                                  IndexExpression:
                                    Object:
                                      Variable: combo
                                    Index:
                                      Literal: 0
                                Operator: ==
                                Right:
                                  MemberExpression: .species1
                                    Object:
                                      This
                            Operator: <unknown>
                            Right:
                              BinaryExpression: ==
                                Left:
                                  IndexExpression:
                                    Object:
                                      Variable: combo
                                    Index:
                                      Literal: 1
                                Operator: ==
                                Right:
                                  MemberExpression: .species2
                                    Object:
                                      This
                      Operator: and
                      Right:
                        Grouping:
                          BinaryExpression: <unknown>
                            Left:
                              BinaryExpression: ==
                                Left:
                                  IndexExpression:
                                    Object:
                                      Variable: combo
                                    Index:
                                      Literal: 0
                                Operator: ==
                                Right:
                                  MemberExpression: .species2
                                    Object:
                                      This
                            Operator: <unknown>
                            Right:
                              BinaryExpression: ==
                                Left:
                                  IndexExpression:
                                    Object:
                                      Variable: combo
                                    Index:
                                      Literal: 1
                                Operator: ==
                                Right:
                                  MemberExpression: .species1
                                    Object:
                                      This
                  Then:
                    BlockStatement:
                      ReturnStatement:
                        Value:
                          Literal: true
          ReturnStatement:
            Value:
              Literal: false
    FunctionDeclaration: generateTraits
      Body:
        BlockStatement:
          VarDeclaration: traits
            Initializer:
              ListExpression: [0 elements]
          IfStatement:
            Condition:
              BinaryExpression: and
                Left:
                  BinaryExpression: ==
                    Left:
                      MemberExpression: .species1
                        Object:
                          This
                    Operator: ==
                    Right:
                      Literal: "Cat"
                Operator: and
                Right:
                  BinaryExpression: ==
                    Left:
                      MemberExpression: .species2
                        Object:
                          This
                    Operator: ==
                    Right:
                      Literal: "Cat"
            Then:
              BlockStatement:
                ExpressionStatement:
                  CallExpression:
                    Callee:
                      MemberExpression: .append
                        Object:
                          Variable: traits
                    Arguments:
                      Literal: "agile"
                ExpressionStatement:
                  CallExpression:
                    Callee:
                      MemberExpression: .append
                        Object:
                          Variable: traits
                    Arguments:
                      Literal: "independent"
          IfStatement:
            Condition:
              BinaryExpression: and
                Left:
                  BinaryExpression: ==
                    Left:
                      MemberExpression: .species1
                        Object:
                          This
                    Operator: ==
                    Right:
                      Literal: "Dog"
                Operator: and
                Right:
                  BinaryExpression: ==
                    Left:
                      MemberExpression: .species2
                        Object:
                          This
                    Operator: ==
                    Right:
                      Literal: "Dog"
            Then:
              BlockStatement:
                ExpressionStatement:
                  CallExpression:
                    Callee:
                      MemberExpression: .append
                        Object:
                          Variable: traits
                    Arguments:
                      Literal: "loyal"
                ExpressionStatement:
                  CallExpression:
                    Callee:
                      MemberExpression: .append
                        Object:
                          Variable: traits
                    Arguments:
                      Literal: "energetic"
          IfStatement:
            Condition:
              BinaryExpression: and
                Left:
                  BinaryExpression: ==
                    Left:
                      MemberExpression: .species1
                        Object:
                          This
                    Operator: ==
                    Right:
                      Literal: "Lion"
                Operator: and
                Right:
                  BinaryExpression: ==
                    Left:
                      MemberExpression: .species2
                        Object:
                          This
                    Operator: ==
                    Right:
                      Literal: "Lion"
            Then:
              BlockStatement:
                ExpressionStatement:
                  CallExpression:
                    Callee:
                      MemberExpression: .append
                        Object:
                          Variable: traits
                    Arguments:
                      Literal: "strong"
                ExpressionStatement:
                  CallExpression:
                    Callee:
                      MemberExpression: .append
                        Object:
                          Variable: traits
                    Arguments:
                      Literal: "proud"
          ReturnStatement:
            Value:
              Variable: traits
    FunctionDeclaration: speak
      Body:
        BlockStatement:
          IfStatement:
            Condition:
              MemberExpression: .isValidHybrid
                Object:
                  This
            Then:
              BlockStatement:
                PrintStatement:
                  InterpolatedString:
                    String: ""
                    Expression:
                      MemberExpression: .name
                        Object:
                          This
                    Expression:
                      MemberExpression: .species1
                        Object:
                          This
                    Expression:
                      MemberExpression: .species2
                        Object:
                          This
                    String: " sound"
            Else:
              BlockStatement:
                PrintStatement:
                  InterpolatedString:
                    String: ""
                    Expression:
                      MemberExpression: .name
                        Object:
                          This
                    String: " makes an unusual hybrid sound that's hard to describe"
    FunctionDeclaration: getHybridInfo
      Body:
        BlockStatement:
          PrintStatement:
            InterpolatedString:
              String: ""
              Expression:
                MemberExpression: .name
                  Object:
                    This
              Expression:
                MemberExpression: .age
                  Object:
                    This
              Expression:
                MemberExpression: .species1
                  Object:
                    This
              Expression:
                MemberExpression: .species2
                  Object:
                    This
              String: "\"{self.name} is {self.age} years old and is a mix of {self.species1} and {self.species2}"
          PrintStatement:
            InterpolatedString:
              String: ""
              Expression:
                MemberExpression: .isValidHybrid
                  Object:
                    This
              String: "\"Valid hybrid: {self.isValidHybrid}"
          PrintStatement:
            InterpolatedString:
              String: ""
              Expression:
                CallExpression:
                  Callee:
                    MemberExpression: .join
                      Object:
                        MemberExpression: .traits
                          Object:
                            This
                  Arguments:
                    Literal: ", "
              String: "\"Traits: {self.traits.join(', ')}"
    FunctionDeclaration: displayTraits
      Body:
        BlockStatement:
          PrintStatement:
            InterpolatedString:
              String: ""
              Expression:
                MemberExpression: .name
                  Object:
                    This
              String: "'s traits:"
          IterStatement:
            Variables: traity
            Iterable:
              MemberExpression: .traits
                Object:
                  This
            Body:
              BlockStatement:
                PrintStatement:
                  InterpolatedString:
                    String: ""
                    Expression:
                      Variable: traity
                    String: "\"  - {traity}"
PrintStatement:
  Literal: "Inheritance test:"
VarDeclaration: dog
  Initializer:
    CallExpression:
      Callee:
        Variable: Dog
      Arguments:
        Literal: "Buddy"
        Literal: "Golden Retriever"
VarDeclaration: cat
  Initializer:
    CallExpression:
      Callee:
        Variable: Cat
      Arguments:
        Literal: "Whiskers"
VarDeclaration: smartDog
  Initializer:
    CallExpression:
      Callee:
        Variable: SmartDog
      Arguments:
        Literal: "Einstein"
        Literal: "Border Collie"
        Literal: 150
VarDeclaration: eagle
  Initializer:
    CallExpression:
      Callee:
        Variable: Bird
      Arguments:
        Literal: "Sky"
        Literal: "Bald Eagle"
        Literal: true
VarDeclaration: penguin
  Initializer:
    CallExpression:
      Callee:
        Variable: Bird
      Arguments:
        Literal: "Waddles"
        Literal: "Emperor Penguin"
        Literal: false
VarDeclaration: goldfish
  Initializer:
    CallExpression:
      Callee:
        Variable: Fish
      Arguments:
        Literal: "Bubbles"
        Literal: "fresh"
VarDeclaration: shark
  Initializer:
    CallExpression:
      Callee:
        Variable: Fish
      Arguments:
        Literal: "Bruce"
        Literal: "salt"
VarDeclaration: hybrid
  Initializer:
    CallExpression:
      Callee:
        Variable: HybridPet
      Arguments:
        Literal: "Unique"
        Literal: "Cat"
        Literal: "Dog"
        Literal: 3
PrintStatement:
  Literal: "Dog methods:"
ExpressionStatement:
  CallExpression:
    Callee:
      MemberExpression: .info
        Object:
          Variable: dog
ExpressionStatement:
  CallExpression:
    Callee:
      MemberExpression: .speak
        Object:
          Variable: dog
ExpressionStatement:
  CallExpression:
    Callee:
      MemberExpression: .wagTail
        Object:
          Variable: dog
PrintStatement:
  Literal: "Cat methods:"
ExpressionStatement:
  CallExpression:
    Callee:
      MemberExpression: .info
        Object:
          Variable: cat
ExpressionStatement:
  CallExpression:
    Callee:
      MemberExpression: .speak
        Object:
          Variable: cat
ExpressionStatement:
  CallExpression:
    Callee:
      MemberExpression: .purr
        Object:
          Variable: cat
PrintStatement:
  Literal: "Smart dog methods:"
ExpressionStatement:
  CallExpression:
    Callee:
      MemberExpression: .info
        Object:
          Variable: smartDog
ExpressionStatement:
  CallExpression:
    Callee:
      MemberExpression: .speak
        Object:
          Variable: smartDog
ExpressionStatement:
  CallExpression:
    Callee:
      MemberExpression: .solve
        Object:
          Variable: smartDog
    Arguments:
      Literal: "fetch puzzle"
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      CallExpression:
        Callee:
          MemberExpression: .getIQ
            Object:
              Variable: smartDog
    String: "\"Einstein's IQ: {smartDog.getIQ()}"
PrintStatement:
  Literal: "Bird methods:"
ExpressionStatement:
  CallExpression:
    Callee:
      MemberExpression: .info
        Object:
          Variable: eagle
ExpressionStatement:
  CallExpression:
    Callee:
      MemberExpression: .speak
        Object:
          Variable: eagle
ExpressionStatement:
  CallExpression:
    Callee:
      MemberExpression: .fly
        Object:
          Variable: eagle
ExpressionStatement:
  CallExpression:
    Callee:
      MemberExpression: .info
        Object:
          Variable: penguin
ExpressionStatement:
  CallExpression:
    Callee:
      MemberExpression: .speak
        Object:
          Variable: penguin
ExpressionStatement:
  CallExpression:
    Callee:
      MemberExpression: .fly
        Object:
          Variable: penguin
PrintStatement:
  Literal: "Fish methods:"
ExpressionStatement:
  CallExpression:
    Callee:
      MemberExpression: .info
        Object:
          Variable: goldfish
ExpressionStatement:
  CallExpression:
    Callee:
      MemberExpression: .speak
        Object:
          Variable: goldfish
ExpressionStatement:
  CallExpression:
    Callee:
      MemberExpression: .swim
        Object:
          Variable: goldfish
ExpressionStatement:
  CallExpression:
    Callee:
      MemberExpression: .info
        Object:
          Variable: shark
ExpressionStatement:
  CallExpression:
    Callee:
      MemberExpression: .speak
        Object:
          Variable: shark
ExpressionStatement:
  CallExpression:
    Callee:
      MemberExpression: .swim
        Object:
          Variable: shark
PrintStatement:
  Literal: "Hybrid pet methods:"
ExpressionStatement:
  CallExpression:
    Callee:
      MemberExpression: .info
        Object:
          Variable: hybrid
ExpressionStatement:
  CallExpression:
    Callee:
      MemberExpression: .speak
        Object:
          Variable: hybrid
ExpressionStatement:
  CallExpression:
    Callee:
      MemberExpression: .getHybridInfo
        Object:
          Variable: hybrid
PrintStatement:
  Literal: "Polymorphism test:"
VarDeclaration: animals
  Initializer:
    ListExpression: [8 elements]
      Variable: dog
      Variable: cat
      Variable: smartDog
      Variable: eagle
      Variable: penguin
      Variable: goldfish
      Variable: shark
      Variable: hybrid
IterStatement:
  Variables: animal
  Iterable:
    Variable: animals
  Body:
    BlockStatement:
      ExpressionStatement:
        CallExpression:
          Callee:
            MemberExpression: .speak
              Object:
                Variable: animal
PrintStatement:
  Literal: "Info polymorphism test:"
IterStatement:
  Variables: animal
  Iterable:
    Variable: animals
  Body:
    BlockStatement:
      ExpressionStatement:
        CallExpression:
          Callee:
            MemberExpression: .info
              Object:
                Variable: animal
ClassDeclaration: Shape
  Methods:
    FunctionDeclaration: area
      Body:
        BlockStatement:
          PrintStatement:
            Literal: "Must override area()"
    FunctionDeclaration: perimeter
      Body:
        BlockStatement:
          PrintStatement:
            Literal: "Must override perimeter()"
    FunctionDeclaration: describe
      Body:
        BlockStatement:
          PrintStatement:
            InterpolatedString:
              String: ""
              Expression:
                CallExpression:
                  Callee:
                    MemberExpression: .area
                      Object:
                        This
              Expression:
                CallExpression:
                  Callee:
                    MemberExpression: .perimeter
                      Object:
                        This
              String: "\"Shape with area {self.area()} and perimeter {self.perimeter()}"
ClassDeclaration: Circle : Shape (inline constructor: radius)
  Methods:
    FunctionDeclaration: area
      Body:
        BlockStatement:
          ReturnStatement:
            Value:
              BinaryExpression: *
                Left:
                  BinaryExpression: *
                    Left:
                      Literal: 3.14159
                    Operator: *
                    Right:
                      MemberExpression: .radius
                        Object:
                          This
                Operator: *
                Right:
                  MemberExpression: .radius
                    Object:
                      This
    FunctionDeclaration: perimeter
      Body:
        BlockStatement:
          ReturnStatement:
            Value:
              BinaryExpression: *
                Left:
                  BinaryExpression: *
                    Left:
                      Literal: 2
                    Operator: *
                    Right:
                      Literal: 3.14159
                Operator: *
                Right:
                  MemberExpression: .radius
                    Object:
                      This
    FunctionDeclaration: init
      Parameters:
        radius: float
      Body:
        BlockStatement:
          ExpressionStatement:
            CallExpression:
              Callee:
                MemberExpression: .init
                  Object:
                    Variable: super
          ExpressionStatement:
            Assignment: =
              Member: radius
              Object:
                MemberExpression: .radius
                  Object:
                    This
              Value:
              Variable: radius
ClassDeclaration: Rectangle : Shape (inline constructor: width, height)
  Methods:
    FunctionDeclaration: area
      Body:
        BlockStatement:
          ReturnStatement:
            Value:
              BinaryExpression: *
                Left:
                  MemberExpression: .width
                    Object:
                      This
                Operator: *
                Right:
                  MemberExpression: .height
                    Object:
                      This
    FunctionDeclaration: perimeter
      Body:
        BlockStatement:
          ReturnStatement:
            Value:
              BinaryExpression: *
                Left:
                  Literal: 2
                Operator: *
                Right:
                  Grouping:
                    BinaryExpression: +
                      Left:
                        MemberExpression: .width
                          Object:
                            This
                      Operator: +
                      Right:
                        MemberExpression: .height
                          Object:
                            This
    FunctionDeclaration: init
      Parameters:
        width: float
        height: float
      Body:
        BlockStatement:
          ExpressionStatement:
            CallExpression:
              Callee:
                MemberExpression: .init
                  Object:
                    Variable: super
          ExpressionStatement:
            Assignment: =
              Member: width
              Object:
                MemberExpression: .width
                  Object:
                    This
              Value:
              Variable: width
          ExpressionStatement:
            Assignment: =
              Member: height
              Object:
                MemberExpression: .height
                  Object:
                    This
              Value:
              Variable: height
ClassDeclaration: Triangle : Shape (inline constructor: base, height, side1, side2)
  Methods:
    FunctionDeclaration: area
      Body:
        BlockStatement:
          ReturnStatement:
            Value:
              BinaryExpression: *
                Left:
                  BinaryExpression: *
                    Left:
                      Literal: 0.5
                    Operator: *
                    Right:
                      MemberExpression: .base
                        Object:
                          This
                Operator: *
                Right:
                  MemberExpression: .height
                    Object:
                      This
    FunctionDeclaration: perimeter
      Body:
        BlockStatement:
          ReturnStatement:
            Value:
              BinaryExpression: +
                Left:
                  BinaryExpression: +
                    Left:
                      MemberExpression: .base
                        Object:
                          This
                    Operator: +
                    Right:
                      MemberExpression: .side1
                        Object:
                          This
                Operator: +
                Right:
                  MemberExpression: .side2
                    Object:
                      This
    FunctionDeclaration: init
      Parameters:
        base: float
        height: float
        side1: float
        side2: float
      Body:
        BlockStatement:
          ExpressionStatement:
            CallExpression:
              Callee:
                MemberExpression: .init
                  Object:
                    Variable: super
          ExpressionStatement:
            Assignment: =
              Member: base
              Object:
                MemberExpression: .base
                  Object:
                    This
              Value:
              Variable: base
          ExpressionStatement:
            Assignment: =
              Member: height
              Object:
                MemberExpression: .height
                  Object:
                    This
              Value:
              Variable: height
          ExpressionStatement:
            Assignment: =
              Member: side1
              Object:
                MemberExpression: .side1
                  Object:
                    This
              Value:
              Variable: side1
          ExpressionStatement:
            Assignment: =
              Member: side2
              Object:
                MemberExpression: .side2
                  Object:
                    This
              Value:
              Variable: side2
ClassDeclaration: Square : Shape (inline constructor: side)
  Methods:
    FunctionDeclaration: area
      Body:
        BlockStatement:
          ReturnStatement:
            Value:
              BinaryExpression: *
                Left:
                  MemberExpression: .side
                    Object:
                      This
                Operator: *
                Right:
                  MemberExpression: .side
                    Object:
                      This
    FunctionDeclaration: perimeter
      Body:
        BlockStatement:
          ReturnStatement:
            Value:
              BinaryExpression: *
                Left:
                  Literal: 4
                Operator: *
                Right:
                  MemberExpression: .side
                    Object:
                      This
    FunctionDeclaration: init
      Parameters:
        side: float
      Body:
        BlockStatement:
          ExpressionStatement:
            CallExpression:
              Callee:
                MemberExpression: .init
                  Object:
                    Variable: super
          ExpressionStatement:
            Assignment: =
              Member: side
              Object:
                MemberExpression: .side
                  Object:
                    This
              Value:
              Variable: side
ClassDeclaration: Ellipse : Shape (inline constructor: majorAxis, minorAxis)
  Methods:
    FunctionDeclaration: area
      Body:
        BlockStatement:
          IfStatement:
            Condition:
              BinaryExpression: and
                Left:
                  BinaryExpression: <=
                    Left:
                      MemberExpression: .majorAxis
                        Object:
                          This
                    Operator: <=
                    Right:
                      Literal: 0
                Operator: and
                Right:
                  BinaryExpression: <=
                    Left:
                      MemberExpression: .minorAxis
                        Object:
                          This
                    Operator: <=
                    Right:
                      Literal: 0
            Then:
              BlockStatement:
                PrintStatement:
                  Literal: "Axis lengths must be positive"
          ReturnStatement:
            Value:
              BinaryExpression: *
                Left:
                  BinaryExpression: *
                    Left:
                      Literal: 3.14159
                    Operator: *
                    Right:
                      MemberExpression: .majorAxis
                        Object:
                          This
                Operator: *
                Right:
                  MemberExpression: .minorAxis
                    Object:
                      This
    FunctionDeclaration: perimeter
      Body:
        BlockStatement:
          VarDeclaration: a
            Initializer:
              MemberExpression: .majorAxis
                Object:
                  This
          VarDeclaration: b
            Initializer:
              MemberExpression: .minorAxis
                Object:
                  This
          ReturnStatement:
            Value:
              BinaryExpression: *
                Left:
                  Literal: 3.14159
                Operator: *
                Right:
                  Grouping:
                    BinaryExpression: -
                      Left:
                        BinaryExpression: *
                          Left:
                            Literal: 3
                          Operator: *
                          Right:
                            Grouping:
                              BinaryExpression: +
                                Left:
                                  Variable: a
                                Operator: +
                                Right:
                                  Variable: b
                      Operator: -
                      Right:
                        CallExpression:
                          Callee:
                            Variable: sqrt
                          Arguments:
                            BinaryExpression: *
                              Left:
                                Grouping:
                                  BinaryExpression: +
                                    Left:
                                      BinaryExpression: *
                                        Left:
                                          Literal: 3
                                        Operator: *
                                        Right:
                                          Variable: a
                                    Operator: +
                                    Right:
                                      Variable: b
                              Operator: *
                              Right:
                                Grouping:
                                  BinaryExpression: +
                                    Left:
                                      Variable: a
                                    Operator: +
                                    Right:
                                      BinaryExpression: *
                                        Left:
                                          Literal: 3
                                        Operator: *
                                        Right:
                                          Variable: b
    FunctionDeclaration: getAxesRatio
      Body:
        BlockStatement:
          ReturnStatement:
            Value:
              BinaryExpression: /
                Left:
                  MemberExpression: .majorAxis
                    Object:
                      This
                Operator: /
                Right:
                  MemberExpression: .minorAxis
                    Object:
                      This
    FunctionDeclaration: init
      Parameters:
        majorAxis: float
        minorAxis: float
      Body:
        BlockStatement:
          ExpressionStatement:
            CallExpression:
              Callee:
                MemberExpression: .init
                  Object:
                    Variable: super
          ExpressionStatement:
            Assignment: =
              Member: majorAxis
              Object:
                MemberExpression: .majorAxis
                  Object:
                    This
              Value:
              Variable: majorAxis
          ExpressionStatement:
            Assignment: =
              Member: minorAxis
              Object:
                MemberExpression: .minorAxis
                  Object:
                    This
              Value:
              Variable: minorAxis
PrintStatement:
  Literal: "Shape polymorphism:"
VarDeclaration: shapes
  Initializer:
    ListExpression: [5 elements]
      CallExpression:
        Callee:
          Variable: Circle
        Arguments:
          Literal: 5
      CallExpression:
        Callee:
          Variable: Rectangle
        Arguments:
          Literal: 4
          Literal: 6
      CallExpression:
        Callee:
          Variable: Triangle
        Arguments:
          Literal: 6
          Literal: 4
          Literal: 5
          Literal: 5
      CallExpression:
        Callee:
          Variable: Square
        Arguments:
          Literal: 3
      CallExpression:
        Callee:
          Variable: Ellipse
        Arguments:
          Literal: 4
          Literal: 3
IterStatement:
  Variables: shape
  Iterable:
    Variable: shapes
  Body:
    BlockStatement:
      ExpressionStatement:
        CallExpression:
          Callee:
            MemberExpression: .describe
              Object:
                Variable: shape
PrintStatement:
  Literal: "Extended shape testing:"
VarDeclaration: ellipse
  Initializer:
    CallExpression:
      Callee:
        Variable: Ellipse
      Arguments:
        Literal: 8
        Literal: 6
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      CallExpression:
        Callee:
          MemberExpression: .getAxesRatio
            Object:
              Variable: ellipse
    String: "\"Ellipse axes ratio: {ellipse.getAxesRatio()}"
ClassDeclaration: ColoredShape : Shape (inline constructor: color)
  Methods:
    FunctionDeclaration: getColor
      Body:
        BlockStatement:
          ReturnStatement:
            Value:
              MemberExpression: .color
                Object:
                  This
    FunctionDeclaration: describe
      Body:
        BlockStatement:
          PrintStatement:
            InterpolatedString:
              String: ""
              Expression:
                MemberExpression: .color
                  Object:
                    This
              Expression:
                CallExpression:
                  Callee:
                    MemberExpression: .area
                      Object:
                        This
              Expression:
                CallExpression:
                  Callee:
                    MemberExpression: .perimeter
                      Object:
                        This
              String: "\"{self.color} shape with area {self.area()} and perimeter {self.perimeter()}"
    FunctionDeclaration: init
      Parameters:
        color: str
      Body:
        BlockStatement:
          ExpressionStatement:
            CallExpression:
              Callee:
                MemberExpression: .init
                  Object:
                    Variable: super
          ExpressionStatement:
            Assignment: =
              Member: color
              Object:
                MemberExpression: .color
                  Object:
                    This
              Value:
              Variable: color
ClassDeclaration: ColoredCircle : ColoredShape(arg0) (inline constructor: radius, color)
  Methods:
    FunctionDeclaration: area
      Body:
        BlockStatement:
          ReturnStatement:
            Value:
              BinaryExpression: *
                Left:
                  BinaryExpression: *
                    Left:
                      Literal: 3.14159
                    Operator: *
                    Right:
                      MemberExpression: .radius
                        Object:
                          This
                Operator: *
                Right:
                  MemberExpression: .radius
                    Object:
                      This
    FunctionDeclaration: perimeter
      Body:
        BlockStatement:
          ReturnStatement:
            Value:
              BinaryExpression: *
                Left:
                  BinaryExpression: *
                    Left:
                      Literal: 2
                    Operator: *
                    Right:
                      Literal: 3.14159
                Operator: *
                Right:
                  MemberExpression: .radius
                    Object:
                      This
    FunctionDeclaration: getRadius
      Body:
        BlockStatement:
          ReturnStatement:
            Value:
              MemberExpression: .radius
                Object:
                  This
    FunctionDeclaration: init
      Parameters:
        radius: float
        color: str
      Body:
        BlockStatement:
          ExpressionStatement:
            CallExpression:
              Callee:
                MemberExpression: .init
                  Object:
                    Variable: super
              Arguments:
                Variable: color
          ExpressionStatement:
            Assignment: =
              Member: radius
              Object:
                MemberExpression: .radius
                  Object:
                    This
              Value:
              Variable: radius
          ExpressionStatement:
            Assignment: =
              Member: color
              Object:
                MemberExpression: .color
                  Object:
                    This
              Value:
              Variable: color
PrintStatement:
  Literal: "Complex inheritance with inline constructors:"
VarDeclaration: redCircle
  Initializer:
    CallExpression:
      Callee:
        Variable: ColoredCircle
      Arguments:
        Literal: 3
        Literal: "red"
VarDeclaration: blueCircle
  Initializer:
    CallExpression:
      Callee:
        Variable: ColoredCircle
      Arguments:
        Literal: 7
        Literal: "blue"
ExpressionStatement:
  CallExpression:
    Callee:
      MemberExpression: .describe
        Object:
          Variable: redCircle
ExpressionStatement:
  CallExpression:
    Callee:
      MemberExpression: .describe
        Object:
          Variable: blueCircle
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      CallExpression:
        Callee:
          MemberExpression: .getRadius
            Object:
              Variable: redCircle
    String: "\"Red circle radius: {redCircle.getRadius()}"
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      CallExpression:
        Callee:
          MemberExpression: .getColor
            Object:
              Variable: blueCircle
    String: "\"Blue circle color: {blueCircle.getColor()}"
PrintStatement:
  Literal: "Final comprehensive polymorphism test:"
VarDeclaration: allShapes
  Initializer:
    ListExpression: [6 elements]
      CallExpression:
        Callee:
          Variable: Circle
        Arguments:
          Literal: 2
      CallExpression:
        Callee:
          Variable: Rectangle
        Arguments:
          Literal: 3
          Literal: 4
      CallExpression:
        Callee:
          Variable: Triangle
        Arguments:
          Literal: 5
          Literal: 3
          Literal: 4
          Literal: 4
      CallExpression:
        Callee:
          Variable: Square
        Arguments:
          Literal: 2.5
      Variable: redCircle
      Variable: blueCircle
IterStatement:
  Variables: shape
  Iterable:
    Variable: allShapes
  Body:
    BlockStatement:
      ExpressionStatement:
        CallExpression:
          Callee:
            MemberExpression: .describe
              Object:
                Variable: shape
PrintStatement:
  Literal: "=== Inline Constructor Testing Complete ==="
PrintStatement:
  Literal: "Successfully tested:"
PrintStatement:
  Literal: "- Simple inline constructors (Animal, Dog, Cat)"
PrintStatement:
  Literal: "- Complex inline constructors (Bird, Fish, HybridPet)"
PrintStatement:
  Literal: "- Multi-level inheritance (SmartDog, ColoredCircle)"
PrintStatement:
  Literal: "- Mixed parameter types (str, int, float, bool)"
PrintStatement:
  Literal: "- Polymorphism across all constructor types"
PrintStatement:
  Literal: "- Method overriding and super calls"
PrintStatement:
  Literal: "- Abstract-like base classes"

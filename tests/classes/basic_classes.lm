// Test basic class declarations (if implemented)
print("=== Basic Class Tests ===");

// Simple class definition
class Person {
    fn init(name, age) {
        self.name = name;
        self.age = age;
    }
    
    fn greet() {
        print("Hello, I'm {self.name} and I'm {self.age} years old");
    }
    
    fn birthday() {
        self.age += 1;
        print("{self.name} is now {self.age} years old");
    }
}

print("Creating Person objects:");
var person1 = Person("Alice", 25);
var person2 = Person("Bob", 30);

print("Calling methods:");
person1.greet();
person2.greet();

print("Birthday test:");
person1.birthday();
person1.greet();

// Class with properties
class Rectangle {
    var width:int = 0;
    var height:int = 0;

    fn init(width, height) {
        self.width = width;
        self.height = height;
    }
    
    fn area() {
        return self.width * self.height;
    }
    
    fn perimeter() {
        return 2 * (self.width + self.height);
    }
}

print("Rectangle class:");
var rect = Rectangle(5, 3);
print("Area: {rect.area()}");
print("Perimeter: {rect.perimeter()}");


// Test file for self keyword and member access

class BankAccount {
    var balance: float = 0.0;
    
    fn deposit(amount: float) : float {
        self.balance = self.balance + amount;
        return self.balance;
    }
    
    fn withdraw(amount: float) : float {
        if (amount > self.balance) {
            print("Insufficient funds!")
            return self.balance;
        }
        self.balance = self.balance - amount;
        return amount;
    }
}

// Test the BankAccount
fn test_bank_account() {
    var account = BankAccount()
    
    // Test deposit
    account.deposit(100.0)
    print("Balance after deposit: {account.balance}")  // Should be 100.0
    
    // Test withdraw
    var withdrawn = account.withdraw(30.0)
    print("Withdrawn: {withdrawn}")  // Should be 30.0
    print("Balance after withdrawal: {account.balance}")  // Should be 70.0
    
    // Test insufficient funds
    var failed_withdraw = account.withdraw(100.0)  // Should print "Insufficient funds!"
    print("Failed withdrawal: {failed_withdraw}")  // Should be 70.0 (unchanged)
}

test_bank_account()

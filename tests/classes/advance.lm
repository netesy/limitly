// Test class inheritance with refined syntax
print("=== Class Inheritance Tests ===")

class Animal {
    fn init(name: str) {
        self.name = name;
    }
    
    fn speak() {
        print("{self.name} makes a sound");
    }
    
    fn info() {
        print("Animal is {self.name}");
    }
}

print("Dog Class:")
// Derived class with super constructor call
class Dog(name: str, breed: str) : Animal(name) {
    fn speak() {
        print("{self.name} barks!");
    }
    
    fn wagTail() {
        print("{self.name} wags tail happily");
    }
    
    fn info() {
        print("Dog {self.name} is a {self.breed}");
    }
}

print("Cat Class:")

// Another derived class
class Cat(name: str) : Animal(name) {
    fn speak() {
        print("{self.name} meows");
    }
    
    fn purr() {
        print("{self.name} purrs contentedly");
    }
}

// Alternative syntax for more complex inheritance scenarios
class SmartDog(name: str, breed: str, iq: int) : Dog(name, breed) {
    fn speak() {
        super.speak();  // Call parent method
        print("Woof woof! (intelligently)");
    }
    
    fn solve(problem: str) {
        print("{self.name} solves: {problem}");
    }
    
    fn getIQ() {
        return self.iq;
    }
}

// Additional inline constructor examples for testing
class Bird(name: str, species: str, canFly: bool) : Animal(name) {
    fn speak() {
        print("{self.name} chirps melodiously");
    }
    
    fn fly() {
        if (self.canFly) {
            print("{self.name} soars through the sky");
        } else {
            print("{self.name} cannot fly but runs fast");
        }
    }
    
    fn info() {
        print("Bird {self.name} is a {self.species}");
    }
}

class Fish(name: str, waterType: str) : Animal(name) {
    fn speak() {
        print("{self.name} makes bubbles");
    }
    
    fn swim() {
        print("{self.name} swims gracefully in {self.waterType} water");
    }
    
    fn info() {
        print("Fish {self.name} lives in {self.waterType} water");
    }
}

// Hybrid pet class using explicit constructor for complex initialization
class HybridPet : Animal {
    var species1: str;
    var species2: str;
    var age: int;
    var isValidHybrid: bool;
    var traits: [str];
    
    fn init(name: str, species1: str, species2: str, age: int) {
        super.init(name);  // Call parent's implicit constructor
        
        // Validation logic
        if (age < 0 and age > 30) {
            //use print later
            print("Invalid age for hybrid pet: {age}");
        }
        
        // Check for valid species combinations
        if (species1 == species2) {
            print("Cannot create hybrid from same species: {species1}");
        }
        
        self.species1 = species1;
        self.species2 = species2;
        self.age = age;
        self.isValidHybrid = self.validateHybrid();
        self.traits = self.generateTraits();
        
        print("Created hybrid pet {self.name}: {self.species1}-{self.species2} mix");
        if (!self.isValidHybrid) {
            print("Warning: Unusual hybrid combination detected");
        }
    }
    
    fn validateHybrid() {
        // Simple validation - real hybrids are typically within animal families
        var validCombos = [
            ["Cat", "Lion"], ["Dog", "Wolf"], ["Horse", "Donkey"],
            ["Tiger", "Lion"], ["Cat", "Tiger"], ["Dog", "Fox"]
        ];
        
        iter (combo in validCombos) {
            if ((combo[0] == self.species1 or combo[1] == self.species2) and
                (combo[0] == self.species2 or combo[1] == self.species1)) {
                return true;
            }
        }
        return false;
    }
    
    fn generateTraits() {
        var traits = [];
        
        // Add traits based on species combination
        if (self.species1 == "Cat" and self.species2 == "Cat") {
            traits.append("agile");
            traits.append("independent");
        }
        if (self.species1 == "Dog" and self.species2 == "Dog") {
            traits.append("loyal");
            traits.append("energetic");
        }
        if (self.species1 == "Lion" and self.species2 == "Lion") {
            traits.append("strong");
            traits.append("proud");
        }
        
        return traits;
    }
    
    fn speak() {
        if (self.isValidHybrid) {
            print("{self.name} makes a unique {self.species1}-{self.species2} sound");
        } else {
            print("{self.name} makes an unusual hybrid sound that's hard to describe");
        }
    }
    
    fn getHybridInfo() {
        print("{self.name} is {self.age} years old and is a mix of {self.species1} and {self.species2}");
        print("Valid hybrid: {self.isValidHybrid}");
        print("Traits: {self.traits.join(', ')}");
    }
    
    fn displayTraits() {
        print("{self.name}'s traits:");
        iter (traity in self.traits) {
            print("  - {traity}");
        }
    }
}

print("Inheritance test:")
var dog = Dog("Buddy", "Golden Retriever");
print("Cat class constructor:");
var cat = Cat("Whiskers");
print("Smart Dog class constructor:");
var smartDog = SmartDog("Einstein", "Border Collie", 150);

// Test new inline constructor classes
var eagle = Bird("Sky", "Bald Eagle", true);
var penguin = Bird("Waddles", "Emperor Penguin", false);
var goldfish = Fish("Bubbles", "fresh");
var shark = Fish("Bruce", "salt");
var hybrid = HybridPet("Unique", "Cat", "Dog", 3);

print("Dog methods:")
dog.info();
dog.speak();
dog.wagTail();

print("Cat methods:")
cat.info();
cat.speak();
cat.purr();

print("Smart dog methods:");
smartDog.info();
smartDog.speak();
smartDog.solve("fetch puzzle");
print("Einstein's IQ: {smartDog.getIQ()}");

print("Bird methods:")
eagle.info();
eagle.speak();
eagle.fly();

penguin.info();
penguin.speak();
penguin.fly();

print("Fish methods:")
goldfish.info();
goldfish.speak();
goldfish.swim();

shark.info();
shark.speak();
shark.swim();

print("Hybrid pet methods:")
hybrid.info();
hybrid.speak();
hybrid.getHybridInfo();
// Option Type Tests
// Testing Option<T> as built-in union type with error handling compatibility

// Test 1: Basic Option type creation and usage
type Option = Some | None;

// Test 2: Option with different value types
type IntOption = Some | None;
type StringOption = Some | None;
type BoolOption = Some | None;

// Test 3: Structured Option variants
type Some = { kind: "Some", value: any };
type None = { kind: "None" };

// Test 4: Option type declarations with specific value types
var maybeNumber: IntOption;
var maybeText: StringOption;
var maybeFlag: BoolOption;

// Test 5: Option value creation (simulating createSome/createNone)
// These would be created by the TypeSystem methods in actual implementation
var someValue = Some { kind: "Some", value: 42 };
var noneValue = None { kind: "None" };

// Test 6: Pattern matching on Option types (basic syntax)
// This tests the requirement for explicit handling of Option variants
match (someValue) {
    Some(x) => print("Got value: " + x),
    None => print("No value")
}

match (noneValue) {
    Some(x) => print("Got value: " + x),
    None => print("No value")
}

// Test 7: Option with different value types
var someString = Some { kind: "Some", value: "hello" };
var someBoolean = Some { kind: "Some", value: true };

match (someString) {
    Some(s) => print("String value: " + s),
    None => print("No string")
}

match (someBoolean) {
    Some(b) => print("Boolean value: " + b),
    None => print("No boolean")
}

// Test 8: Nested Option types
type NestedOption = Some | None;
var nestedSome = Some { kind: "Some", value: Some { kind: "Some", value: 123 } };

match (nestedSome) {
    Some(inner) => {
        match (inner) {
            Some(value) => print("Nested value: " + value),
            None => print("Inner is None")
        }
    },
    None => print("Outer is None")
}

// Test 9: Option type safety - accessing value requires pattern matching
// This should demonstrate that direct field access is not allowed without checking

// Test 10: Option compatibility with error handling system
// These tests verify that Option types work with the error handling system's
// ok() and err() functions (when implemented)

print("Option type tests completed");
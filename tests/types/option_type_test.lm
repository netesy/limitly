// Test file for Option type functionality
// This tests the Option type as a built-in union type with error handling compatibility

// Test basic Option type usage
type IntOption = Some | None;

// Test creating Some values
var someValue = Some { kind: "Some", value: 42 };
print("Some value:", someValue);

// Test creating None values  
var noneValue = None { kind: "None" };
print("None value:", noneValue);

// Test pattern matching with Option types
match someValue {
    Some(x) => print("Got Some with value:", x),
    None => print("Got None")
}

match noneValue {
    Some(x) => print("Got Some with value:", x),
    None => print("Got None")
}

// Test Option type with different value types
type StringOption = Some | None;
var someString = Some { kind: "Some", value: "hello" };
var noneString = None { kind: "None" };

print("String Some:", someString);
print("String None:", noneString);

// Test error handling compatibility
// Option types should be compatible with the ? operator
func maybeGetValue(): IntOption {
    return Some { kind: "Some", value: 100 };
}

func maybeGetNone(): IntOption {
    return None { kind: "None" };
}

var result1 = maybeGetValue();
var result2 = maybeGetNone();

print("Function result 1:", result1);
print("Function result 2:", result2);
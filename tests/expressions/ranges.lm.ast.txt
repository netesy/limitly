AST for C:\Projects\limitly\tests\expressions\ranges.lm
Parser: New CSTParser (cst_parser.cpp)
Mode: CST with AST compatibility
Note: CST nodes were created internally with trivia preservation
      AST output shown below for compatibility testing
========================================

AST Dump:
==========
PrintStatement:
  Literal: "=== Range Expression Tests ==="
PrintStatement:
  Literal: "Range 1..5:"
IterStatement:
  Variables: i
  Iterable:
    RangeExpression:
      Start:
        Literal: 1
      End:
        Literal: 5
      Inclusive: true
  Body:
    BlockStatement:
      PrintStatement:
        Variable: i
PrintStatement:
  Literal: "Range 0..3:"
IterStatement:
  Variables: j
  Iterable:
    RangeExpression:
      Start:
        Literal: 0
      End:
        Literal: 3
      Inclusive: true
  Body:
    BlockStatement:
      PrintStatement:
        Variable: j
VarDeclaration: start
  Initializer:
    Literal: 5
VarDeclaration: end
  Initializer:
    Literal: 8
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      Variable: start
    Expression:
      Variable: end
    String: ":"
IterStatement:
  Variables: k
  Iterable:
    RangeExpression:
      Start:
        Variable: start
      End:
        Variable: end
      Inclusive: true
  Body:
    BlockStatement:
      PrintStatement:
        Variable: k
VarDeclaration: base
  Initializer:
    Literal: 2
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      Variable: base
    Expression:
      BinaryExpression: +
        Left:
          Variable: base
        Operator: +
        Right:
          Literal: 3
    String: ":"
IterStatement:
  Variables: x
  Iterable:
    RangeExpression:
      Start:
        Variable: base
      End:
        Grouping:
          BinaryExpression: +
            Left:
              Variable: base
            Operator: +
            Right:
              Literal: 3
      Inclusive: true
  Body:
    BlockStatement:
      PrintStatement:
        Variable: x
PrintStatement:
  Literal: "Nested ranges:"
IterStatement:
  Variables: i
  Iterable:
    RangeExpression:
      Start:
        Literal: 1
      End:
        Literal: 3
      Inclusive: true
  Body:
    BlockStatement:
      PrintStatement:
        InterpolatedString:
          String: ""
          Expression:
            Variable: i
          String: "\"Outer: {i}"
      IterStatement:
        Variables: j
        Iterable:
          RangeExpression:
            Start:
              Grouping:
                BinaryExpression: *
                  Left:
                    Variable: i
                  Operator: *
                  Right:
                    Literal: 10
            End:
              Grouping:
                BinaryExpression: +
                  Left:
                    BinaryExpression: *
                      Left:
                        Variable: i
                      Operator: *
                      Right:
                        Literal: 10
                  Operator: +
                  Right:
                    Literal: 2
            Inclusive: true
        Body:
          BlockStatement:
            PrintStatement:
              InterpolatedString:
                String: ""
                Expression:
                  Variable: j
                String: "\"  Inner: {j}"
PrintStatement:
  Literal: "Empty range (5..5):"
IterStatement:
  Variables: empty
  Iterable:
    RangeExpression:
      Start:
        Literal: 5
      End:
        Literal: 5
      Inclusive: true
  Body:
    BlockStatement:
      PrintStatement:
        InterpolatedString:
          String: ""
          Expression:
            Variable: empty
          String: "\"This should not print: {empty}"
PrintStatement:
  Literal: "Empty range test complete"

AST for C:\Projects\limitly\tests\expressions\scientific_notation.lm
Parser: New CSTParser (cst_parser.cpp)
Mode: CST with AST compatibility
Note: CST nodes were created internally with trivia preservation
      AST output shown below for compatibility testing
========================================

AST Dump:
==========
VarDeclaration: small
  Type: f64
  Initializer:
    Literal: 1.23e-1
VarDeclaration: large
  Type: f64
  Initializer:
    Literal: 4.56e+15
VarDeclaration: negative
  Type: f64
  Initializer:
    UnaryExpression: -
      Operand:
        Literal: 7.89e-05
PrintStatement:
  Literal: "Scientific notation test:"
PrintStatement:
  Literal: "Small:"
  Variable: small
PrintStatement:
  Literal: "Large:"
  Variable: large
PrintStatement:
  Literal: "Negative:"
  Variable: negative
VarDeclaration: capitalE
  Type: f64
  Initializer:
    Literal: 25
VarDeclaration: capitalENeg
  Type: f64
  Initializer:
    Literal: 0.00314
PrintStatement:
  Literal: "Capital E notation:"
PrintStatement:
  Literal: "Capital E positive:"
  Variable: capitalE
PrintStatement:
  Literal: "Capital E negative:"
  Variable: capitalENeg
VarDeclaration: intScientific
  Type: f64
  Initializer:
    Literal: 5
VarDeclaration: intScientificNeg
  Type: f64
  Initializer:
    Literal: 2e-06
PrintStatement:
  Literal: "Integer scientific notation:"
PrintStatement:
  Literal: "Int scientific:"
  Variable: intScientific
PrintStatement:
  Literal: "Int scientific negative:"
  Variable: intScientificNeg
VarDeclaration: zero
  Type: f64
  Initializer:
    Literal: 
VarDeclaration: one
  Type: f64
  Initializer:
    Literal: 1
PrintStatement:
  Literal: "Edge cases:"
PrintStatement:
  Literal: "Zero:"
  Variable: zero
PrintStatement:
  Literal: "One:"
  Variable: one
VarDeclaration: result
  Type: f64
  Initializer:
    BinaryExpression: +
      Left:
        Literal: 15
      Operator: +
      Right:
        Literal: 25
PrintStatement:
  Literal: "Expression result:"
  Variable: result

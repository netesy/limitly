// Comprehensive test for error handling bytecode operations

print("=== Testing Error Handling Opcodes ===");

// Test error handling syntax parsing

// Test 1: CONSTRUCT_ERROR opcode
print("Test 1: Error Construction");
var error1 = err(DivisionByZero);
var error2 = err(IndexOutOfBounds);
print("Error 1:", error1);
print("Error 2:", error2);

// Test 2: CONSTRUCT_OK opcode  
print("Test 2: Success Construction");
var success1 = ok(42);
var success2 = ok("Hello World");
print("Success 1:", success1);
print("Success 2:", success2);


// Function with fallible return type
fn divide(a: int, b: int): int?DivisionByZero {
    if (b == 0) {
        return err(DivisionByZero);
    }
    return ok(a / b);
}

// Function with multiple error types
fn parseAndDivide(s: str, divisor: int): int?ParseError, DivisionByZero {
    var num = parseInt(s)?;
    return divide(num, divisor)?;
}

// Using fallible expressions
var result = divide(10, 2)?;
print(result);

//var result2 = divide(10, 0)? errored 
//print("Division failed: #{errored}");

print("=== All Error Handling Opcodes Tested ===");
AST for tests/errors/basic.lm
========================================

AST Dump:
==========
PrintStatement:
  Literal: "=== Testing Error Handling Opcodes ==="
PrintStatement:
  Literal: "Test 1: Error Construction"
VarDeclaration: error1
  Initializer:
    ErrorConstruct: DivisionByZero
VarDeclaration: error2
  Initializer:
    ErrorConstruct: IndexOutOfBounds
PrintStatement:
  Literal: "Error 1:"
  Variable: error1
PrintStatement:
  Literal: "Error 2:"
  Variable: error2
PrintStatement:
  Literal: "Test 2: Success Construction"
VarDeclaration: success1
  Initializer:
    OkConstruct:
      Value:
        Literal: 42
VarDeclaration: success2
  Initializer:
    OkConstruct:
      Value:
        Literal: "Hello World"
PrintStatement:
  Literal: "Success 1:"
  Variable: success1
PrintStatement:
  Literal: "Success 2:"
  Variable: success2
FunctionDeclaration: divide
  Parameters:
    a: int
    b: int
  ReturnType: int
  Body:
    BlockStatement:
      IfStatement:
        Condition:
          BinaryExpression: ==
            Left:
              Variable: b
            Operator: ==
            Right:
              Literal: 0
        Then:
          BlockStatement:
            ReturnStatement:
              Value:
                ErrorConstruct: DivisionByZero
      ReturnStatement:
        Value:
          OkConstruct:
            Value:
              BinaryExpression: /
                Left:
                  Variable: a
                Operator: /
                Right:
                  Variable: b
FunctionDeclaration: parseAndDivide
  Parameters:
    s: str
    divisor: int
  ReturnType: int
  Body:
    BlockStatement:
      VarDeclaration: num
        Initializer:
          FallibleExpression:
            Expression:
              CallExpression:
                Callee:
                  Variable: parseInt
                Arguments:
                  Variable: s
      ReturnStatement:
        Value:
          FallibleExpression:
            Expression:
              CallExpression:
                Callee:
                  Variable: divide
                Arguments:
                  Variable: num
                  Variable: divisor
VarDeclaration: result
  Initializer:
    FallibleExpression:
      Expression:
        CallExpression:
          Callee:
            Variable: divide
          Arguments:
            Literal: 10
            Literal: 2
PrintStatement:
  Variable: result
VarDeclaration: result2
  Initializer:
    FallibleExpression:
      Expression:
        CallExpression:
          Callee:
            Variable: divide
          Arguments:
            Literal: 10
            Literal: 0
      ElseHandler:
        ErrorVariable: error
        BlockStatement:
          PrintStatement:
            InterpolatedString:
              String: "Division failed: #"
              Expression:
                Variable: error
          ReturnStatement
PrintStatement:
  Literal: "=== All Error Handling Opcodes Tested ==="

AST for C:\Projects\limitly\tests\errors\common.lm
Parser: New CSTParser (cst_parser.cpp)
Mode: CST with AST compatibility
Note: CST nodes were created internally with trivia preservation
      AST output shown below for compatibility testing
========================================

AST Dump:
==========
VarDeclaration: error_result
  Initializer:
    ErrorConstruct: DivisionByZero
PrintStatement:
  Literal: "Error result:"
  Variable: error_result
VarDeclaration: success_result
  Initializer:
    OkConstruct:
      Value:
        Literal: 42
PrintStatement:
  Literal: "Success result:"
  Variable: success_result
FunctionDeclaration: divide
  Parameters:
    a: int
    b: int
  ReturnType: int
  Body:
    BlockStatement:
      IfStatement:
        Condition:
          BinaryExpression: ==
            Left:
              Variable: b
            Operator: ==
            Right:
              Literal: 0
        Then:
          BlockStatement:
            ReturnStatement:
              Value:
                ErrorConstruct: DivisionByZero
      ReturnStatement:
        Value:
          OkConstruct:
            Value:
              BinaryExpression: /
                Left:
                  Variable: a
                Operator: /
                Right:
                  Variable: b
VarDeclaration: result
  Initializer:
    FallibleExpression:
      Expression:
        CallExpression:
          Callee:
            Variable: divide
          Arguments:
            Literal: 10
            Literal: 2
PrintStatement:
  Literal: "Division result:"
  Variable: result
FunctionDeclaration: safe_divide
  Parameters:
    a: int
    b: int
  ReturnType: int
  Body:
    BlockStatement:
      ReturnStatement:
        Value:
          FallibleExpression:
            Expression:
              CallExpression:
                Callee:
                  Variable: divide
                Arguments:
                  Variable: a
                  Variable: b
VarDeclaration: safe_result
  Initializer:
    FallibleExpression:
      Expression:
        CallExpression:
          Callee:
            Variable: safe_divide
          Arguments:
            Literal: 20
            Literal: 2
PrintStatement:
  Literal: "Safe division result:"
  Variable: safe_result
FunctionDeclaration: test_error_propagation
  Body:
    BlockStatement:
      VarDeclaration: result
        Initializer:
          FallibleExpression:
            Expression:
              CallExpression:
                Callee:
                  Variable: divide
                Arguments:
                  Literal: 10
                  Literal: 2
      PrintStatement:
        Literal: "Division result:"
        Variable: result
FunctionDeclaration: parse_number
  Parameters:
    n: int
  ReturnType: int?
  Body:
    BlockStatement:
      ReturnStatement:
        Value:
          OkConstruct:
            Value:
              Variable: n
FunctionDeclaration: test_error_handling
  Body:
    BlockStatement:
      VarDeclaration: result
        Initializer:
          FallibleExpression:
            Expression:
              CallExpression:
                Callee:
                  Variable: divide
                Arguments:
                  Literal: 10
                  Literal: 0
            ElseHandler:
              ErrorVariable: error
              BlockStatement:
                PrintStatement:
                  Literal: "Caught error:"
                  Variable: error
                ReturnStatement:
                  Value:
                    UnaryExpression: -
                      Operand:
                        Literal: 1
ExpressionStatement:
  CallExpression:
    Callee:
      Variable: test_error_propagation
ExpressionStatement:
  CallExpression:
    Callee:
      Variable: test_error_handling
VarDeclaration: safe_result
  Initializer:
    CallExpression:
      Callee:
        Variable: safe_divide
      Arguments:
        Literal: 20
        Literal: 0
PrintStatement:
  Literal: "Safe division result again :"
  Variable: safe_result

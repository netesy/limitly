// Concurrency smoke test - exercises atomics and simple tasks without channels
print("=== Concurrency Smoke Test ===");

// Atomic counter
var counter: atomic = 0;

// Start a simple concurrent block that increments the counter and prints values
concurrent(mode=batch, cores=2, on_error=Stop) {
    task() {
        // increment atomically
        counter += 1;
        print("Task 1 completed with counter value: {counter}");
    }
    task() {
        // increment atomically
        counter += 1;
        print("Task 2 completed with counter value: {counter}");
    }
    task() {
        // increment atomically
        counter += 1;
        print("Task 3 completed with counter value: {counter}");
    }
    task() {
        // increment atomically
        counter += 1;
        print("Task 4 completed with counter value: {counter}");
    }
}



var messages = channel();
var counters: atomic = 0;
concurrent(mode=batch, cores=Auto, on_error=Auto) {
    
    // Task statement for parallel execution
    task(i in 1..3) {
        counters += 1;
        print("Task {counters} running");
       // messages.send("Task {i} done");
    }
} // auto-close messages

// Process messages from parallel tasks
// iter (message in messages) {
//     print("Received: {message}");
// }

print("Waiting for tasks to complete...");
print("Final counter value: {counter}");
print("Smoke test finished");
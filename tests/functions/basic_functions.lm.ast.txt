AST for tests/functions/basic_functions.lm
Parser: New CSTParser (cst_parser.cpp)
Mode: CST with AST compatibility
Note: CST nodes were created internally with trivia preservation
      AST output shown below for compatibility testing
========================================

AST Dump:
==========
PrintStatement:
  Literal: "\"=== Basic Function Tests ===\""
FunctionDeclaration: add
  Parameters:
    a: int
    b: int
  ReturnType: int
  Body:
    BlockStatement:
      ReturnStatement:
        Value:
          BinaryExpression: +
            Left:
              Variable: a
            Operator: +
            Right:
              Variable: b
PrintStatement:
  Literal: "\"Function with parameters:\""
VarDeclaration: result
  Type: int
  Initializer:
    CallExpression:
      Callee:
        Variable: add
      Arguments:
        Literal: 5
        Literal: 3
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      Variable: result
    String: "\"add(5, 3) = {result}\""
FunctionDeclaration: square
  Parameters:
    x: int
  ReturnType: int
  Body:
    BlockStatement:
      ReturnStatement:
        Value:
          BinaryExpression: *
            Left:
              Variable: x
            Operator: *
            Right:
              Variable: x
PrintStatement:
  Literal: "\"Square function:\""
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      CallExpression:
        Callee:
          Variable: square
        Arguments:
          Literal: 4
    String: "\"square(4) = {square(4)}\""
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      CallExpression:
        Callee:
          Variable: square
        Arguments:
          Literal: 7
    String: "\"square(7) = {square(7)}\""
FunctionDeclaration: greet_name
  Parameters:
    name: str
  ReturnType: str
  Body:
    BlockStatement:
      PrintStatement:
        InterpolatedString:
          String: ""
          Expression:
            Variable: name
          String: "\"Hello, {name}!\""
      ReturnStatement:
        Value:
          Literal: "\"greeted\""
PrintStatement:
  Literal: "\"Function with string parameter:\""
ExpressionStatement:
  CallExpression:
    Callee:
      Variable: greet_name
    Arguments:
      Literal: "\"Alice\""
FunctionDeclaration: calculate
  Parameters:
    x: int
    y: int
  ReturnType: int
  Body:
    BlockStatement:
      VarDeclaration: sum
        Type: int
        Initializer:
          BinaryExpression: +
            Left:
              Variable: x
            Operator: +
            Right:
              Variable: y
      VarDeclaration: product
        Type: int
        Initializer:
          BinaryExpression: *
            Left:
              Variable: x
            Operator: *
            Right:
              Variable: y
      PrintStatement:
        InterpolatedString:
          String: ""
          Expression:
            Variable: sum
          Expression:
            Variable: product
          String: "\"Local calculations: sum={sum}, product={product}\""
      ReturnStatement:
        Value:
          BinaryExpression: *
            Left:
              Variable: sum
            Operator: *
            Right:
              Variable: product
PrintStatement:
  Literal: "\"Function with locals:\""
VarDeclaration: calc_result
  Type: int
  Initializer:
    CallExpression:
      Callee:
        Variable: calculate
      Arguments:
        Literal: 3
        Literal: 4
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      Variable: calc_result
    String: "\"Result: {calc_result}\""
FunctionDeclaration: factorial_main
  Parameters:
    n: int
  ReturnType: int
  Body:
    BlockStatement:
      IfStatement:
        Condition:
          BinaryExpression: <=
            Left:
              Variable: n
            Operator: <=
            Right:
              Literal: 1
        Then:
          BlockStatement:
            ReturnStatement:
              Value:
                Literal: 1
      ReturnStatement:
        Value:
          BinaryExpression: *
            Left:
              Variable: n
            Operator: *
            Right:
              CallExpression:
                Callee:
                  Variable: factorial_main
                Arguments:
                  BinaryExpression: -
                    Left:
                      Variable: n
                    Operator: -
                    Right:
                      Literal: 1
PrintStatement:
  Literal: "\"Recursive function:\""
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      CallExpression:
        Callee:
          Variable: factorial_main
        Arguments:
          Literal: 5
    String: "\"factorial(5) = {factorial_main(5)}\""
FunctionDeclaration: subtract
  Parameters:
    a: int
    b: int
  ReturnType: int
  Body:
    BlockStatement:
      ReturnStatement:
        Value:
          BinaryExpression: -
            Left:
              Variable: a
            Operator: -
            Right:
              Variable: b
FunctionDeclaration: factorial
  Parameters:
    n: int
  ReturnType: int
  Body:
    BlockStatement:
      IfStatement:
        Condition:
          BinaryExpression: <=
            Left:
              Variable: n
            Operator: <=
            Right:
              Literal: 1
        Then:
          BlockStatement:
            ReturnStatement:
              Value:
                Literal: 1
      ReturnStatement:
        Value:
          BinaryExpression: *
            Left:
              Variable: n
            Operator: *
            Right:
              CallExpression:
                Callee:
                  Variable: factorial
                Arguments:
                  BinaryExpression: -
                    Left:
                      Variable: n
                    Operator: -
                    Right:
                      Literal: 1
FunctionDeclaration: is_even
  Parameters:
    n: int
  ReturnType: bool
  Body:
    BlockStatement:
      ReturnStatement:
        Value:
          BinaryExpression: ==
            Left:
              BinaryExpression: %
                Left:
                  Variable: n
                Operator: %
                Right:
                  Literal: 2
            Operator: ==
            Right:
              Literal: 0
FunctionDeclaration: is_odd
  Parameters:
    n: int
  ReturnType: bool
  Body:
    BlockStatement:
      ReturnStatement:
        Value:
          UnaryExpression: !
            Operand:
              CallExpression:
                Callee:
                  Variable: is_even
                Arguments:
                  Variable: n
FunctionDeclaration: is_prime
  Parameters:
    n: int
  ReturnType: bool
  Body:
    BlockStatement:
      IfStatement:
        Condition:
          BinaryExpression: <=
            Left:
              Variable: n
            Operator: <=
            Right:
              Literal: 1
        Then:
          BlockStatement:
            ReturnStatement:
              Value:
                Literal: false
      IfStatement:
        Condition:
          BinaryExpression: ==
            Left:
              Variable: n
            Operator: ==
            Right:
              Literal: 2
        Then:
          BlockStatement:
            ReturnStatement:
              Value:
                Literal: true
      IfStatement:
        Condition:
          CallExpression:
            Callee:
              Variable: is_even
            Arguments:
              Variable: n
        Then:
          BlockStatement:
            ReturnStatement:
              Value:
                Literal: false
      VarDeclaration: i
        Type: int
        Initializer:
          Literal: 3
      WhileStatement:
        Condition:
          BinaryExpression: <=
            Left:
              BinaryExpression: *
                Left:
                  Variable: i
                Operator: *
                Right:
                  Variable: i
            Operator: <=
            Right:
              Variable: n
        Body:
          BlockStatement:
            IfStatement:
              Condition:
                BinaryExpression: ==
                  Left:
                    BinaryExpression: %
                      Left:
                        Variable: n
                      Operator: %
                      Right:
                        Variable: i
                  Operator: ==
                  Right:
                    Literal: 0
              Then:
                BlockStatement:
                  ReturnStatement:
                    Value:
                      Literal: false
            ExpressionStatement:
              Assignment: +=
                Target: i
                Value:
                Literal: 2
      ReturnStatement:
        Value:
          Literal: true
PrintStatement:
  Literal: "\"Additional function tests:\""
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      CallExpression:
        Callee:
          Variable: subtract
        Arguments:
          Literal: 10
          Literal: 3
    String: "\"subtract(10, 3) = {subtract(10, 3)}\""
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      CallExpression:
        Callee:
          Variable: factorial
        Arguments:
          Literal: 4
    String: "\"factorial(4) = {factorial(4)}\""
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      CallExpression:
        Callee:
          Variable: is_even
        Arguments:
          Literal: 6
    String: "\"is_even(6) = {is_even(6)}\""
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      CallExpression:
        Callee:
          Variable: is_odd
        Arguments:
          Literal: 7
    String: "\"is_odd(7) = {is_odd(7)}\""
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      CallExpression:
        Callee:
          Variable: is_prime
        Arguments:
          Literal: 17
    String: "\"is_prime(17) = {is_prime(17)}\""
PrintStatement:
  Literal: "\"=== Optional Parameter Tests ===\""
FunctionDeclaration: greet_optional
  Parameters:
    name (optional): str?
  ReturnType: str
  Body:
    BlockStatement:
      IfStatement:
        Condition:
          Variable: name
        Then:
          BlockStatement:
            PrintStatement:
              InterpolatedString:
                String: ""
                Expression:
                  Variable: name
                String: "\"Hello, {name}!\""
            ReturnStatement:
              Value:
                InterpolatedString:
                  String: ""
                  Expression:
                    Variable: name
                  String: "\"greeted {name}\""
        Else:
          BlockStatement:
            PrintStatement:
              Literal: "\"Hello, stranger!\""
            ReturnStatement:
              Value:
                Literal: "\"greeted stranger\""
PrintStatement:
  Literal: "\"Testing optional parameter:\""
ExpressionStatement:
  CallExpression:
    Callee:
      Variable: greet_optional
    Arguments:
      Literal: "\"Bob\""
ExpressionStatement:
  CallExpression:
    Callee:
      Variable: greet_optional
FunctionDeclaration: create_user
  Parameters:
    username: str
    email (optional): str?
    age (optional): int?
  ReturnType: str
  Body:
    BlockStatement:
      PrintStatement:
        InterpolatedString:
          String: ""
          Expression:
            Variable: username
          String: "\"Creating user: {username}\""
      IfStatement:
        Condition:
          Variable: email
        Then:
          BlockStatement:
            PrintStatement:
              InterpolatedString:
                String: ""
                Expression:
                  Variable: email
                String: "\"Email: {email}\""
      IfStatement:
        Condition:
          Variable: age
        Then:
          BlockStatement:
            PrintStatement:
              InterpolatedString:
                String: ""
                Expression:
                  Variable: age
                String: "\"Age: {age}\""
      ReturnStatement:
        Value:
          Literal: "\"user created\""
PrintStatement:
  Literal: "\"Testing multiple optional parameters:\""
ExpressionStatement:
  CallExpression:
    Callee:
      Variable: create_user
    Arguments:
      Literal: "\"alice\""
ExpressionStatement:
  CallExpression:
    Callee:
      Variable: create_user
    Arguments:
      Literal: "\"bob\""
      Literal: "\"bob@email.com\""
ExpressionStatement:
  CallExpression:
    Callee:
      Variable: create_user
    Arguments:
      Literal: "\"charlie\""
      Literal: "\"charlie@email.com\""
      Literal: 25
FunctionDeclaration: power
  Parameters:
    base: int
    exponent (optional): int?
  ReturnType: int
  Body:
    BlockStatement:
      IfStatement:
        Condition:
          Variable: exponent
        Then:
          BlockStatement:
            VarDeclaration: result
              Type: int
              Initializer:
                Literal: 1
            VarDeclaration: i
              Type: int
              Initializer:
                Literal: 0
            WhileStatement:
              Condition:
                BinaryExpression: <
                  Left:
                    Variable: i
                  Operator: <
                  Right:
                    Variable: exponent
              Body:
                BlockStatement:
                  ExpressionStatement:
                    Assignment: *=
                      Target: result
                      Value:
                      Variable: base
                  ExpressionStatement:
                    Assignment: +=
                      Target: i
                      Value:
                      Literal: 1
            ReturnStatement:
              Value:
                Variable: result
        Else:
          BlockStatement:
            ReturnStatement:
              Value:
                BinaryExpression: *
                  Left:
                    Variable: base
                  Operator: *
                  Right:
                    Variable: base
PrintStatement:
  Literal: "\"Testing optional math parameter:\""
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      CallExpression:
        Callee:
          Variable: power
        Arguments:
          Literal: 3
    String: "\"power(3) = {power(3)}\""
PrintStatement:
  InterpolatedString:
    String: ""
    Expression:
      CallExpression:
        Callee:
          Variable: power
        Arguments:
          Literal: 3
          Literal: 4
    String: "\"power(3, 4) = {power(3, 4)}\""
PrintStatement:
  Literal: "\"=== Default Parameter Tests ===\""
FunctionDeclaration: greet_default
  Parameters:
    name (optional): str
      Default value:
      Literal: "\"World\""
  ReturnType: str
  Body:
    BlockStatement:
      PrintStatement:
        InterpolatedString:
          String: ""
          Expression:
            Variable: name
          String: "\"Hello, {name}!\""
      ReturnStatement:
        Value:
          InterpolatedString:
            String: ""
            Expression:
              Variable: name
            String: "\"greeted {name}\""
PrintStatement:
  Literal: "\"Testing default parameter:\""
ExpressionStatement:
  CallExpression:
    Callee:
      Variable: greet_default
ExpressionStatement:
  CallExpression:
    Callee:
      Variable: greet_default
    Arguments:
      Literal: "\"Alice\""

Bytecode for C:\Projects\limitly\tests\functions\basic_functions.lm
Parser: New CSTParser
========================================

=== Bytecode ===
Generated 539 instructions

   0: PUSH_STRING          "=== Basic Function Tests ==="
   1: PRINT               
   2: BEGIN_FUNCTION       "add"
   3: DEFINE_PARAM        
   4: DEFINE_PARAM        
   5: BEGIN_SCOPE         
   6: LOAD_VAR             "a"
   7: LOAD_VAR             "b"
   8: ADD                 
   9: RETURN              
  10: END_SCOPE           
  11: PUSH_NULL           
  12: RETURN              
  13: END_FUNCTION        
  14: PUSH_FUNCTION       
  15: STORE_VAR            "add"
  16: PUSH_STRING          "Function with parameters:"
  17: PRINT               
  18: PUSH_INT             5
  19: PUSH_INT             3
  20: CALL                 "add"
  21: STORE_VAR            "result"
  22: PUSH_STRING         
  23: LOAD_VAR             "result"
  24: PUSH_STRING         
  25: CONCAT              
  26: PUSH_STRING          ""add(5, 3) = {result}"
  27: INTERPOLATE_STRING  
  28: PRINT               
  29: BEGIN_FUNCTION       "square"
  30: DEFINE_PARAM        
  31: BEGIN_SCOPE         
  32: LOAD_VAR             "x"
  33: LOAD_VAR             "x"
  34: MULTIPLY            
  35: RETURN              
  36: END_SCOPE           
  37: PUSH_NULL           
  38: RETURN              
  39: END_FUNCTION        
  40: PUSH_FUNCTION       
  41: STORE_VAR            "square"
  42: PUSH_STRING          "Square function:"
  43: PRINT               
  44: PUSH_STRING         
  45: PUSH_INT             4
  46: CALL                 "square"
  47: PUSH_STRING         
  48: CONCAT              
  49: PUSH_STRING          ""square(4) = {square(4)}"
  50: INTERPOLATE_STRING  
  51: PRINT               
  52: PUSH_STRING         
  53: PUSH_INT             7
  54: CALL                 "square"
  55: PUSH_STRING         
  56: CONCAT              
  57: PUSH_STRING          ""square(7) = {square(7)}"
  58: INTERPOLATE_STRING  
  59: PRINT               
  60: BEGIN_FUNCTION       "greet_name"
  61: DEFINE_PARAM        
  62: BEGIN_SCOPE         
  63: PUSH_STRING         
  64: LOAD_VAR             "name"
  65: PUSH_STRING         
  66: CONCAT              
  67: PUSH_STRING          "!"
  68: INTERPOLATE_STRING  
  69: PRINT               
  70: PUSH_STRING          "greeted"
  71: RETURN              
  72: END_SCOPE           
  73: PUSH_NULL           
  74: RETURN              
  75: END_FUNCTION        
  76: PUSH_FUNCTION       
  77: STORE_VAR            "greet_name"
  78: PUSH_STRING          "Function with string parameter:"
  79: PRINT               
  80: PUSH_STRING          "Alice"
  81: CALL                 "greet_name"
  82: POP                 
  83: BEGIN_FUNCTION       "calculate"
  84: DEFINE_PARAM        
  85: DEFINE_PARAM        
  86: BEGIN_SCOPE         
  87: LOAD_VAR             "x"
  88: LOAD_VAR             "y"
  89: ADD                 
  90: STORE_VAR            "sum"
  91: LOAD_VAR             "x"
  92: LOAD_VAR             "y"
  93: MULTIPLY            
  94: STORE_VAR            "product"
  95: PUSH_STRING         
  96: LOAD_VAR             "sum"
  97: PUSH_STRING         
  98: CONCAT              
  99: LOAD_VAR             "product"
 100: PUSH_STRING         
 101: CONCAT              
 102: PUSH_STRING          ""Local calculations: sum={sum}, product={product}"
 103: INTERPOLATE_STRING  
 104: PRINT               
 105: LOAD_VAR             "sum"
 106: LOAD_VAR             "product"
 107: MULTIPLY            
 108: RETURN              
 109: END_SCOPE           
 110: PUSH_NULL           
 111: RETURN              
 112: END_FUNCTION        
 113: PUSH_FUNCTION       
 114: STORE_VAR            "calculate"
 115: PUSH_STRING          "Function with locals:"
 116: PRINT               
 117: PUSH_INT             3
 118: PUSH_INT             4
 119: CALL                 "calculate"
 120: STORE_VAR            "calc_result"
 121: PUSH_STRING         
 122: LOAD_VAR             "calc_result"
 123: PUSH_STRING         
 124: CONCAT              
 125: PUSH_STRING          ""Result: {calc_result}"
 126: INTERPOLATE_STRING  
 127: PRINT               
 128: BEGIN_FUNCTION       "factorial_main"
 129: DEFINE_PARAM        
 130: BEGIN_SCOPE         
 131: LOAD_VAR             "n"
 132: PUSH_INT             1
 133: LESS_EQUAL          
 134: JUMP_IF_FALSE        5
 135: BEGIN_SCOPE         
 136: PUSH_INT             1
 137: RETURN              
 138: END_SCOPE           
 139: JUMP                 0
 140: LOAD_VAR             "n"
 141: LOAD_VAR             "n"
 142: PUSH_INT             1
 143: SUBTRACT            
 144: CALL                 "factorial_main"
 145: MULTIPLY            
 146: RETURN              
 147: END_SCOPE           
 148: PUSH_NULL           
 149: RETURN              
 150: END_FUNCTION        
 151: PUSH_FUNCTION       
 152: STORE_VAR            "factorial_main"
 153: PUSH_STRING          "Recursive function:"
 154: PRINT               
 155: PUSH_STRING         
 156: PUSH_INT             5
 157: CALL                 "factorial_main"
 158: PUSH_STRING         
 159: CONCAT              
 160: PUSH_STRING          ""factorial(5) = {factorial_main(5)}"
 161: INTERPOLATE_STRING  
 162: PRINT               
 163: BEGIN_FUNCTION       "subtract"
 164: DEFINE_PARAM        
 165: DEFINE_PARAM        
 166: BEGIN_SCOPE         
 167: LOAD_VAR             "a"
 168: LOAD_VAR             "b"
 169: SUBTRACT            
 170: RETURN              
 171: END_SCOPE           
 172: PUSH_NULL           
 173: RETURN              
 174: END_FUNCTION        
 175: PUSH_FUNCTION       
 176: STORE_VAR            "subtract"
 177: BEGIN_FUNCTION       "factorial"
 178: DEFINE_PARAM        
 179: BEGIN_SCOPE         
 180: LOAD_VAR             "n"
 181: PUSH_INT             1
 182: LESS_EQUAL          
 183: JUMP_IF_FALSE        5
 184: BEGIN_SCOPE         
 185: PUSH_INT             1
 186: RETURN              
 187: END_SCOPE           
 188: JUMP                 0
 189: LOAD_VAR             "n"
 190: LOAD_VAR             "n"
 191: PUSH_INT             1
 192: SUBTRACT            
 193: CALL                 "factorial"
 194: MULTIPLY            
 195: RETURN              
 196: END_SCOPE           
 197: PUSH_NULL           
 198: RETURN              
 199: END_FUNCTION        
 200: PUSH_FUNCTION       
 201: STORE_VAR            "factorial"
 202: BEGIN_FUNCTION       "is_even"
 203: DEFINE_PARAM        
 204: BEGIN_SCOPE         
 205: LOAD_VAR             "n"
 206: PUSH_INT             2
 207: MODULO              
 208: PUSH_INT             0
 209: EQUAL               
 210: RETURN              
 211: END_SCOPE           
 212: PUSH_NULL           
 213: RETURN              
 214: END_FUNCTION        
 215: PUSH_FUNCTION       
 216: STORE_VAR            "is_even"
 217: BEGIN_FUNCTION       "is_odd"
 218: DEFINE_PARAM        
 219: BEGIN_SCOPE         
 220: LOAD_VAR             "n"
 221: CALL                 "is_even"
 222: NOT                 
 223: RETURN              
 224: END_SCOPE           
 225: PUSH_NULL           
 226: RETURN              
 227: END_FUNCTION        
 228: PUSH_FUNCTION       
 229: STORE_VAR            "is_odd"
 230: BEGIN_FUNCTION       "is_prime"
 231: DEFINE_PARAM        
 232: BEGIN_SCOPE         
 233: LOAD_VAR             "n"
 234: PUSH_INT             1
 235: LESS_EQUAL          
 236: JUMP_IF_FALSE        5
 237: BEGIN_SCOPE         
 238: PUSH_BOOL            false
 239: RETURN              
 240: END_SCOPE           
 241: JUMP                 0
 242: LOAD_VAR             "n"
 243: PUSH_INT             2
 244: EQUAL               
 245: JUMP_IF_FALSE        5
 246: BEGIN_SCOPE         
 247: PUSH_BOOL            true
 248: RETURN              
 249: END_SCOPE           
 250: JUMP                 0
 251: LOAD_VAR             "n"
 252: CALL                 "is_even"
 253: JUMP_IF_FALSE        5
 254: BEGIN_SCOPE         
 255: PUSH_BOOL            false
 256: RETURN              
 257: END_SCOPE           
 258: JUMP                 0
 259: PUSH_INT             3
 260: STORE_VAR            "i"
 261: LOAD_VAR             "i"
 262: LOAD_VAR             "i"
 263: MULTIPLY            
 264: LOAD_VAR             "n"
 265: LESS_EQUAL          
 266: JUMP_IF_FALSE        20
 267: BEGIN_SCOPE         
 268: LOAD_VAR             "n"
 269: LOAD_VAR             "i"
 270: MODULO              
 271: PUSH_INT             0
 272: EQUAL               
 273: JUMP_IF_FALSE        5
 274: BEGIN_SCOPE         
 275: PUSH_BOOL            false
 276: RETURN              
 277: END_SCOPE           
 278: JUMP                 0
 279: LOAD_VAR             "i"
 280: PUSH_INT             2
 281: ADD                 
 282: DUP                 
 283: STORE_VAR            "i"
 284: POP                 
 285: END_SCOPE           
 286: JUMP                 -26
 287: PUSH_BOOL            true
 288: RETURN              
 289: END_SCOPE           
 290: PUSH_NULL           
 291: RETURN              
 292: END_FUNCTION        
 293: PUSH_FUNCTION       
 294: STORE_VAR            "is_prime"
 295: PUSH_STRING          "Additional function tests:"
 296: PRINT               
 297: PUSH_STRING         
 298: PUSH_INT             10
 299: PUSH_INT             3
 300: CALL                 "subtract"
 301: PUSH_STRING         
 302: CONCAT              
 303: PUSH_STRING          ""subtract(10, 3) = {subtract(10, 3)}"
 304: INTERPOLATE_STRING  
 305: PRINT               
 306: PUSH_STRING         
 307: PUSH_INT             4
 308: CALL                 "factorial"
 309: PUSH_STRING         
 310: CONCAT              
 311: PUSH_STRING          ""factorial(4) = {factorial(4)}"
 312: INTERPOLATE_STRING  
 313: PRINT               
 314: PUSH_STRING         
 315: PUSH_INT             6
 316: CALL                 "is_even"
 317: PUSH_STRING         
 318: CONCAT              
 319: PUSH_STRING          ""is_even(6) = {is_even(6)}"
 320: INTERPOLATE_STRING  
 321: PRINT               
 322: PUSH_STRING         
 323: PUSH_INT             7
 324: CALL                 "is_odd"
 325: PUSH_STRING         
 326: CONCAT              
 327: PUSH_STRING          ""is_odd(7) = {is_odd(7)}"
 328: INTERPOLATE_STRING  
 329: PRINT               
 330: PUSH_STRING         
 331: PUSH_INT             17
 332: CALL                 "is_prime"
 333: PUSH_STRING         
 334: CONCAT              
 335: PUSH_STRING          ""is_prime(17) = {is_prime(17)}"
 336: INTERPOLATE_STRING  
 337: PRINT               
 338: PUSH_STRING          "=== Optional Parameter Tests ==="
 339: PRINT               
 340: BEGIN_FUNCTION       "greet_optional"
 341: DEFINE_OPTIONAL_PARAM
 342: BEGIN_SCOPE         
 343: LOAD_VAR             "name"
 344: JUMP_IF_FALSE        17
 345: BEGIN_SCOPE         
 346: PUSH_STRING         
 347: LOAD_VAR             "name"
 348: PUSH_STRING         
 349: CONCAT              
 350: PUSH_STRING          "!"
 351: INTERPOLATE_STRING  
 352: PRINT               
 353: PUSH_STRING         
 354: LOAD_VAR             "name"
 355: PUSH_STRING         
 356: CONCAT              
 357: PUSH_STRING          ""greeted {name}"
 358: INTERPOLATE_STRING  
 359: RETURN              
 360: END_SCOPE           
 361: JUMP                 6
 362: BEGIN_SCOPE         
 363: PUSH_STRING          "Hello, stranger!"
 364: PRINT               
 365: PUSH_STRING          "greeted stranger"
 366: RETURN              
 367: END_SCOPE           
 368: END_SCOPE           
 369: PUSH_NULL           
 370: RETURN              
 371: END_FUNCTION        
 372: PUSH_FUNCTION       
 373: STORE_VAR            "greet_optional"
 374: PUSH_STRING          "Testing optional parameter:"
 375: PRINT               
 376: PUSH_STRING          "Bob"
 377: CALL                 "greet_optional"
 378: POP                 
 379: CALL                 "greet_optional"
 380: POP                 
 381: BEGIN_FUNCTION       "create_user"
 382: DEFINE_PARAM        
 383: DEFINE_OPTIONAL_PARAM
 384: DEFINE_OPTIONAL_PARAM
 385: BEGIN_SCOPE         
 386: PUSH_STRING         
 387: LOAD_VAR             "username"
 388: PUSH_STRING         
 389: CONCAT              
 390: PUSH_STRING          ""Creating user: {username}"
 391: INTERPOLATE_STRING  
 392: PRINT               
 393: LOAD_VAR             "email"
 394: JUMP_IF_FALSE        10
 395: BEGIN_SCOPE         
 396: PUSH_STRING         
 397: LOAD_VAR             "email"
 398: PUSH_STRING         
 399: CONCAT              
 400: PUSH_STRING          ""Email: {email}"
 401: INTERPOLATE_STRING  
 402: PRINT               
 403: END_SCOPE           
 404: JUMP                 0
 405: LOAD_VAR             "age"
 406: JUMP_IF_FALSE        10
 407: BEGIN_SCOPE         
 408: PUSH_STRING         
 409: LOAD_VAR             "age"
 410: PUSH_STRING         
 411: CONCAT              
 412: PUSH_STRING          ""Age: {age}"
 413: INTERPOLATE_STRING  
 414: PRINT               
 415: END_SCOPE           
 416: JUMP                 0
 417: PUSH_STRING          "user created"
 418: RETURN              
 419: END_SCOPE           
 420: PUSH_NULL           
 421: RETURN              
 422: END_FUNCTION        
 423: PUSH_FUNCTION       
 424: STORE_VAR            "create_user"
 425: PUSH_STRING          "Testing multiple optional parameters:"
 426: PRINT               
 427: PUSH_STRING          "alice"
 428: CALL                 "create_user"
 429: POP                 
 430: PUSH_STRING          "bob"
 431: PUSH_STRING          "bob@email.com"
 432: CALL                 "create_user"
 433: POP                 
 434: PUSH_STRING          "charlie"
 435: PUSH_STRING          "charlie@email.com"
 436: PUSH_INT             25
 437: CALL                 "create_user"
 438: POP                 
 439: BEGIN_FUNCTION       "power"
 440: DEFINE_PARAM        
 441: DEFINE_OPTIONAL_PARAM
 442: BEGIN_SCOPE         
 443: LOAD_VAR             "exponent"
 444: JUMP_IF_FALSE        28
 445: BEGIN_SCOPE         
 446: PUSH_INT             1
 447: STORE_VAR            "result"
 448: PUSH_INT             0
 449: STORE_VAR            "i"
 450: LOAD_VAR             "i"
 451: LOAD_VAR             "exponent"
 452: LESS                
 453: JUMP_IF_FALSE        15
 454: BEGIN_SCOPE         
 455: LOAD_VAR             "result"
 456: LOAD_VAR             "base"
 457: MULTIPLY            
 458: DUP                 
 459: STORE_VAR            "result"
 460: POP                 
 461: LOAD_VAR             "i"
 462: PUSH_INT             1
 463: ADD                 
 464: DUP                 
 465: STORE_VAR            "i"
 466: POP                 
 467: END_SCOPE           
 468: JUMP                 -19
 469: LOAD_VAR             "result"
 470: RETURN              
 471: END_SCOPE           
 472: JUMP                 6
 473: BEGIN_SCOPE         
 474: LOAD_VAR             "base"
 475: LOAD_VAR             "base"
 476: MULTIPLY            
 477: RETURN              
 478: END_SCOPE           
 479: END_SCOPE           
 480: PUSH_NULL           
 481: RETURN              
 482: END_FUNCTION        
 483: PUSH_FUNCTION       
 484: STORE_VAR            "power"
 485: PUSH_STRING          "Testing optional math parameter:"
 486: PRINT               
 487: PUSH_STRING         
 488: PUSH_INT             3
 489: CALL                 "power"
 490: PUSH_STRING         
 491: CONCAT              
 492: PUSH_STRING          ""power(3) = {power(3)}"
 493: INTERPOLATE_STRING  
 494: PRINT               
 495: PUSH_STRING         
 496: PUSH_INT             3
 497: PUSH_INT             4
 498: CALL                 "power"
 499: PUSH_STRING         
 500: CONCAT              
 501: PUSH_STRING          ""power(3, 4) = {power(3, 4)}"
 502: INTERPOLATE_STRING  
 503: PRINT               
 504: PUSH_STRING          "=== Default Parameter Tests ==="
 505: PRINT               
 506: BEGIN_FUNCTION       "greet_default"
 507: DEFINE_OPTIONAL_PARAM
 508: PUSH_STRING          "World"
 509: SET_DEFAULT_VALUE   
 510: BEGIN_SCOPE         
 511: PUSH_STRING         
 512: LOAD_VAR             "name"
 513: PUSH_STRING         
 514: CONCAT              
 515: PUSH_STRING          "!"
 516: INTERPOLATE_STRING  
 517: PRINT               
 518: PUSH_STRING         
 519: LOAD_VAR             "name"
 520: PUSH_STRING         
 521: CONCAT              
 522: PUSH_STRING          ""greeted {name}"
 523: INTERPOLATE_STRING  
 524: RETURN              
 525: END_SCOPE           
 526: PUSH_NULL           
 527: RETURN              
 528: END_FUNCTION        
 529: PUSH_FUNCTION       
 530: STORE_VAR            "greet_default"
 531: PUSH_STRING          "Testing default parameter:"
 532: PRINT               
 533: CALL                 "greet_default"
 534: POP                 
 535: PUSH_STRING          "Alice"
 536: CALL                 "greet_default"
 537: POP                 
 538: HALT                


// Test advanced function features (if implemented)
print("=== Advanced Function Tests ===");

// Function with optional parameters
fn greetWithDefault(name: str = "World"): nil {
    print("Hello, {name}!");
}

print("Optional parameters:");
greetWithDefault();
greetWithDefault("Alice");

// Function with multiple optional parameters
fn createUser(name: str, age: int = 18, active: bool = true): nil {
    print("User: {name}, Age: {age}, Active: {active}");
}

print("Multiple optional parameters:");
createUser("Bob");
createUser("Charlie", 25);
createUser("Diana", 30, false);

// Higher-order functions (if implemented)
fn applyOperation(x: int, y: int, operation: fn(int, int): int): int {
    return operation(x, y);
}

fn multiply(a: int, b: int): int {
    return a * b;
}

print("Higher-order functions:");
var result: int = applyOperation(6, 7, multiply);
print("applyOperation(6, 7, multiply) = {result}");

// Closures (if implemented)
fn createCounter(): fn(): int {
    var count: int = 0;
    fn increment(): int {
        count += 1;
        return count;
    }
    return increment;
}

print("Closures:");
var counter: fn(): int = createCounter();
print("Counter: {counter()}");
print("Counter: {counter()}");
print("Counter: {counter()}");
// Test basic function declarations and calls (if implemented)
print("=== Basic Function Tests ===");

// Simple function without parameters
fn greet(): str {
    print("Hello from function!");
    return "done";
}

print("Calling greet():");
greet();

// Function with parameters
fn add(a: int, b: int): int {
    return a + b;
}

print("Function with parameters:");
var result: int = add(5, 3);
print("add(5, 3) = {result}");

// Function with return value
fn square(x: int): int {
    return x * x;
}

print("Square function:");
print("square(4) = {square(4)}");
print("square(7) = {square(7)}");

//Function with string parameter
fn greet_name(name: str): str {
    print("Hello, {name}!");
    return "greeted";
}
print("Function with string parameter:");
greet_name("Alice");

// Function with local variables
fn calculate(x: int, y: int): int {
    var sum: int = x + y;
    var product: int = x * y;
    print("Local calculations: sum={sum}, product={product}");
    return sum * product;
}

print("Function with locals:");
var calc_result: int = calculate(3, 4);
print("Result: {calc_result}");

// Recursive function
fn factorial_main(n: int): int {
    if (n <= 1) {
        return 1;
    }
    return n * factorial_main(n - 1);
}

print("Recursive function:");
print("factorial(5) = {factorial_main(5)}");

// Additional function tests
fn subtract(a: int, b: int): int {
    return a - b;
}

fn factorial(n: int): int {
    if (n <= 1) { return 1; }
    return n * factorial(n - 1);
}

fn is_even(n: int): bool {
    return n % 2 == 0;
}

fn is_odd(n: int): bool {
    return !is_even(n);
}

fn is_prime(n: int): bool {
    if (n <= 1) { return false; }
    if (n == 2) { return true; }
    if (is_even(n)) { return false; }

    var i: int = 3;
    while (i * i <= n) {
        if (n % i == 0) { return false; }
        i += 2;
    }
    return true;
}

print("Additional function tests:");
print("subtract(10, 3) = {subtract(10, 3)}");
print("factorial(4) = {factorial(4)}");
print("is_even(6) = {is_even(6)}");
print("is_odd(7) = {is_odd(7)}");
print("is_prime(17) = {is_prime(17)}");

// === OPTIONAL AND DEFAULT PARAMETER TESTS ===
print("=== Optional Parameter Tests ===");

// Function with optional parameter
fn greet_optional(name: str?): str {
    if (name) {
        print("Hello, {name}!");
        return "greeted {name}";
    } else {
        print("Hello, stranger!");
        return "greeted stranger";
    }
}

print("Testing optional parameter:");
greet_optional("Bob");        // Should print "Hello, Bob!"
greet_optional();             // Should print "Hello, stranger!"

// Function with multiple optional parameters
fn create_user(username: str, email: str?, age: int?): str {
    print("Creating user: {username}");
    if (email) {
        print("Email: {email}");
    }
    if (age) {
        print("Age: {age}");
    }
    return "user created";
}

print("Testing multiple optional parameters:");
create_user("alice");                           // Only username
create_user("bob", "bob@email.com");           // Username and email
create_user("charlie", "charlie@email.com", 25); // All parameters

// Math function with optional parameter
fn power(base: int, exponent: int?): int {
    if (exponent) {
        var result: int = 1;
        var i: int = 0;
        while (i < exponent) {
            result *= base;
            i += 1;
        }
        return result;
    } else {
        return base * base; // Default to square if no exponent
    }
}

print("Testing optional math parameter:");
print("power(3) = {power(3)}");      // Should be 9 (3^2)
print("power(3, 4) = {power(3, 4)}"); // Should be 81 (3^4)

print("=== Default Parameter Tests ===");

// Function with default parameter value
fn greet_default(name:str = "World"): str {
    print("Hello, {name}!");
    return "greeted {name}";
}

print("Testing default parameter:");
greet_default();          // Should print "Hello, World!"
greet_default("Alice");   // Should print "Hello, Alice!"

// Function with multiple default parameters
fn create_rectangle(width = 10, height:int = 5): int {
    print("Creating rectangle: {width} x {height}");
    return width * height;
}



// Default parameter with calculation
fn calculate_tax(amount: int, rate:f64 = 0.1): int {
    var tax: int = amount * rate;
    print("Tax on {amount} at {rate}% = {tax}");
    return tax;
}

print("Testing calculated default parameter:");
calculate_tax(100);        // Uses default 10% rate
calculate_tax(200, 0.15);  // Uses custom


//issues with conversion from int
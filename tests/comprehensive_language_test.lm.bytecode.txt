Bytecode for tests/comprehensive_language_test.lm
Parser: Legacy Parser
========================================

=== Bytecode ===
Generated 1578 instructions

   0: PUSH_STRING          ""=== COMPREHENSIVE LANGUAGE FEATURE TEST ===""
   1: PRINT               
   2: PUSH_STRING          ""\n=== 1. LITERALS AND VARIABLES ===""
   3: PRINT               
   4: PUSH_STRING          ""Integers:""
   5: PRINT               
   6: PUSH_INT             0
   7: PRINT               
   8: PUSH_INT             42
   9: PRINT               
  10: PUSH_INT             17
  11: NEGATE              
  12: PRINT               
  13: PUSH_INT             999999
  14: PRINT               
  15: PUSH_STRING          ""Floats:""
  16: PRINT               
  17: PUSH_FLOAT           0
  18: PRINT               
  19: PUSH_FLOAT           3.14159
  20: PRINT               
  21: PUSH_FLOAT           2.71828
  22: NEGATE              
  23: PRINT               
  24: PUSH_STRING          ""Strings:""
  25: PRINT               
  26: PUSH_STRING          ""Hello, World!""
  27: PRINT               
  28: PUSH_STRING          """"
  29: PRINT               
  30: PUSH_STRING          ""Special chars: \n\t\\\"""
  31: PRINT               
  32: PUSH_STRING          ""Booleans:""
  33: PRINT               
  34: PUSH_BOOL            true
  35: PRINT               
  36: PUSH_BOOL            false
  37: PRINT               
  38: PUSH_STRING          ""Null:""
  39: PRINT               
  40: PUSH_NULL           
  41: PRINT               
  42: PUSH_INT             42
  43: STORE_VAR            "x"
  44: PUSH_FLOAT           3.14
  45: STORE_VAR            "y"
  46: PUSH_STRING          ""Limit""
  47: STORE_VAR            "name"
  48: PUSH_BOOL            true
  49: STORE_VAR            "isActive"
  50: PUSH_STRING          ""Variables:""
  51: PRINT               
  52: PUSH_STRING         
  53: LOAD_VAR             "x"
  54: PUSH_STRING         
  55: CONCAT              
  56: PUSH_STRING          ""Integer: {x}""
  57: INTERPOLATE_STRING  
  58: PRINT               
  59: PUSH_STRING         
  60: LOAD_VAR             "y"
  61: PUSH_STRING         
  62: CONCAT              
  63: PUSH_STRING          ""Float: {y}""
  64: INTERPOLATE_STRING  
  65: PRINT               
  66: PUSH_STRING         
  67: LOAD_VAR             "name"
  68: PUSH_STRING         
  69: CONCAT              
  70: PUSH_STRING          ""String: {name}""
  71: INTERPOLATE_STRING  
  72: PRINT               
  73: PUSH_STRING         
  74: LOAD_VAR             "isActive"
  75: PUSH_STRING         
  76: CONCAT              
  77: PUSH_STRING          ""Boolean: {isActive}""
  78: INTERPOLATE_STRING  
  79: PRINT               
  80: PUSH_INT             100
  81: DUP                 
  82: STORE_VAR            "x"
  83: POP                 
  84: PUSH_FLOAT           2.71
  85: DUP                 
  86: STORE_VAR            "y"
  87: POP                 
  88: PUSH_STRING          ""Language""
  89: DUP                 
  90: STORE_VAR            "name"
  91: POP                 
  92: PUSH_BOOL            false
  93: DUP                 
  94: STORE_VAR            "isActive"
  95: POP                 
  96: PUSH_STRING          ""After reassignment:""
  97: PRINT               
  98: PUSH_STRING         
  99: LOAD_VAR             "x"
 100: PUSH_STRING         
 101: CONCAT              
 102: PUSH_STRING          ""Integer: {x}""
 103: INTERPOLATE_STRING  
 104: PRINT               
 105: PUSH_STRING         
 106: LOAD_VAR             "y"
 107: PUSH_STRING         
 108: CONCAT              
 109: PUSH_STRING          ""Float: {y}""
 110: INTERPOLATE_STRING  
 111: PRINT               
 112: PUSH_STRING         
 113: LOAD_VAR             "name"
 114: PUSH_STRING         
 115: CONCAT              
 116: PUSH_STRING          ""String: {name}""
 117: INTERPOLATE_STRING  
 118: PRINT               
 119: PUSH_STRING         
 120: LOAD_VAR             "isActive"
 121: PUSH_STRING         
 122: CONCAT              
 123: PUSH_STRING          ""Boolean: {isActive}""
 124: INTERPOLATE_STRING  
 125: PRINT               
 126: PUSH_STRING          ""\n=== 2. EXPRESSIONS AND OPERATORS ===""
 127: PRINT               
 128: PUSH_INT             10
 129: STORE_VAR            "a"
 130: PUSH_INT             3
 131: STORE_VAR            "b"
 132: PUSH_STRING          ""Arithmetic:""
 133: PRINT               
 134: PUSH_STRING         
 135: LOAD_VAR             "a"
 136: PUSH_STRING         
 137: CONCAT              
 138: LOAD_VAR             "b"
 139: PUSH_STRING         
 140: CONCAT              
 141: LOAD_VAR             "a"
 142: LOAD_VAR             "b"
 143: ADD                 
 144: PUSH_STRING         
 145: CONCAT              
 146: PUSH_STRING          ""Addition: {a} + {b} = {a + b}""
 147: INTERPOLATE_STRING  
 148: PRINT               
 149: PUSH_STRING         
 150: LOAD_VAR             "a"
 151: PUSH_STRING         
 152: CONCAT              
 153: LOAD_VAR             "b"
 154: PUSH_STRING         
 155: CONCAT              
 156: LOAD_VAR             "a"
 157: LOAD_VAR             "b"
 158: SUBTRACT            
 159: PUSH_STRING         
 160: CONCAT              
 161: PUSH_STRING          ""Subtraction: {a} - {b} = {a - b}""
 162: INTERPOLATE_STRING  
 163: PRINT               
 164: PUSH_STRING         
 165: LOAD_VAR             "a"
 166: PUSH_STRING         
 167: CONCAT              
 168: LOAD_VAR             "b"
 169: PUSH_STRING         
 170: CONCAT              
 171: LOAD_VAR             "a"
 172: LOAD_VAR             "b"
 173: MULTIPLY            
 174: PUSH_STRING         
 175: CONCAT              
 176: PUSH_STRING          ""Multiplication: {a} * {b} = {a * b}""
 177: INTERPOLATE_STRING  
 178: PRINT               
 179: PUSH_STRING         
 180: LOAD_VAR             "a"
 181: PUSH_STRING         
 182: CONCAT              
 183: LOAD_VAR             "b"
 184: PUSH_STRING         
 185: CONCAT              
 186: LOAD_VAR             "a"
 187: LOAD_VAR             "b"
 188: DIVIDE              
 189: PUSH_STRING         
 190: CONCAT              
 191: PUSH_STRING          ""Division: {a} / {b} = {a / b}""
 192: INTERPOLATE_STRING  
 193: PRINT               
 194: PUSH_STRING         
 195: LOAD_VAR             "a"
 196: PUSH_STRING         
 197: CONCAT              
 198: LOAD_VAR             "b"
 199: PUSH_STRING         
 200: CONCAT              
 201: LOAD_VAR             "a"
 202: LOAD_VAR             "b"
 203: MODULO              
 204: PUSH_STRING         
 205: CONCAT              
 206: PUSH_STRING          ""Modulo: {a} % {b} = {a % b}""
 207: INTERPOLATE_STRING  
 208: PRINT               
 209: PUSH_STRING          ""Unary:""
 210: PRINT               
 211: PUSH_STRING         
 212: LOAD_VAR             "a"
 213: PUSH_STRING         
 214: CONCAT              
 215: LOAD_VAR             "a"
 216: NEGATE              
 217: PUSH_STRING         
 218: CONCAT              
 219: PUSH_STRING          ""Negation: -{a} = {-a}""
 220: INTERPOLATE_STRING  
 221: PRINT               
 222: PUSH_STRING         
 223: LOAD_VAR             "a"
 224: PUSH_STRING         
 225: CONCAT              
 226: LOAD_VAR             "a"
 227: PUSH_STRING         
 228: CONCAT              
 229: PUSH_STRING          ""Positive: +{a} = {+a}""
 230: INTERPOLATE_STRING  
 231: PRINT               
 232: PUSH_STRING          ""Comparison:""
 233: PRINT               
 234: PUSH_STRING         
 235: LOAD_VAR             "a"
 236: PUSH_STRING         
 237: CONCAT              
 238: LOAD_VAR             "b"
 239: PUSH_STRING         
 240: CONCAT              
 241: LOAD_VAR             "a"
 242: LOAD_VAR             "b"
 243: EQUAL               
 244: PUSH_STRING         
 245: CONCAT              
 246: PUSH_STRING          ""{a} == {b}: {a == b}""
 247: INTERPOLATE_STRING  
 248: PRINT               
 249: PUSH_STRING         
 250: LOAD_VAR             "a"
 251: PUSH_STRING         
 252: CONCAT              
 253: LOAD_VAR             "b"
 254: PUSH_STRING         
 255: CONCAT              
 256: LOAD_VAR             "a"
 257: LOAD_VAR             "b"
 258: NOT_EQUAL           
 259: PUSH_STRING         
 260: CONCAT              
 261: PUSH_STRING          ""{a} != {b}: {a != b}""
 262: INTERPOLATE_STRING  
 263: PRINT               
 264: PUSH_STRING         
 265: LOAD_VAR             "a"
 266: PUSH_STRING         
 267: CONCAT              
 268: LOAD_VAR             "b"
 269: PUSH_STRING         
 270: CONCAT              
 271: LOAD_VAR             "a"
 272: LOAD_VAR             "b"
 273: LESS                
 274: PUSH_STRING         
 275: CONCAT              
 276: PUSH_STRING          ""{a} < {b}: {a < b}""
 277: INTERPOLATE_STRING  
 278: PRINT               
 279: PUSH_STRING         
 280: LOAD_VAR             "a"
 281: PUSH_STRING         
 282: CONCAT              
 283: LOAD_VAR             "b"
 284: PUSH_STRING         
 285: CONCAT              
 286: LOAD_VAR             "a"
 287: LOAD_VAR             "b"
 288: GREATER             
 289: PUSH_STRING         
 290: CONCAT              
 291: PUSH_STRING          ""{a} > {b}: {a > b}""
 292: INTERPOLATE_STRING  
 293: PRINT               
 294: PUSH_STRING         
 295: LOAD_VAR             "a"
 296: PUSH_STRING         
 297: CONCAT              
 298: LOAD_VAR             "b"
 299: PUSH_STRING         
 300: CONCAT              
 301: LOAD_VAR             "a"
 302: LOAD_VAR             "b"
 303: LESS_EQUAL          
 304: PUSH_STRING         
 305: CONCAT              
 306: PUSH_STRING          ""{a} <= {b}: {a <= b}""
 307: INTERPOLATE_STRING  
 308: PRINT               
 309: PUSH_STRING         
 310: LOAD_VAR             "a"
 311: PUSH_STRING         
 312: CONCAT              
 313: LOAD_VAR             "b"
 314: PUSH_STRING         
 315: CONCAT              
 316: LOAD_VAR             "a"
 317: LOAD_VAR             "b"
 318: GREATER_EQUAL       
 319: PUSH_STRING         
 320: CONCAT              
 321: PUSH_STRING          ""{a} >= {b}: {a >= b}""
 322: INTERPOLATE_STRING  
 323: PRINT               
 324: PUSH_BOOL            true
 325: STORE_VAR            "p"
 326: PUSH_BOOL            false
 327: STORE_VAR            "q"
 328: PUSH_STRING          ""Logical:""
 329: PRINT               
 330: PUSH_STRING         
 331: LOAD_VAR             "p"
 332: DUP                 
 333: JUMP_IF_FALSE        2
 334: POP                 
 335: LOAD_VAR             "q"
 336: PUSH_STRING         
 337: CONCAT              
 338: PUSH_STRING          ""p && q: {p and q}""
 339: INTERPOLATE_STRING  
 340: PRINT               
 341: PUSH_STRING         
 342: LOAD_VAR             "p"
 343: DUP                 
 344: JUMP_IF_TRUE         2
 345: POP                 
 346: LOAD_VAR             "q"
 347: PUSH_STRING         
 348: CONCAT              
 349: PUSH_STRING          ""p || q: {p or q}""
 350: INTERPOLATE_STRING  
 351: PRINT               
 352: PUSH_STRING         
 353: LOAD_VAR             "p"
 354: NOT                 
 355: PUSH_STRING         
 356: CONCAT              
 357: PUSH_STRING          ""!p: {!p}""
 358: INTERPOLATE_STRING  
 359: PRINT               
 360: LOAD_VAR             "a"
 361: LOAD_VAR             "b"
 362: ADD                 
 363: PUSH_INT             2
 364: MULTIPLY            
 365: LOAD_VAR             "a"
 366: LOAD_VAR             "b"
 367: DIVIDE              
 368: SUBTRACT            
 369: STORE_VAR            "result"
 370: PUSH_STRING         
 371: LOAD_VAR             "a"
 372: PUSH_STRING         
 373: CONCAT              
 374: LOAD_VAR             "b"
 375: PUSH_STRING         
 376: CONCAT              
 377: LOAD_VAR             "a"
 378: PUSH_STRING         
 379: CONCAT              
 380: LOAD_VAR             "b"
 381: PUSH_STRING         
 382: CONCAT              
 383: LOAD_VAR             "result"
 384: PUSH_STRING         
 385: CONCAT              
 386: PUSH_STRING          ""Complex: ({a} + {b}) * 2 - {a} / {b} = {result}""
 387: INTERPOLATE_STRING  
 388: PRINT               
 389: PUSH_STRING          ""\n=== 3. STRING INTERPOLATION ===""
 390: PRINT               
 391: PUSH_STRING          ""Alice""
 392: STORE_VAR            "userName"
 393: PUSH_INT             25
 394: STORE_VAR            "userAge"
 395: PUSH_FLOAT           3.14159
 396: STORE_VAR            "pi"
 397: PUSH_STRING         
 398: LOAD_VAR             "userName"
 399: PUSH_STRING         
 400: CONCAT              
 401: PUSH_STRING          ""Hello, {userName}!""
 402: INTERPOLATE_STRING  
 403: PRINT               
 404: PUSH_STRING         
 405: LOAD_VAR             "userAge"
 406: PUSH_STRING         
 407: CONCAT              
 408: PUSH_STRING          ""Age: {userAge}""
 409: INTERPOLATE_STRING  
 410: PRINT               
 411: PUSH_STRING         
 412: LOAD_VAR             "pi"
 413: PUSH_STRING         
 414: CONCAT              
 415: PUSH_STRING          ""Pi: {pi}""
 416: INTERPOLATE_STRING  
 417: PRINT               
 418: PUSH_STRING         
 419: LOAD_VAR             "userAge"
 420: PUSH_INT             1
 421: ADD                 
 422: PUSH_STRING         
 423: CONCAT              
 424: PUSH_STRING          ""Next year: {userAge + 1}""
 425: INTERPOLATE_STRING  
 426: PRINT               
 427: PUSH_STRING         
 428: LOAD_VAR             "pi"
 429: PUSH_INT             2
 430: MULTIPLY            
 431: PUSH_INT             2
 432: MULTIPLY            
 433: PUSH_STRING         
 434: CONCAT              
 435: PUSH_STRING          ""Area of circle: {pi * 2 * 2}""
 436: INTERPOLATE_STRING  
 437: PRINT               
 438: PUSH_STRING         
 439: LOAD_VAR             "userName"
 440: PUSH_STRING         
 441: CONCAT              
 442: LOAD_VAR             "userAge"
 443: PUSH_STRING         
 444: CONCAT              
 445: PUSH_STRING          ""Name: {userName}, Age: {userAge}""
 446: INTERPOLATE_STRING  
 447: PRINT               
 448: PUSH_STRING         
 449: LOAD_VAR             "userName"
 450: PUSH_STRING         
 451: CONCAT              
 452: LOAD_VAR             "userAge"
 453: PUSH_STRING         
 454: CONCAT              
 455: PUSH_STRING          ""{userName} is {userAge} years old""
 456: INTERPOLATE_STRING  
 457: PRINT               
 458: PUSH_STRING         
 459: LOAD_VAR             "userName"
 460: PUSH_STRING         
 461: CONCAT              
 462: PUSH_STRING          ""{userName} says hello""
 463: INTERPOLATE_STRING  
 464: PRINT               
 465: PUSH_STRING         
 466: LOAD_VAR             "userAge"
 467: PUSH_STRING         
 468: CONCAT              
 469: PUSH_STRING          ""{userAge} is the age""
 470: INTERPOLATE_STRING  
 471: PRINT               
 472: PUSH_INT             10
 473: STORE_VAR            "x1"
 474: PUSH_INT             5
 475: STORE_VAR            "y1"
 476: PUSH_STRING         
 477: LOAD_VAR             "x1"
 478: PUSH_STRING         
 479: CONCAT              
 480: LOAD_VAR             "y1"
 481: PUSH_STRING         
 482: CONCAT              
 483: LOAD_VAR             "x1"
 484: LOAD_VAR             "y1"
 485: ADD                 
 486: PUSH_STRING         
 487: CONCAT              
 488: PUSH_STRING          ""Math: {x1} + {y1} = {x1 + y1}""
 489: INTERPOLATE_STRING  
 490: PRINT               
 491: PUSH_STRING         
 492: LOAD_VAR             "x1"
 493: PUSH_STRING         
 494: CONCAT              
 495: LOAD_VAR             "y1"
 496: PUSH_STRING         
 497: CONCAT              
 498: LOAD_VAR             "x1"
 499: LOAD_VAR             "y1"
 500: GREATER             
 501: PUSH_STRING         
 502: CONCAT              
 503: PUSH_STRING          ""Comparison: {x1} > {y1} is {x1 > y1}""
 504: INTERPOLATE_STRING  
 505: PRINT               
 506: PUSH_STRING         
 507: LOAD_VAR             "x1"
 508: LOAD_VAR             "y1"
 509: ADD                 
 510: PUSH_INT             2
 511: MULTIPLY            
 512: PUSH_INT             1
 513: SUBTRACT            
 514: PUSH_STRING         
 515: CONCAT              
 516: PUSH_STRING          ""Complex: {(x1 + y1) * 2 - 1}""
 517: INTERPOLATE_STRING  
 518: PRINT               
 519: PUSH_STRING          ""\n=== 4. CONTROL FLOW - IF/ELSE ===""
 520: PRINT               
 521: PUSH_INT             85
 522: STORE_VAR            "score"
 523: LOAD_VAR             "score"
 524: PUSH_INT             90
 525: GREATER_EQUAL       
 526: JUMP_IF_FALSE        5
 527: BEGIN_SCOPE         
 528: PUSH_STRING          ""Grade: A""
 529: PRINT               
 530: END_SCOPE           
 531: JUMP                 0
 532: CALL                 "unknown"
 533: POP                 
 534: BEGIN_SCOPE         
 535: PUSH_STRING          ""Grade: B""
 536: PRINT               
 537: END_SCOPE           
 538: CALL                 "unknown"
 539: POP                 
 540: BEGIN_SCOPE         
 541: PUSH_STRING          ""Grade: C""
 542: PRINT               
 543: END_SCOPE           
 544: PUSH_NULL           
 545: POP                 
 546: BEGIN_SCOPE         
 547: PUSH_STRING          ""Grade: F""
 548: PRINT               
 549: END_SCOPE           
 550: PUSH_STRING          ""sunny""
 551: STORE_VAR            "weather"
 552: PUSH_INT             75
 553: STORE_VAR            "temperature"
 554: LOAD_VAR             "weather"
 555: PUSH_STRING          ""sunny""
 556: EQUAL               
 557: JUMP_IF_FALSE        16
 558: BEGIN_SCOPE         
 559: LOAD_VAR             "temperature"
 560: PUSH_INT             70
 561: GREATER             
 562: JUMP_IF_FALSE        5
 563: BEGIN_SCOPE         
 564: PUSH_STRING          ""Perfect day for outdoor activities!""
 565: PRINT               
 566: END_SCOPE           
 567: JUMP                 4
 568: BEGIN_SCOPE         
 569: PUSH_STRING          ""Sunny but a bit cold.""
 570: PRINT               
 571: END_SCOPE           
 572: END_SCOPE           
 573: JUMP                 4
 574: BEGIN_SCOPE         
 575: PUSH_STRING          ""Not ideal weather.""
 576: PRINT               
 577: END_SCOPE           
 578: PUSH_STRING          ""\n=== 5. LOOPS - FOR LOOPS ===""
 579: PRINT               
 580: PUSH_STRING          ""Basic for loop (0 to 4):""
 581: PRINT               
 582: BEGIN_SCOPE         
 583: PUSH_INT             0
 584: STORE_VAR            "i"
 585: LOAD_VAR             "i"
 586: PUSH_INT             5
 587: LESS                
 588: JUMP_IF_FALSE        18
 589: JUMP                 7
 590: LOAD_VAR             "i"
 591: PUSH_INT             1
 592: ADD                 
 593: DUP                 
 594: STORE_VAR            "i"
 595: POP                 
 596: JUMP                 -12
 597: BEGIN_SCOPE         
 598: PUSH_STRING         
 599: LOAD_VAR             "i"
 600: PUSH_STRING         
 601: CONCAT              
 602: PUSH_STRING          ""i = {i}""
 603: INTERPOLATE_STRING  
 604: PRINT               
 605: END_SCOPE           
 606: JUMP                 -17
 607: END_SCOPE           
 608: PUSH_STRING          ""For loop with increment 2:""
 609: PRINT               
 610: BEGIN_SCOPE         
 611: PUSH_INT             0
 612: STORE_VAR            "j"
 613: LOAD_VAR             "j"
 614: PUSH_INT             10
 615: LESS                
 616: JUMP_IF_FALSE        18
 617: JUMP                 7
 618: LOAD_VAR             "j"
 619: PUSH_INT             2
 620: ADD                 
 621: DUP                 
 622: STORE_VAR            "j"
 623: POP                 
 624: JUMP                 -12
 625: BEGIN_SCOPE         
 626: PUSH_STRING         
 627: LOAD_VAR             "j"
 628: PUSH_STRING         
 629: CONCAT              
 630: PUSH_STRING          ""j = {j}""
 631: INTERPOLATE_STRING  
 632: PRINT               
 633: END_SCOPE           
 634: JUMP                 -17
 635: END_SCOPE           
 636: PUSH_STRING          ""Countdown loop:""
 637: PRINT               
 638: BEGIN_SCOPE         
 639: PUSH_INT             5
 640: STORE_VAR            "k"
 641: LOAD_VAR             "k"
 642: PUSH_INT             0
 643: GREATER             
 644: JUMP_IF_FALSE        18
 645: JUMP                 7
 646: LOAD_VAR             "k"
 647: PUSH_INT             1
 648: SUBTRACT            
 649: DUP                 
 650: STORE_VAR            "k"
 651: POP                 
 652: JUMP                 -12
 653: BEGIN_SCOPE         
 654: PUSH_STRING         
 655: LOAD_VAR             "k"
 656: PUSH_STRING         
 657: CONCAT              
 658: PUSH_STRING          ""k = {k}""
 659: INTERPOLATE_STRING  
 660: PRINT               
 661: END_SCOPE           
 662: JUMP                 -17
 663: END_SCOPE           
 664: PUSH_STRING          ""Nested for loops (2x3 grid):""
 665: PRINT               
 666: BEGIN_SCOPE         
 667: PUSH_INT             0
 668: STORE_VAR            "row"
 669: LOAD_VAR             "row"
 670: PUSH_INT             2
 671: LESS                
 672: JUMP_IF_FALSE        40
 673: JUMP                 7
 674: LOAD_VAR             "row"
 675: PUSH_INT             1
 676: ADD                 
 677: DUP                 
 678: STORE_VAR            "row"
 679: POP                 
 680: JUMP                 -12
 681: BEGIN_SCOPE         
 682: BEGIN_SCOPE         
 683: PUSH_INT             0
 684: STORE_VAR            "col"
 685: LOAD_VAR             "col"
 686: PUSH_INT             3
 687: LESS                
 688: JUMP_IF_FALSE        21
 689: JUMP                 7
 690: LOAD_VAR             "col"
 691: PUSH_INT             1
 692: ADD                 
 693: DUP                 
 694: STORE_VAR            "col"
 695: POP                 
 696: JUMP                 -12
 697: BEGIN_SCOPE         
 698: PUSH_STRING         
 699: LOAD_VAR             "row"
 700: PUSH_STRING         
 701: CONCAT              
 702: LOAD_VAR             "col"
 703: PUSH_STRING         
 704: CONCAT              
 705: PUSH_STRING          ""({row}, {col})""
 706: INTERPOLATE_STRING  
 707: PRINT               
 708: END_SCOPE           
 709: JUMP                 -20
 710: END_SCOPE           
 711: END_SCOPE           
 712: JUMP                 -39
 713: END_SCOPE           
 714: PUSH_STRING          ""\n=== 6. LOOPS - ITER LOOPS ===""
 715: PRINT               
 716: PUSH_STRING          ""Basic range (1 to 5):""
 717: PRINT               
 718: PUSH_INT             1
 719: PUSH_INT             6
 720: CREATE_RANGE        
 721: GET_ITERATOR        
 722: STORE_TEMP          
 723: LOAD_TEMP           
 724: ITERATOR_HAS_NEXT   
 725: JUMP_IF_FALSE        13
 726: LOAD_TEMP           
 727: ITERATOR_NEXT       
 728: STORE_VAR            "i"
 729: BEGIN_SCOPE         
 730: PUSH_STRING         
 731: LOAD_VAR             "i"
 732: PUSH_STRING         
 733: CONCAT              
 734: PUSH_STRING          ""i = {i}""
 735: INTERPOLATE_STRING  
 736: PRINT               
 737: END_SCOPE           
 738: JUMP                 -16
 739: CLEAR_TEMP          
 740: PUSH_STRING          ""Range (0 to 3):""
 741: PRINT               
 742: PUSH_INT             0
 743: PUSH_INT             4
 744: CREATE_RANGE        
 745: GET_ITERATOR        
 746: STORE_TEMP          
 747: LOAD_TEMP           
 748: ITERATOR_HAS_NEXT   
 749: JUMP_IF_FALSE        13
 750: LOAD_TEMP           
 751: ITERATOR_NEXT       
 752: STORE_VAR            "x"
 753: BEGIN_SCOPE         
 754: PUSH_STRING         
 755: LOAD_VAR             "x"
 756: PUSH_STRING         
 757: CONCAT              
 758: PUSH_STRING          ""x = {x}""
 759: INTERPOLATE_STRING  
 760: PRINT               
 761: END_SCOPE           
 762: JUMP                 -16
 763: CLEAR_TEMP          
 764: PUSH_STRING          ""Nested iter loops:""
 765: PRINT               
 766: PUSH_INT             1
 767: PUSH_INT             3
 768: CREATE_RANGE        
 769: GET_ITERATOR        
 770: STORE_TEMP          
 771: LOAD_TEMP           
 772: ITERATOR_HAS_NEXT   
 773: JUMP_IF_FALSE        31
 774: LOAD_TEMP           
 775: ITERATOR_NEXT       
 776: STORE_VAR            "i"
 777: BEGIN_SCOPE         
 778: PUSH_INT             10
 779: PUSH_INT             12
 780: CREATE_RANGE        
 781: GET_ITERATOR        
 782: STORE_TEMP          
 783: LOAD_TEMP           
 784: ITERATOR_HAS_NEXT   
 785: JUMP_IF_FALSE        16
 786: LOAD_TEMP           
 787: ITERATOR_NEXT       
 788: STORE_VAR            "j"
 789: BEGIN_SCOPE         
 790: PUSH_STRING         
 791: LOAD_VAR             "i"
 792: PUSH_STRING         
 793: CONCAT              
 794: LOAD_VAR             "j"
 795: PUSH_STRING         
 796: CONCAT              
 797: PUSH_STRING          ""({i}, {j})""
 798: INTERPOLATE_STRING  
 799: PRINT               
 800: END_SCOPE           
 801: JUMP                 -19
 802: CLEAR_TEMP          
 803: END_SCOPE           
 804: JUMP                 -34
 805: CLEAR_TEMP          
 806: PUSH_STRING          ""Mixed loops (for outer, iter inner):""
 807: PRINT               
 808: BEGIN_SCOPE         
 809: PUSH_INT             0
 810: STORE_VAR            "i"
 811: LOAD_VAR             "i"
 812: PUSH_INT             2
 813: LESS                
 814: JUMP_IF_FALSE        36
 815: JUMP                 7
 816: LOAD_VAR             "i"
 817: PUSH_INT             1
 818: ADD                 
 819: DUP                 
 820: STORE_VAR            "i"
 821: POP                 
 822: JUMP                 -12
 823: BEGIN_SCOPE         
 824: PUSH_INT             5
 825: PUSH_INT             7
 826: CREATE_RANGE        
 827: GET_ITERATOR        
 828: STORE_TEMP          
 829: LOAD_TEMP           
 830: ITERATOR_HAS_NEXT   
 831: JUMP_IF_FALSE        16
 832: LOAD_TEMP           
 833: ITERATOR_NEXT       
 834: STORE_VAR            "j"
 835: BEGIN_SCOPE         
 836: PUSH_STRING         
 837: LOAD_VAR             "i"
 838: PUSH_STRING         
 839: CONCAT              
 840: LOAD_VAR             "j"
 841: PUSH_STRING         
 842: CONCAT              
 843: PUSH_STRING          ""for-iter: ({i}, {j})""
 844: INTERPOLATE_STRING  
 845: PRINT               
 846: END_SCOPE           
 847: JUMP                 -19
 848: CLEAR_TEMP          
 849: END_SCOPE           
 850: JUMP                 -35
 851: END_SCOPE           
 852: PUSH_STRING          ""\n=== 7. LOOPS - WHILE LOOPS ===""
 853: PRINT               
 854: PUSH_INT             0
 855: STORE_VAR            "count"
 856: PUSH_STRING          ""While loop (count to 3):""
 857: PRINT               
 858: LOAD_VAR             "count"
 859: PUSH_INT             3
 860: LESS                
 861: JUMP_IF_FALSE        16
 862: BEGIN_SCOPE         
 863: PUSH_STRING         
 864: LOAD_VAR             "count"
 865: PUSH_STRING         
 866: CONCAT              
 867: PUSH_STRING          ""count = {count}""
 868: INTERPOLATE_STRING  
 869: PRINT               
 870: LOAD_VAR             "count"
 871: PUSH_INT             1
 872: ADD                 
 873: DUP                 
 874: STORE_VAR            "count"
 875: POP                 
 876: END_SCOPE           
 877: JUMP                 -20
 878: PUSH_INT             1
 879: STORE_VAR            "num"
 880: PUSH_STRING          ""Powers of 2 less than 20:""
 881: PRINT               
 882: LOAD_VAR             "num"
 883: PUSH_INT             20
 884: LESS                
 885: JUMP_IF_FALSE        16
 886: BEGIN_SCOPE         
 887: PUSH_STRING         
 888: LOAD_VAR             "num"
 889: PUSH_STRING         
 890: CONCAT              
 891: PUSH_STRING          ""num = {num}""
 892: INTERPOLATE_STRING  
 893: PRINT               
 894: LOAD_VAR             "num"
 895: PUSH_INT             2
 896: MULTIPLY            
 897: DUP                 
 898: STORE_VAR            "num"
 899: POP                 
 900: END_SCOPE           
 901: JUMP                 -20
 902: PUSH_STRING          ""\n=== 8. FUNCTIONS - BASIC ===""
 903: PRINT               
 904: BEGIN_FUNCTION       "sayHello"
 905: BEGIN_SCOPE         
 906: PUSH_STRING          ""Hello from function!""
 907: PRINT               
 908: END_SCOPE           
 909: PUSH_NULL           
 910: RETURN              
 911: END_FUNCTION        
 912: PUSH_FUNCTION       
 913: STORE_VAR            "sayHello"
 914: PUSH_STRING          ""Calling simple function:""
 915: PRINT               
 916: CALL                 "sayHello"
 917: POP                 
 918: BEGIN_FUNCTION       "add"
 919: DEFINE_PARAM        
 920: DEFINE_PARAM        
 921: BEGIN_SCOPE         
 922: LOAD_VAR             "a"
 923: LOAD_VAR             "b"
 924: ADD                 
 925: RETURN              
 926: END_SCOPE           
 927: PUSH_NULL           
 928: RETURN              
 929: END_FUNCTION        
 930: PUSH_FUNCTION       
 931: STORE_VAR            "add"
 932: PUSH_STRING          ""Function with parameters:""
 933: PRINT               
 934: PUSH_INT             5
 935: PUSH_INT             3
 936: CALL                 "add"
 937: STORE_VAR            "addResult"
 938: PUSH_STRING         
 939: LOAD_VAR             "addResult"
 940: PUSH_STRING         
 941: CONCAT              
 942: PUSH_STRING          ""add(5, 3) = {addResult}""
 943: INTERPOLATE_STRING  
 944: PRINT               
 945: BEGIN_FUNCTION       "square"
 946: DEFINE_PARAM        
 947: BEGIN_SCOPE         
 948: LOAD_VAR             "x"
 949: LOAD_VAR             "x"
 950: MULTIPLY            
 951: RETURN              
 952: END_SCOPE           
 953: PUSH_NULL           
 954: RETURN              
 955: END_FUNCTION        
 956: PUSH_FUNCTION       
 957: STORE_VAR            "square"
 958: PUSH_STRING          ""Square function:""
 959: PRINT               
 960: PUSH_STRING         
 961: PUSH_INT             4
 962: CALL                 "square"
 963: PUSH_STRING         
 964: CONCAT              
 965: PUSH_STRING          ""square(4) = {square(4)}""
 966: INTERPOLATE_STRING  
 967: PRINT               
 968: PUSH_STRING         
 969: PUSH_INT             7
 970: CALL                 "square"
 971: PUSH_STRING         
 972: CONCAT              
 973: PUSH_STRING          ""square(7) = {square(7)}""
 974: INTERPOLATE_STRING  
 975: PRINT               
 976: BEGIN_FUNCTION       "greet"
 977: DEFINE_PARAM        
 978: BEGIN_SCOPE         
 979: PUSH_STRING         
 980: LOAD_VAR             "name"
 981: PUSH_STRING         
 982: CONCAT              
 983: PUSH_STRING          ""Hello, {name}!""
 984: INTERPOLATE_STRING  
 985: PRINT               
 986: PUSH_STRING          ""greeted""
 987: RETURN              
 988: END_SCOPE           
 989: PUSH_NULL           
 990: RETURN              
 991: END_FUNCTION        
 992: PUSH_FUNCTION       
 993: STORE_VAR            "greet"
 994: PUSH_STRING          ""Function with string parameter:""
 995: PRINT               
 996: PUSH_STRING          ""Bob""
 997: CALL                 "greet"
 998: POP                 
 999: BEGIN_FUNCTION       "calculate"
1000: DEFINE_PARAM        
1001: DEFINE_PARAM        
1002: BEGIN_SCOPE         
1003: LOAD_VAR             "x"
1004: LOAD_VAR             "y"
1005: ADD                 
1006: STORE_VAR            "sum"
1007: LOAD_VAR             "x"
1008: LOAD_VAR             "y"
1009: MULTIPLY            
1010: STORE_VAR            "product"
1011: PUSH_STRING         
1012: LOAD_VAR             "sum"
1013: PUSH_STRING         
1014: CONCAT              
1015: LOAD_VAR             "product"
1016: PUSH_STRING         
1017: CONCAT              
1018: PUSH_STRING          ""Local calculations: sum={sum}, product={product}""
1019: INTERPOLATE_STRING  
1020: PRINT               
1021: LOAD_VAR             "sum"
1022: LOAD_VAR             "product"
1023: MULTIPLY            
1024: RETURN              
1025: END_SCOPE           
1026: PUSH_NULL           
1027: RETURN              
1028: END_FUNCTION        
1029: PUSH_FUNCTION       
1030: STORE_VAR            "calculate"
1031: PUSH_STRING          ""Function with locals:""
1032: PRINT               
1033: PUSH_INT             3
1034: PUSH_INT             4
1035: CALL                 "calculate"
1036: STORE_VAR            "calcResult"
1037: PUSH_STRING         
1038: LOAD_VAR             "calcResult"
1039: PUSH_STRING         
1040: CONCAT              
1041: PUSH_STRING          ""Result: {calcResult}""
1042: INTERPOLATE_STRING  
1043: PRINT               
1044: BEGIN_FUNCTION       "factorial"
1045: DEFINE_PARAM        
1046: BEGIN_SCOPE         
1047: LOAD_VAR             "n"
1048: PUSH_INT             1
1049: LESS_EQUAL          
1050: JUMP_IF_FALSE        5
1051: BEGIN_SCOPE         
1052: PUSH_INT             1
1053: RETURN              
1054: END_SCOPE           
1055: JUMP                 0
1056: LOAD_VAR             "n"
1057: LOAD_VAR             "n"
1058: PUSH_INT             1
1059: SUBTRACT            
1060: CALL                 "factorial"
1061: MULTIPLY            
1062: RETURN              
1063: END_SCOPE           
1064: PUSH_NULL           
1065: RETURN              
1066: END_FUNCTION        
1067: PUSH_FUNCTION       
1068: STORE_VAR            "factorial"
1069: PUSH_STRING          ""Recursive function:""
1070: PRINT               
1071: PUSH_STRING         
1072: PUSH_INT             5
1073: CALL                 "factorial"
1074: PUSH_STRING         
1075: CONCAT              
1076: PUSH_STRING          ""factorial(5) = {factorial(5)}""
1077: INTERPOLATE_STRING  
1078: PRINT               
1079: PUSH_STRING          ""\n=== 9. FUNCTIONS - OPTIONAL PARAMETERS ===""
1080: PRINT               
1081: BEGIN_FUNCTION       "greetOptional"
1082: DEFINE_OPTIONAL_PARAM
1083: BEGIN_SCOPE         
1084: LOAD_VAR             "name"
1085: JUMP_IF_FALSE        17
1086: BEGIN_SCOPE         
1087: PUSH_STRING         
1088: LOAD_VAR             "name"
1089: PUSH_STRING         
1090: CONCAT              
1091: PUSH_STRING          ""Hello, {name}!""
1092: INTERPOLATE_STRING  
1093: PRINT               
1094: PUSH_STRING         
1095: LOAD_VAR             "name"
1096: PUSH_STRING         
1097: CONCAT              
1098: PUSH_STRING          ""greeted {name}""
1099: INTERPOLATE_STRING  
1100: RETURN              
1101: END_SCOPE           
1102: JUMP                 6
1103: BEGIN_SCOPE         
1104: PUSH_STRING          ""Hello, stranger!""
1105: PRINT               
1106: PUSH_STRING          ""greeted stranger""
1107: RETURN              
1108: END_SCOPE           
1109: END_SCOPE           
1110: PUSH_NULL           
1111: RETURN              
1112: END_FUNCTION        
1113: PUSH_FUNCTION       
1114: STORE_VAR            "greetOptional"
1115: PUSH_STRING          ""Testing optional parameter:""
1116: PRINT               
1117: PUSH_STRING          ""Charlie""
1118: CALL                 "greetOptional"
1119: POP                 
1120: CALL                 "greetOptional"
1121: POP                 
1122: BEGIN_FUNCTION       "createUser"
1123: DEFINE_PARAM        
1124: DEFINE_OPTIONAL_PARAM
1125: DEFINE_OPTIONAL_PARAM
1126: BEGIN_SCOPE         
1127: PUSH_STRING         
1128: LOAD_VAR             "username"
1129: PUSH_STRING         
1130: CONCAT              
1131: PUSH_STRING          ""Creating user: {username}""
1132: INTERPOLATE_STRING  
1133: PRINT               
1134: LOAD_VAR             "email"
1135: JUMP_IF_FALSE        10
1136: BEGIN_SCOPE         
1137: PUSH_STRING         
1138: LOAD_VAR             "email"
1139: PUSH_STRING         
1140: CONCAT              
1141: PUSH_STRING          ""Email: {email}""
1142: INTERPOLATE_STRING  
1143: PRINT               
1144: END_SCOPE           
1145: JUMP                 0
1146: LOAD_VAR             "age"
1147: JUMP_IF_FALSE        10
1148: BEGIN_SCOPE         
1149: PUSH_STRING         
1150: LOAD_VAR             "age"
1151: PUSH_STRING         
1152: CONCAT              
1153: PUSH_STRING          ""Age: {age}""
1154: INTERPOLATE_STRING  
1155: PRINT               
1156: END_SCOPE           
1157: JUMP                 0
1158: PUSH_STRING          ""user created""
1159: RETURN              
1160: END_SCOPE           
1161: PUSH_NULL           
1162: RETURN              
1163: END_FUNCTION        
1164: PUSH_FUNCTION       
1165: STORE_VAR            "createUser"
1166: PUSH_STRING          ""Testing multiple optional parameters:""
1167: PRINT               
1168: PUSH_STRING          ""alice""
1169: CALL                 "createUser"
1170: POP                 
1171: PUSH_STRING          ""bob""
1172: PUSH_STRING          ""bob@email.com""
1173: CALL                 "createUser"
1174: POP                 
1175: PUSH_STRING          ""charlie""
1176: PUSH_STRING          ""charlie@email.com""
1177: PUSH_INT             25
1178: CALL                 "createUser"
1179: POP                 
1180: PUSH_STRING          ""\n=== 10. FUNCTIONS - DEFAULT PARAMETERS ===""
1181: PRINT               
1182: BEGIN_FUNCTION       "greetDefault"
1183: DEFINE_OPTIONAL_PARAM
1184: PUSH_STRING          ""World""
1185: SET_DEFAULT_VALUE   
1186: BEGIN_SCOPE         
1187: PUSH_STRING         
1188: LOAD_VAR             "name"
1189: PUSH_STRING         
1190: CONCAT              
1191: PUSH_STRING          ""Hello, {name}!""
1192: INTERPOLATE_STRING  
1193: PRINT               
1194: PUSH_STRING         
1195: LOAD_VAR             "name"
1196: PUSH_STRING         
1197: CONCAT              
1198: PUSH_STRING          ""greeted {name}""
1199: INTERPOLATE_STRING  
1200: RETURN              
1201: END_SCOPE           
1202: PUSH_NULL           
1203: RETURN              
1204: END_FUNCTION        
1205: PUSH_FUNCTION       
1206: STORE_VAR            "greetDefault"
1207: PUSH_STRING          ""Testing default parameter:""
1208: PRINT               
1209: CALL                 "greetDefault"
1210: POP                 
1211: PUSH_STRING          ""Dave""
1212: CALL                 "greetDefault"
1213: POP                 
1214: BEGIN_FUNCTION       "createMessage"
1215: DEFINE_OPTIONAL_PARAM
1216: PUSH_STRING          ""Hello""
1217: SET_DEFAULT_VALUE   
1218: DEFINE_OPTIONAL_PARAM
1219: PUSH_STRING          ""User""
1220: SET_DEFAULT_VALUE   
1221: DEFINE_OPTIONAL_PARAM
1222: PUSH_STRING          ""!""
1223: SET_DEFAULT_VALUE   
1224: BEGIN_SCOPE         
1225: PUSH_STRING         
1226: LOAD_VAR             "greeting"
1227: PUSH_STRING         
1228: CONCAT              
1229: LOAD_VAR             "name"
1230: PUSH_STRING         
1231: CONCAT              
1232: LOAD_VAR             "punctuation"
1233: PUSH_STRING         
1234: CONCAT              
1235: PUSH_STRING          ""{greeting}, {name}{punctuation}""
1236: INTERPOLATE_STRING  
1237: STORE_VAR            "message"
1238: LOAD_VAR             "message"
1239: PRINT               
1240: LOAD_VAR             "message"
1241: RETURN              
1242: END_SCOPE           
1243: PUSH_NULL           
1244: RETURN              
1245: END_FUNCTION        
1246: PUSH_FUNCTION       
1247: STORE_VAR            "createMessage"
1248: PUSH_STRING          ""Testing multiple default parameters:""
1249: PRINT               
1250: CALL                 "createMessage"
1251: POP                 
1252: PUSH_STRING          ""Hi""
1253: CALL                 "createMessage"
1254: POP                 
1255: PUSH_STRING          ""Hey""
1256: PUSH_STRING          ""Alice""
1257: CALL                 "createMessage"
1258: POP                 
1259: PUSH_STRING          ""Greetings""
1260: PUSH_STRING          ""Bob""
1261: PUSH_STRING          "".""
1262: CALL                 "createMessage"
1263: POP                 
1264: PUSH_STRING          ""\n=== 11. TYPE SYSTEM - TYPE ALIASES ===""
1265: PRINT               
1266: PUSH_INT             12345
1267: STORE_VAR            "userId"
1268: PUSH_STRING          ""Alice""
1269: STORE_VAR            "userName"
1270: PUSH_INT             25
1271: STORE_VAR            "userAge"
1272: PUSH_FLOAT           95.5
1273: STORE_VAR            "userScore"
1274: PUSH_BOOL            true
1275: STORE_VAR            "isUserActive"
1276: PUSH_STRING          ""Type aliases:""
1277: PRINT               
1278: PUSH_STRING         
1279: LOAD_VAR             "userId"
1280: PUSH_STRING         
1281: CONCAT              
1282: PUSH_STRING          ""User ID: {userId}""
1283: INTERPOLATE_STRING  
1284: PRINT               
1285: PUSH_STRING         
1286: LOAD_VAR             "userName"
1287: PUSH_STRING         
1288: CONCAT              
1289: PUSH_STRING          ""User Name: {userName}""
1290: INTERPOLATE_STRING  
1291: PRINT               
1292: PUSH_STRING         
1293: LOAD_VAR             "userAge"
1294: PUSH_STRING         
1295: CONCAT              
1296: PUSH_STRING          ""User Age: {userAge}""
1297: INTERPOLATE_STRING  
1298: PRINT               
1299: PUSH_STRING         
1300: LOAD_VAR             "userScore"
1301: PUSH_STRING         
1302: CONCAT              
1303: PUSH_STRING          ""User Score: {userScore}""
1304: INTERPOLATE_STRING  
1305: PRINT               
1306: PUSH_STRING         
1307: LOAD_VAR             "isUserActive"
1308: PUSH_STRING         
1309: CONCAT              
1310: PUSH_STRING          ""Is Active: {isUserActive}""
1311: INTERPOLATE_STRING  
1312: PRINT               
1313: PUSH_STRING          ""\n=== 12. TYPE SYSTEM - UNION TYPES ===""
1314: PRINT               
1315: PUSH_STRING          ""hello""
1316: STORE_VAR            "value1"
1317: PUSH_INT             42
1318: STORE_VAR            "value2"
1319: PUSH_STRING          ""Union types:""
1320: PRINT               
1321: PUSH_STRING         
1322: LOAD_VAR             "value1"
1323: PUSH_STRING         
1324: CONCAT              
1325: PUSH_STRING          ""String value: {value1}""
1326: INTERPOLATE_STRING  
1327: PRINT               
1328: PUSH_STRING         
1329: LOAD_VAR             "value2"
1330: PUSH_STRING         
1331: CONCAT              
1332: PUSH_STRING          ""Int value: {value2}""
1333: INTERPOLATE_STRING  
1334: PRINT               
1335: PUSH_STRING          ""\n=== 13. TYPE SYSTEM - OPTION TYPES ===""
1336: PRINT               
1337: LOAD_VAR             "Some"
1338: STORE_VAR            "someValue"
1339: BEGIN_SCOPE         
1340: LOAD_VAR             "kind"
1341: POP                 
1342: PUSH_NULL           
1343: POP                 
1344: PUSH_STRING          ""Some""
1345: POP                 
1346: PUSH_NULL           
1347: POP                 
1348: LOAD_VAR             "value"
1349: POP                 
1350: PUSH_NULL           
1351: POP                 
1352: PUSH_INT             42
1353: POP                 
1354: END_SCOPE           
1355: PUSH_NULL           
1356: POP                 
1357: LOAD_VAR             "None"
1358: STORE_VAR            "noneValue"
1359: BEGIN_SCOPE         
1360: LOAD_VAR             "kind"
1361: POP                 
1362: PUSH_NULL           
1363: POP                 
1364: PUSH_STRING          ""None""
1365: POP                 
1366: END_SCOPE           
1367: PUSH_NULL           
1368: POP                 
1369: PUSH_STRING          ""Option types:""
1370: PRINT               
1371: PUSH_STRING         
1372: LOAD_VAR             "someValue"
1373: PUSH_STRING         
1374: CONCAT              
1375: PUSH_STRING          ""Some value: {someValue}""
1376: INTERPOLATE_STRING  
1377: PRINT               
1378: PUSH_STRING         
1379: LOAD_VAR             "noneValue"
1380: PUSH_STRING         
1381: CONCAT              
1382: PUSH_STRING          ""None value: {noneValue}""
1383: INTERPOLATE_STRING  
1384: PRINT               
1385: PUSH_STRING          ""\n=== 14. ERROR HANDLING - WORKING ===""
1386: PRINT               
1387: BEGIN_FUNCTION       "divide"
1388: DEFINE_PARAM        
1389: DEFINE_PARAM        
1390: BEGIN_SCOPE         
1391: LOAD_VAR             "b"
1392: PUSH_INT             0
1393: EQUAL               
1394: JUMP_IF_FALSE        5
1395: BEGIN_SCOPE         
1396: CONSTRUCT_ERROR     
1397: RETURN              
1398: END_SCOPE           
1399: JUMP                 0
1400: LOAD_VAR             "a"
1401: LOAD_VAR             "b"
1402: DIVIDE              
1403: CONSTRUCT_OK        
1404: RETURN              
1405: END_SCOPE           
1406: PUSH_NULL           
1407: RETURN              
1408: END_FUNCTION        
1409: PUSH_FUNCTION       
1410: STORE_VAR            "divide"
1411: BEGIN_FUNCTION       "safeDivide"
1412: DEFINE_PARAM        
1413: DEFINE_PARAM        
1414: BEGIN_SCOPE         
1415: LOAD_VAR             "x"
1416: LOAD_VAR             "y"
1417: CALL                 "divide"
1418: CHECK_ERROR         
1419: JUMP_IF_FALSE        1
1420: PROPAGATE_ERROR     
1421: UNWRAP_VALUE        
1422: STORE_VAR            "result"
1423: LOAD_VAR             "result"
1424: CONSTRUCT_OK        
1425: RETURN              
1426: END_SCOPE           
1427: PUSH_NULL           
1428: RETURN              
1429: END_FUNCTION        
1430: PUSH_FUNCTION       
1431: STORE_VAR            "safeDivide"
1432: PUSH_STRING          ""Testing error handling:""
1433: PRINT               
1434: PUSH_INT             10
1435: PUSH_INT             2
1436: CALL                 "divide"
1437: STORE_VAR            "successResult"
1438: PUSH_STRING         
1439: LOAD_VAR             "successResult"
1440: PUSH_STRING         
1441: CONCAT              
1442: PUSH_STRING          ""divide(10, 2) = {successResult}""
1443: INTERPOLATE_STRING  
1444: PRINT               
1445: PUSH_INT             10
1446: PUSH_INT             0
1447: CALL                 "divide"
1448: STORE_VAR            "errorResult"
1449: PUSH_STRING         
1450: LOAD_VAR             "errorResult"
1451: PUSH_STRING         
1452: CONCAT              
1453: PUSH_STRING          ""divide(10, 0) = {errorResult}""
1454: INTERPOLATE_STRING  
1455: PRINT               
1456: PUSH_INT             15
1457: PUSH_INT             3
1458: CALL                 "safeDivide"
1459: STORE_VAR            "propagatedResult"
1460: PUSH_STRING         
1461: LOAD_VAR             "propagatedResult"
1462: PUSH_STRING         
1463: CONCAT              
1464: PUSH_STRING          ""safeDivide(15, 3) = {propagatedResult}""
1465: INTERPOLATE_STRING  
1466: PRINT               
1467: PUSH_STRING          ""Error handling working with ? operator and error propagation""
1468: PRINT               
1469: PUSH_STRING          ""\n=== 15. CLASSES - BASIC SYNTAX ===""
1470: PRINT               
1471: BEGIN_CLASS          "Person"
1472: BEGIN_FUNCTION       "init"
1473: DEFINE_PARAM        
1474: DEFINE_PARAM        
1475: BEGIN_SCOPE         
1476: LOAD_THIS           
1477: LOAD_VAR             "name"
1478: SET_PROPERTY         "name"
1479: POP                 
1480: LOAD_THIS           
1481: LOAD_VAR             "age"
1482: SET_PROPERTY         "age"
1483: POP                 
1484: END_SCOPE           
1485: PUSH_NULL           
1486: RETURN              
1487: END_FUNCTION        
1488: PUSH_FUNCTION       
1489: STORE_VAR            "init"
1490: BEGIN_FUNCTION       "greet"
1491: BEGIN_SCOPE         
1492: PUSH_STRING         
1493: LOAD_THIS           
1494: GET_PROPERTY         "name"
1495: PUSH_STRING         
1496: CONCAT              
1497: LOAD_THIS           
1498: GET_PROPERTY         "age"
1499: PUSH_STRING         
1500: CONCAT              
1501: PUSH_STRING          ""Hello, I'm {self.name} and I'm {self.age} years old""
1502: INTERPOLATE_STRING  
1503: PRINT               
1504: END_SCOPE           
1505: PUSH_NULL           
1506: RETURN              
1507: END_FUNCTION        
1508: PUSH_FUNCTION       
1509: STORE_VAR            "greet"
1510: BEGIN_FUNCTION       "birthday"
1511: BEGIN_SCOPE         
1512: LOAD_THIS           
1513: PUSH_INT             1
1514: SET_PROPERTY         "age"
1515: POP                 
1516: PUSH_STRING         
1517: LOAD_THIS           
1518: GET_PROPERTY         "name"
1519: PUSH_STRING         
1520: CONCAT              
1521: LOAD_THIS           
1522: GET_PROPERTY         "age"
1523: PUSH_STRING         
1524: CONCAT              
1525: PUSH_STRING          ""{self.name} is now {self.age} years old""
1526: INTERPOLATE_STRING  
1527: PRINT               
1528: END_SCOPE           
1529: PUSH_NULL           
1530: RETURN              
1531: END_FUNCTION        
1532: PUSH_FUNCTION       
1533: STORE_VAR            "birthday"
1534: END_CLASS           
1535: PUSH_STRING          ""Class syntax defined (VM implementation in progress)""
1536: PRINT               
1537: PUSH_STRING          ""\n=== 16. MODULES - BASIC SYNTAX ===""
1538: PRINT               
1539: PUSH_STRING          ""Module syntax defined (import/export working)""
1540: PRINT               
1541: PUSH_STRING          ""\n=== 17. CONCURRENCY - BASIC SYNTAX ===""
1542: PRINT               
1543: PUSH_STRING          ""Concurrency syntax defined (VM implementation pending)""
1544: PRINT               
1545: PUSH_STRING          ""\n=== 18. PATTERN MATCHING - BASIC SYNTAX ===""
1546: PRINT               
1547: PUSH_STRING          ""Pattern matching syntax defined (VM implementation pending)""
1548: PRINT               
1549: PUSH_STRING          ""\n=== COMPREHENSIVE TEST SUMMARY ===""
1550: PRINT               
1551: PUSH_STRING          ""✅ Literals and variables""
1552: PRINT               
1553: PUSH_STRING          ""✅ Expressions and operators""
1554: PRINT               
1555: PUSH_STRING          ""✅ String interpolation""
1556: PRINT               
1557: PUSH_STRING          ""✅ Control flow (if/else)""
1558: PRINT               
1559: PUSH_STRING          ""✅ Loops (for, iter, while)""
1560: PRINT               
1561: PUSH_STRING          ""✅ Functions (basic, optional params, default params)""
1562: PRINT               
1563: PUSH_STRING          ""✅ Type system (aliases, unions, options)""
1564: PRINT               
1565: PUSH_STRING          ""✅ Error handling (? operator, error propagation working)""
1566: PRINT               
1567: PUSH_STRING          ""🔄 Classes (syntax complete, VM in progress)""
1568: PRINT               
1569: PUSH_STRING          ""✅ Modules (import/export working)""
1570: PRINT               
1571: PUSH_STRING          ""🔄 Concurrency (syntax complete, VM pending)""
1572: PRINT               
1573: PUSH_STRING          ""🔄 Pattern matching (match expressions - VM pending)""
1574: PRINT               
1575: PUSH_STRING          ""\n=== TEST COMPLETE ===""
1576: PRINT               
1577: HALT                


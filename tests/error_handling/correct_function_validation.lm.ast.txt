AST for C:\Projects\limitly\tests\error_handling\correct_function_validation.lm
Parser: New CSTParser (cst_parser.cpp)
Mode: CST with AST compatibility
Note: CST nodes were created internally with trivia preservation
      AST output shown below for compatibility testing
========================================

AST Dump:
==========
FunctionDeclaration: divide
  Parameters:
    a: int
    b: int
  ReturnType: int
  Body:
    BlockStatement:
      IfStatement:
        Condition:
          BinaryExpression: ==
            Left:
              Variable: b
            Operator: ==
            Right:
              Literal: 0
        Then:
          BlockStatement:
            ReturnStatement:
              Value:
                ErrorConstruct: DivisionByZero
      ReturnStatement:
        Value:
          BinaryExpression: /
            Left:
              Variable: a
            Operator: /
            Right:
              Variable: b
FunctionDeclaration: safeDivision
  Parameters:
    x: int
    y: int
  ReturnType: int
  Body:
    BlockStatement:
      ReturnStatement:
        Value:
          FallibleExpression:
            Expression:
              CallExpression:
                Callee:
                  Variable: divide
                Arguments:
                  Variable: x
                  Variable: y
FunctionDeclaration: multipleErrors
  Parameters:
    x: int
  ReturnType: int
  Body:
    BlockStatement:
      IfStatement:
        Condition:
          BinaryExpression: <
            Left:
              Variable: x
            Operator: <
            Right:
              Literal: 0
        Then:
          BlockStatement:
            ReturnStatement:
              Value:
                ErrorConstruct: ErrorA
      IfStatement:
        Condition:
          BinaryExpression: ==
            Left:
              Variable: x
            Operator: ==
            Right:
              Literal: 0
        Then:
          BlockStatement:
            ReturnStatement:
              Value:
                ErrorConstruct: ErrorB
      ReturnStatement:
        Value:
          BinaryExpression: *
            Left:
              Variable: x
            Operator: *
            Right:
              Literal: 2
FunctionDeclaration: callMultiple
  Parameters:
    a: int
    b: int
  ReturnType: int
  Body:
    BlockStatement:
      VarDeclaration: result1
        Initializer:
          FallibleExpression:
            Expression:
              CallExpression:
                Callee:
                  Variable: divide
                Arguments:
                  Variable: a
                  Variable: b
      VarDeclaration: result2
        Initializer:
          FallibleExpression:
            Expression:
              CallExpression:
                Callee:
                  Variable: multipleErrors
                Arguments:
                  Variable: result1
      ReturnStatement:
        Value:
          Variable: result2
FunctionDeclaration: genericError
  Parameters:
    x: int
  ReturnType: int?
  Body:
    BlockStatement:
      IfStatement:
        Condition:
          BinaryExpression: <
            Left:
              Variable: x
            Operator: <
            Right:
              Literal: 0
        Then:
          BlockStatement:
            ReturnStatement:
              Value:
                ErrorConstruct: GenericError
      ReturnStatement:
        Value:
          FallibleExpression:
            Expression:
              CallExpression:
                Callee:
                  Variable: divide
                Arguments:
                  Variable: x
                  Literal: 2
PrintStatement:
  Literal: "Testing correct function signature error type validation"
PrintStatement:
  Literal: "All functions should compile without errors"
PrintStatement:
  BinaryExpression: +
    Left:
      Literal: "Result: "
    Operator: +
    Right:
      CallExpression:
        Callee:
          Variable: safeDivision
        Arguments:
          Literal: 10
          Literal: 2

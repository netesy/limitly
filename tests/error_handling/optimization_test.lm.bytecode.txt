Bytecode for C:\Projects\limitly\tests\error_handling\optimization_test.lm
Parser: New CSTParser
========================================

=== Bytecode ===
Generated 253 instructions

   0: BEGIN_FUNCTION       "test_error_pooling"
   1: BEGIN_SCOPE         
   2: PUSH_STRING          "Testing error value pooling..."
   3: PRINT               
   4: PUSH_INT             1
   5: PUSH_INT             100
   6: CREATE_RANGE        
   7: GET_ITERATOR        
   8: STORE_TEMP          
   9: LOAD_TEMP           
  10: ITERATOR_HAS_NEXT   
  11: JUMP_IF_FALSE        12
  12: LOAD_TEMP           
  13: ITERATOR_NEXT       
  14: STORE_VAR            "i"
  15: BEGIN_SCOPE         
  16: PUSH_STRING          "TestError"
  17: PUSH_STRING          "Message "
  18: LOAD_VAR             "i"
  19: ADD                 
  20: CALL                 "create_test_error"
  21: STORE_VAR            "error_result"
  22: END_SCOPE           
  23: JUMP                 -15
  24: CLEAR_TEMP          
  25: PUSH_STRING          "Error pooling test compvared"
  26: PRINT               
  27: END_SCOPE           
  28: PUSH_NULL           
  29: RETURN              
  30: END_FUNCTION        
  31: PUSH_FUNCTION       
  32: STORE_VAR            "test_error_pooling"
  33: BEGIN_FUNCTION       "test_error_frame_efficiency"
  34: BEGIN_SCOPE         
  35: PUSH_STRING          "Testing error frame stack efficiency..."
  36: PRINT               
  37: PUSH_INT             5
  38: CALL                 "deeply_nested_function"
  39: CHECK_ERROR         
  40: JUMP_IF_TRUE         2
  41: UNWRAP_VALUE        
  42: JUMP                 7
  43: BEGIN_SCOPE         
  44: PUSH_STRING          "Caught error from deeply nested function"
  45: PRINT               
  46: PUSH_NULL           
  47: RETURN              
  48: PUSH_NULL           
  49: END_SCOPE           
  50: STORE_VAR            "result"
  51: PUSH_STRING          "Nested function result: "
  52: LOAD_VAR             "result"
  53: ADD                 
  54: PRINT               
  55: END_SCOPE           
  56: PUSH_NULL           
  57: RETURN              
  58: END_FUNCTION        
  59: PUSH_FUNCTION       
  60: STORE_VAR            "test_error_frame_efficiency"
  61: BEGIN_FUNCTION       "test_zero_cost_success"
  62: BEGIN_SCOPE         
  63: PUSH_STRING          "Testing zero-cost success path..."
  64: PRINT               
  65: PUSH_INT             1000
  66: STORE_VAR            "iterations"
  67: CALL                 "clock"
  68: STORE_VAR            "start_time"
  69: PUSH_INT             1
  70: LOAD_VAR             "iterations"
  71: CREATE_RANGE        
  72: GET_ITERATOR        
  73: STORE_TEMP          
  74: LOAD_TEMP           
  75: ITERATOR_HAS_NEXT   
  76: JUMP_IF_FALSE        13
  77: LOAD_TEMP           
  78: ITERATOR_NEXT       
  79: STORE_VAR            "i"
  80: BEGIN_SCOPE         
  81: LOAD_VAR             "i"
  82: CALL                 "simple_success_function"
  83: CHECK_ERROR         
  84: JUMP_IF_FALSE        1
  85: PROPAGATE_ERROR     
  86: UNWRAP_VALUE        
  87: STORE_VAR            "result"
  88: END_SCOPE           
  89: JUMP                 -16
  90: CLEAR_TEMP          
  91: CALL                 "clock"
  92: STORE_VAR            "end_time"
  93: LOAD_VAR             "end_time"
  94: LOAD_VAR             "start_time"
  95: SUBTRACT            
  96: STORE_VAR            "duration"
  97: PUSH_STRING          "Zero-cost success test compvared in "
  98: LOAD_VAR             "duration"
  99: ADD                 
 100: PUSH_STRING          " seconds"
 101: ADD                 
 102: PRINT               
 103: PUSH_STRING          "Average time per operation: "
 104: LOAD_VAR             "duration"
 105: LOAD_VAR             "iterations"
 106: DIVIDE              
 107: ADD                 
 108: PUSH_STRING          " seconds"
 109: ADD                 
 110: PRINT               
 111: END_SCOPE           
 112: PUSH_NULL           
 113: RETURN              
 114: END_FUNCTION        
 115: PUSH_FUNCTION       
 116: STORE_VAR            "test_zero_cost_success"
 117: BEGIN_FUNCTION       "test_error_union_layout"
 118: BEGIN_SCOPE         
 119: PUSH_STRING          "Testing error union type layout..."
 120: PRINT               
 121: PUSH_INT             42
 122: CONSTRUCT_OK        
 123: STORE_VAR            "success_union"
 124: PUSH_STRING          "Test error message"
 125: CONSTRUCT_ERROR     
 126: STORE_VAR            "error_union"
 127: PUSH_INT             1
 128: PUSH_INT             100
 129: CREATE_RANGE        
 130: GET_ITERATOR        
 131: STORE_TEMP          
 132: LOAD_TEMP           
 133: ITERATOR_HAS_NEXT   
 134: JUMP_IF_FALSE        22
 135: LOAD_TEMP           
 136: ITERATOR_NEXT       
 137: STORE_VAR            "i"
 138: BEGIN_SCOPE         
 139: LOAD_VAR             "success_union"
 140: CALL                 "is_error"
 141: JUMP_IF_FALSE        5
 142: BEGIN_SCOPE         
 143: PUSH_STRING          "Unexpected error in success union"
 144: PRINT               
 145: END_SCOPE           
 146: JUMP                 0
 147: LOAD_VAR             "error_union"
 148: CALL                 "is_success"
 149: JUMP_IF_FALSE        5
 150: BEGIN_SCOPE         
 151: PUSH_STRING          "Unexpected success in error union"
 152: PRINT               
 153: END_SCOPE           
 154: JUMP                 0
 155: END_SCOPE           
 156: JUMP                 -25
 157: CLEAR_TEMP          
 158: PUSH_STRING          "Error union layout test compvared"
 159: PRINT               
 160: END_SCOPE           
 161: PUSH_NULL           
 162: RETURN              
 163: END_FUNCTION        
 164: PUSH_FUNCTION       
 165: STORE_VAR            "test_error_union_layout"
 166: BEGIN_FUNCTION       "create_test_error"
 167: DEFINE_PARAM        
 168: DEFINE_PARAM        
 169: BEGIN_SCOPE         
 170: LOAD_VAR             "message"
 171: CONSTRUCT_ERROR     
 172: RETURN              
 173: END_SCOPE           
 174: PUSH_NULL           
 175: RETURN              
 176: END_FUNCTION        
 177: PUSH_FUNCTION       
 178: STORE_VAR            "create_test_error"
 179: BEGIN_FUNCTION       "deeply_nested_function"
 180: DEFINE_PARAM        
 181: BEGIN_SCOPE         
 182: LOAD_VAR             "depth"
 183: PUSH_INT             0
 184: LESS_EQUAL          
 185: JUMP_IF_FALSE        6
 186: BEGIN_SCOPE         
 187: PUSH_STRING          "Reached maximum depth"
 188: CONSTRUCT_ERROR     
 189: RETURN              
 190: END_SCOPE           
 191: JUMP                 0
 192: LOAD_VAR             "depth"
 193: PUSH_INT             1
 194: SUBTRACT            
 195: CALL                 "deeply_nested_function"
 196: CHECK_ERROR         
 197: JUMP_IF_FALSE        1
 198: PROPAGATE_ERROR     
 199: UNWRAP_VALUE        
 200: STORE_VAR            "result"
 201: LOAD_VAR             "result"
 202: PUSH_INT             1
 203: ADD                 
 204: RETURN              
 205: END_SCOPE           
 206: PUSH_NULL           
 207: RETURN              
 208: END_FUNCTION        
 209: PUSH_FUNCTION       
 210: STORE_VAR            "deeply_nested_function"
 211: BEGIN_FUNCTION       "simple_success_function"
 212: DEFINE_PARAM        
 213: BEGIN_SCOPE         
 214: LOAD_VAR             "value"
 215: PUSH_INT             2
 216: MULTIPLY            
 217: RETURN              
 218: END_SCOPE           
 219: PUSH_NULL           
 220: RETURN              
 221: END_FUNCTION        
 222: PUSH_FUNCTION       
 223: STORE_VAR            "simple_success_function"
 224: BEGIN_ENUM          
 225: DEFINE_ENUM_VARIANT_WITH_TYPE
 226: END_ENUM            
 227: BEGIN_ENUM          
 228: DEFINE_ENUM_VARIANT_WITH_TYPE
 229: END_ENUM            
 230: BEGIN_FUNCTION       "run_optimization_tests"
 231: BEGIN_SCOPE         
 232: PUSH_STRING          "=== Error Handling Optimization Tests ==="
 233: PRINT               
 234: CALL                 "test_error_pooling"
 235: POP                 
 236: CALL                 "test_error_frame_efficiency"
 237: POP                 
 238: CALL                 "test_zero_cost_success"
 239: POP                 
 240: CALL                 "test_error_union_layout"
 241: POP                 
 242: PUSH_STRING          "=== All optimization tests compvared ==="
 243: PRINT               
 244: END_SCOPE           
 245: PUSH_NULL           
 246: RETURN              
 247: END_FUNCTION        
 248: PUSH_FUNCTION       
 249: STORE_VAR            "run_optimization_tests"
 250: CALL                 "run_optimization_tests"
 251: POP                 
 252: HALT                


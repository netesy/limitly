AST for C:\Projects\limitly\tests\error_handling\valid_cases.lm
Parser: New CSTParser (cst_parser.cpp)
Mode: CST with AST compatibility
Note: CST nodes were created internally with trivia preservation
      AST output shown below for compatibility testing
========================================

AST Dump:
==========
FunctionDeclaration: safeDivide
  Parameters:
    a: int
    b: int
  ReturnType: int
  Body:
    BlockStatement:
      ReturnStatement:
        Value:
          OkConstruct:
            Value:
              BinaryExpression: /
                Left:
                  Variable: a
                Operator: /
                Right:
                  Variable: b
FunctionDeclaration: chainedDivision
  Parameters:
    x: int
    y: int
    z: int
  ReturnType: int
  Body:
    BlockStatement:
      VarDeclaration: step1
        Initializer:
          FallibleExpression:
            Expression:
              CallExpression:
                Callee:
                  Variable: safeDivide
                Arguments:
                  Variable: x
                  Variable: y
      VarDeclaration: step2
        Initializer:
          FallibleExpression:
            Expression:
              CallExpression:
                Callee:
                  Variable: safeDivide
                Arguments:
                  Variable: step1
                  Variable: z
      ReturnStatement:
        Value:
          OkConstruct:
            Value:
              Variable: step2
FunctionDeclaration: maybeError
  Parameters:
    flag: bool
  ReturnType: int?
  Body:
    BlockStatement:
      IfStatement:
        Condition:
          Variable: flag
        Then:
          BlockStatement:
            ReturnStatement:
              Value:
                ErrorConstruct: DivisionByZero
      ReturnStatement:
        Value:
          OkConstruct:
            Value:
              Literal: 42
FunctionDeclaration: narrowError
  Parameters:
    flag: bool
  ReturnType: int
  Body:
    BlockStatement:
      VarDeclaration: result
        Initializer:
          FallibleExpression:
            Expression:
              CallExpression:
                Callee:
                  Variable: maybeError
                Arguments:
                  Variable: flag
      ReturnStatement:
        Value:
          OkConstruct:
            Value:
              Variable: result
FunctionDeclaration: multiError
  Parameters:
    x: int
  ReturnType: int
  Body:
    BlockStatement:
      IfStatement:
        Condition:
          BinaryExpression: <
            Left:
              Variable: x
            Operator: <
            Right:
              Literal: 0
        Then:
          BlockStatement:
            ReturnStatement:
              Value:
                ErrorConstruct: DivisionByZero
      IfStatement:
        Condition:
          BinaryExpression: >
            Left:
              Variable: x
            Operator: >
            Right:
              Literal: 100
        Then:
          BlockStatement:
            ReturnStatement:
              Value:
                ErrorConstruct: IndexOutOfBounds
      ReturnStatement:
        Value:
          OkConstruct:
            Value:
              Variable: x
FunctionDeclaration: validAssignments
  ReturnType: nil
  Body:
    BlockStatement:
      VarDeclaration: success
        Type: int
        Initializer:
          OkConstruct:
            Value:
              Literal: 42
      VarDeclaration: error
        Type: int
        Initializer:
          ErrorConstruct: DivisionByZero
      VarDeclaration: generic
        Type: int?
        Initializer:
          OkConstruct:
            Value:
              Literal: 100
FunctionDeclaration: correctCalls
  ReturnType: nil
  Body:
    BlockStatement:
      VarDeclaration: result1
        Initializer:
          CallExpression:
            Callee:
              Variable: safeDivide
            Arguments:
              Literal: 10
              Literal: 2
      VarDeclaration: result2
        Initializer:
          CallExpression:
            Callee:
              Variable: chainedDivision
            Arguments:
              Literal: 20
              Literal: 4
              Literal: 2
FunctionDeclaration: nonFallibleCorrect
  Parameters:
    x: int
    y: int
  ReturnType: int
  Body:
    BlockStatement:
      ReturnStatement:
        Value:
          BinaryExpression: +
            Left:
              Variable: x
            Operator: +
            Right:
              Variable: y
FunctionDeclaration: main
  ReturnType: nil
  Body:
    BlockStatement:
      PrintStatement:
        Literal: "Valid error handling cases test"
      VarDeclaration: r1
        Initializer:
          CallExpression:
            Callee:
              Variable: chainedDivision
            Arguments:
              Literal: 100
              Literal: 10
              Literal: 2
      VarDeclaration: r2
        Initializer:
          CallExpression:
            Callee:
              Variable: narrowError
            Arguments:
              Literal: false
      VarDeclaration: r3
        Initializer:
          CallExpression:
            Callee:
              Variable: multiError
            Arguments:
              Literal: 50
      VarDeclaration: r4
        Initializer:
          CallExpression:
            Callee:
              Variable: nonFallibleCorrect
            Arguments:
              Literal: 5
              Literal: 3
      PrintStatement:
        Literal: "All valid cases compiled successfully!"

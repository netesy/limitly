Bytecode for C:\Projects\limitly\tests\error_handling\correct_function_validation.lm
Parser: New CSTParser
========================================

=== Bytecode ===
Generated 136 instructions

   0: BEGIN_FUNCTION       "divide"
   1: DEFINE_PARAM        
   2: DEFINE_PARAM        
   3: BEGIN_SCOPE         
   4: LOAD_VAR             "b"
   5: PUSH_INT             0
   6: EQUAL               
   7: JUMP_IF_FALSE        5
   8: BEGIN_SCOPE         
   9: CONSTRUCT_ERROR     
  10: RETURN              
  11: END_SCOPE           
  12: JUMP                 0
  13: LOAD_VAR             "a"
  14: LOAD_VAR             "b"
  15: DIVIDE              
  16: RETURN              
  17: END_SCOPE           
  18: PUSH_NULL           
  19: RETURN              
  20: END_FUNCTION        
  21: PUSH_FUNCTION       
  22: STORE_VAR            "divide"
  23: BEGIN_FUNCTION       "safeDivision"
  24: DEFINE_PARAM        
  25: DEFINE_PARAM        
  26: BEGIN_SCOPE         
  27: LOAD_VAR             "x"
  28: LOAD_VAR             "y"
  29: CALL                 "divide"
  30: CHECK_ERROR         
  31: JUMP_IF_FALSE        1
  32: PROPAGATE_ERROR     
  33: UNWRAP_VALUE        
  34: RETURN              
  35: END_SCOPE           
  36: PUSH_NULL           
  37: RETURN              
  38: END_FUNCTION        
  39: PUSH_FUNCTION       
  40: STORE_VAR            "safeDivision"
  41: BEGIN_FUNCTION       "multipleErrors"
  42: DEFINE_PARAM        
  43: BEGIN_SCOPE         
  44: LOAD_VAR             "x"
  45: PUSH_INT             0
  46: LESS                
  47: JUMP_IF_FALSE        5
  48: BEGIN_SCOPE         
  49: CONSTRUCT_ERROR     
  50: RETURN              
  51: END_SCOPE           
  52: JUMP                 0
  53: LOAD_VAR             "x"
  54: PUSH_INT             0
  55: EQUAL               
  56: JUMP_IF_FALSE        5
  57: BEGIN_SCOPE         
  58: CONSTRUCT_ERROR     
  59: RETURN              
  60: END_SCOPE           
  61: JUMP                 0
  62: LOAD_VAR             "x"
  63: PUSH_INT             2
  64: MULTIPLY            
  65: RETURN              
  66: END_SCOPE           
  67: PUSH_NULL           
  68: RETURN              
  69: END_FUNCTION        
  70: PUSH_FUNCTION       
  71: STORE_VAR            "multipleErrors"
  72: BEGIN_FUNCTION       "callMultiple"
  73: DEFINE_PARAM        
  74: DEFINE_PARAM        
  75: BEGIN_SCOPE         
  76: LOAD_VAR             "a"
  77: LOAD_VAR             "b"
  78: CALL                 "divide"
  79: CHECK_ERROR         
  80: JUMP_IF_FALSE        1
  81: PROPAGATE_ERROR     
  82: UNWRAP_VALUE        
  83: STORE_VAR            "result1"
  84: LOAD_VAR             "result1"
  85: CALL                 "multipleErrors"
  86: CHECK_ERROR         
  87: JUMP_IF_FALSE        1
  88: PROPAGATE_ERROR     
  89: UNWRAP_VALUE        
  90: STORE_VAR            "result2"
  91: LOAD_VAR             "result2"
  92: RETURN              
  93: END_SCOPE           
  94: PUSH_NULL           
  95: RETURN              
  96: END_FUNCTION        
  97: PUSH_FUNCTION       
  98: STORE_VAR            "callMultiple"
  99: BEGIN_FUNCTION       "genericError"
 100: DEFINE_PARAM        
 101: BEGIN_SCOPE         
 102: LOAD_VAR             "x"
 103: PUSH_INT             0
 104: LESS                
 105: JUMP_IF_FALSE        5
 106: BEGIN_SCOPE         
 107: CONSTRUCT_ERROR     
 108: RETURN              
 109: END_SCOPE           
 110: JUMP                 0
 111: LOAD_VAR             "x"
 112: PUSH_INT             2
 113: CALL                 "divide"
 114: CHECK_ERROR         
 115: JUMP_IF_FALSE        1
 116: PROPAGATE_ERROR     
 117: UNWRAP_VALUE        
 118: RETURN              
 119: END_SCOPE           
 120: PUSH_NULL           
 121: RETURN              
 122: END_FUNCTION        
 123: PUSH_FUNCTION       
 124: STORE_VAR            "genericError"
 125: PUSH_STRING          "Testing correct function signature error type validation"
 126: PRINT               
 127: PUSH_STRING          "All functions should compile without errors"
 128: PRINT               
 129: PUSH_STRING          "Result: "
 130: PUSH_INT             10
 131: PUSH_INT             2
 132: CALL                 "safeDivision"
 133: ADD                 
 134: PRINT               
 135: HALT                


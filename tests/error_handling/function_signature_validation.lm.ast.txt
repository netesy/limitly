AST for C:\Projects\limitly\tests\error_handling\function_signature_validation.lm
Parser: New CSTParser (cst_parser.cpp)
Mode: CST with AST compatibility
Note: CST nodes were created internally with trivia preservation
      AST output shown below for compatibility testing
========================================

AST Dump:
==========
FunctionDeclaration: divide
  Parameters:
    a: int
    b: int
  ReturnType: int
  Body:
    BlockStatement:
      IfStatement:
        Condition:
          BinaryExpression: ==
            Left:
              Variable: b
            Operator: ==
            Right:
              Literal: 0
        Then:
          BlockStatement:
            ReturnStatement:
              Value:
                ErrorConstruct: DivisionByZero
      ReturnStatement:
        Value:
          BinaryExpression: /
            Left:
              Variable: a
            Operator: /
            Right:
              Variable: b
FunctionDeclaration: parseAndDivide
  Parameters:
    s: str
    divisor: int
  ReturnType: int
  Body:
    BlockStatement:
      VarDeclaration: num
        Initializer:
          FallibleExpression:
            Expression:
              CallExpression:
                Callee:
                  Variable: parseInt
                Arguments:
                  Variable: s
      ReturnStatement:
        Value:
          FallibleExpression:
            Expression:
              CallExpression:
                Callee:
                  Variable: divide
                Arguments:
                  Variable: num
                  Variable: divisor
FunctionDeclaration: safeDivision
  Parameters:
    x: int
    y: int
  ReturnType: int
  Body:
    BlockStatement:
      ReturnStatement:
        Value:
          FallibleExpression:
            Expression:
              CallExpression:
                Callee:
                  Variable: divide
                Arguments:
                  Variable: x
                  Variable: y
FunctionDeclaration: handleDivision
  Parameters:
    x: int
    y: int
  ReturnType: int
  Body:
    BlockStatement:
      VarDeclaration: result
        Initializer:
          FallibleExpression:
            Expression:
              CallExpression:
                Callee:
                  Variable: divide
                Arguments:
                  Variable: x
                  Variable: y
            ElseHandler:
              ExpressionStatement:
                (null)
      ExpressionStatement:
        Literal: nil
      BlockStatement:
        ReturnStatement:
          Value:
            UnaryExpression: -
              Operand:
                Literal: 1
      ExpressionStatement:
        Literal: nil
      ReturnStatement:
        Value:
          Variable: result
FunctionDeclaration: legacyDivide
  Parameters:
    a: int
    b: int
  ReturnType: int
  Throws: true
  Body:
    BlockStatement:
      IfStatement:
        Condition:
          BinaryExpression: ==
            Left:
              Variable: b
            Operator: ==
            Right:
              Literal: 0
        Then:
          BlockStatement:
            ReturnStatement:
              Value:
                ErrorConstruct: DivisionByZero
      ReturnStatement:
        Value:
          BinaryExpression: /
            Left:
              Variable: a
            Operator: /
            Right:
              Variable: b
FunctionDeclaration: badFunction
  Parameters:
    x: int
  ReturnType: int
  Body:
    BlockStatement:
      ReturnStatement:
        Value:
          FallibleExpression:
            Expression:
              CallExpression:
                Callee:
                  Variable: divide
                Arguments:
                  Variable: x
                  Literal: 0
FunctionDeclaration: incompatibleFunction
  Parameters:
    x: int
  ReturnType: int
  Body:
    BlockStatement:
      ReturnStatement:
        Value:
          FallibleExpression:
            Expression:
              CallExpression:
                Callee:
                  Variable: divide
                Arguments:
                  Variable: x
                  Literal: 2
PrintStatement:
  Literal: "Testing function signature error type validation"
VarDeclaration: result1
  Initializer:
    FallibleExpression:
      Expression:
        CallExpression:
          Callee:
            Variable: safeDivision
          Arguments:
            Literal: 10
            Literal: 2
      ElseHandler:
        ExpressionStatement:
          (null)
ExpressionStatement:
  Literal: nil
BlockStatement:
  ReturnStatement:
    Value:
      UnaryExpression: -
        Operand:
          Literal: 1
ExpressionStatement:
  Literal: nil
PrintStatement:
  BinaryExpression: +
    Left:
      Literal: "Result 1: "
    Operator: +
    Right:
      Variable: result1
VarDeclaration: result2
  Initializer:
    FallibleExpression:
      Expression:
        CallExpression:
          Callee:
            Variable: safeDivision
          Arguments:
            Literal: 10
            Literal: 0
      ElseHandler:
        ExpressionStatement:
          (null)
ExpressionStatement:
  Literal: nil
BlockStatement:
  ReturnStatement:
    Value:
      UnaryExpression: -
        Operand:
          Literal: 1
ExpressionStatement:
  Literal: nil
PrintStatement:
  BinaryExpression: +
    Left:
      Literal: "Result 2: "
    Operator: +
    Right:
      Variable: result2
VarDeclaration: result3
  Initializer:
    CallExpression:
      Callee:
        Variable: handleDivision
      Arguments:
        Literal: 10
        Literal: 0
PrintStatement:
  BinaryExpression: +
    Left:
      Literal: "Result 3: "
    Operator: +
    Right:
      Variable: result3

AST for C:\Projects\limitly\tests\error_handling\basic_error_checks.lm
Parser: New CSTParser (cst_parser.cpp)
Mode: CST with AST compatibility
Note: CST nodes were created internally with trivia preservation
      AST output shown below for compatibility testing
========================================

AST Dump:
==========
FunctionDeclaration: divide
  Parameters:
    a: int
    b: int
  ReturnType: int
  Body:
    BlockStatement:
      IfStatement:
        Condition:
          BinaryExpression: ==
            Left:
              Variable: b
            Operator: ==
            Right:
              Literal: 0
        Then:
          BlockStatement:
            ReturnStatement:
              Value:
                ErrorConstruct: DivisionByZero
      ReturnStatement:
        Value:
          OkConstruct:
            Value:
              BinaryExpression: /
                Left:
                  Variable: a
                Operator: /
                Right:
                  Variable: b
FunctionDeclaration: safeDivide
  Parameters:
    x: int
    y: int
  ReturnType: int
  Body:
    BlockStatement:
      VarDeclaration: result
        Initializer:
          FallibleExpression:
            Expression:
              CallExpression:
                Callee:
                  Variable: divide
                Arguments:
                  Variable: x
                  Variable: y
      ReturnStatement:
        Value:
          OkConstruct:
            Value:
              Variable: result
FunctionDeclaration: incompatiblePropagate
  Parameters:
    x: int
    y: int
  ReturnType: int
  Body:
    BlockStatement:
      VarDeclaration: result
        Initializer:
          FallibleExpression:
            Expression:
              CallExpression:
                Callee:
                  Variable: divide
                Arguments:
                  Variable: x
                  Variable: y
      ReturnStatement:
        Value:
          OkConstruct:
            Value:
              Variable: result
FunctionDeclaration: nonFallibleWithPropagation
  Parameters:
    x: int
    y: int
  ReturnType: int
  Body:
    BlockStatement:
      VarDeclaration: result
        Initializer:
          FallibleExpression:
            Expression:
              CallExpression:
                Callee:
                  Variable: divide
                Arguments:
                  Variable: x
                  Variable: y
      ReturnStatement:
        Value:
          Variable: result
FunctionDeclaration: unhandledFallible
  Parameters:
    x: int
    y: int
  ReturnType: nil
  Body:
    BlockStatement:
      ExpressionStatement:
        CallExpression:
          Callee:
            Variable: divide
          Arguments:
            Variable: x
            Variable: y
FunctionDeclaration: genericError
  Parameters:
    flag: bool
  ReturnType: int?
  Body:
    BlockStatement:
      IfStatement:
        Condition:
          Variable: flag
        Then:
          BlockStatement:
            ReturnStatement:
              Value:
                ErrorConstruct: DivisionByZero
      ReturnStatement:
        Value:
          OkConstruct:
            Value:
              Literal: 42
FunctionDeclaration: propagateGeneric
  Parameters:
    flag: bool
  ReturnType: int
  Body:
    BlockStatement:
      VarDeclaration: result
        Initializer:
          FallibleExpression:
            Expression:
              CallExpression:
                Callee:
                  Variable: genericError
                Arguments:
                  Variable: flag
      ReturnStatement:
        Value:
          OkConstruct:
            Value:
              Variable: result
FunctionDeclaration: multipleErrors
  Parameters:
    x: int
  ReturnType: int
  Body:
    BlockStatement:
      IfStatement:
        Condition:
          BinaryExpression: <
            Left:
              Variable: x
            Operator: <
            Right:
              Literal: 0
        Then:
          BlockStatement:
            ReturnStatement:
              Value:
                ErrorConstruct: DivisionByZero
      IfStatement:
        Condition:
          BinaryExpression: >
            Left:
              Variable: x
            Operator: >
            Right:
              Literal: 100
        Then:
          BlockStatement:
            ReturnStatement:
              Value:
                ErrorConstruct: IndexOutOfBounds
      ReturnStatement:
        Value:
          OkConstruct:
            Value:
              Variable: x
FunctionDeclaration: unknownErrorType
  ReturnType: int
  Body:
    BlockStatement:
      ReturnStatement:
        Value:
          ErrorConstruct: UnknownError
FunctionDeclaration: typeMismatch
  ReturnType: nil
  Body:
    BlockStatement:
      VarDeclaration: x
        Type: int
        Initializer:
          Literal: "hello"
FunctionDeclaration: correctAssignment
  ReturnType: nil
  Body:
    BlockStatement:
      VarDeclaration: x
        Type: int
        Initializer:
          OkConstruct:
            Value:
              Literal: 42
      VarDeclaration: y
        Type: int
        Initializer:
          ErrorConstruct: DivisionByZero
FunctionDeclaration: wrongArguments
  ReturnType: nil
  Body:
    BlockStatement:
      ExpressionStatement:
        CallExpression:
          Callee:
            Variable: divide
          Arguments:
            Literal: "hello"
            Literal: "world"
PrintStatement:
  Literal: "Testing basic compile-time error checking"
VarDeclaration: result1
  Initializer:
    CallExpression:
      Callee:
        Variable: safeDivide
      Arguments:
        Literal: 10
        Literal: 2
VarDeclaration: result2
  Initializer:
    CallExpression:
      Callee:
        Variable: propagateGeneric
      Arguments:
        Literal: false
PrintStatement:
  Literal: "Basic error checking test completed"

AST for C:\Projects\limitly\tests\error_handling\comprehensive_test.lm
Parser: New CSTParser (cst_parser.cpp)
Mode: CST with AST compatibility
Note: CST nodes were created internally with trivia preservation
      AST output shown below for compatibility testing
========================================

AST Dump:
==========
FunctionDeclaration: divide
  Parameters:
    a: int
    b: int
  ReturnType: int
  Body:
    BlockStatement:
      ReturnStatement:
        Value:
          OkConstruct:
            Value:
              BinaryExpression: /
                Left:
                  Variable: a
                Operator: /
                Right:
                  Variable: b
FunctionDeclaration: compatiblePropagation
  Parameters:
    x: int
    y: int
  ReturnType: int
  Body:
    BlockStatement:
      VarDeclaration: result
        Initializer:
          FallibleExpression:
            Expression:
              CallExpression:
                Callee:
                  Variable: divide
                Arguments:
                  Variable: x
                  Variable: y
      ReturnStatement:
        Value:
          OkConstruct:
            Value:
              Variable: result
FunctionDeclaration: incompatiblePropagation
  Parameters:
    x: int
    y: int
  ReturnType: int
  Body:
    BlockStatement:
      VarDeclaration: result
        Initializer:
          FallibleExpression:
            Expression:
              CallExpression:
                Callee:
                  Variable: divide
                Arguments:
                  Variable: x
                  Variable: y
      ReturnStatement:
        Value:
          OkConstruct:
            Value:
              Variable: result
FunctionDeclaration: nonFallibleFunction
  Parameters:
    x: int
    y: int
  ReturnType: int
  Body:
    BlockStatement:
      VarDeclaration: result
        Initializer:
          FallibleExpression:
            Expression:
              CallExpression:
                Callee:
                  Variable: divide
                Arguments:
                  Variable: x
                  Variable: y
      ReturnStatement:
        Value:
          Variable: result
FunctionDeclaration: unhandledFallible
  Parameters:
    x: int
    y: int
  ReturnType: nil
  Body:
    BlockStatement:
      ExpressionStatement:
        CallExpression:
          Callee:
            Variable: divide
          Arguments:
            Variable: x
            Variable: y
FunctionDeclaration: genericErrorFunction
  Parameters:
    flag: bool
  ReturnType: int?
  Body:
    BlockStatement:
      ReturnStatement:
        Value:
          OkConstruct:
            Value:
              Literal: 42
FunctionDeclaration: propagateFromGeneric
  Parameters:
    flag: bool
  ReturnType: int
  Body:
    BlockStatement:
      VarDeclaration: result
        Initializer:
          FallibleExpression:
            Expression:
              CallExpression:
                Callee:
                  Variable: genericErrorFunction
                Arguments:
                  Variable: flag
      ReturnStatement:
        Value:
          OkConstruct:
            Value:
              Variable: result
FunctionDeclaration: multipleErrorTypes
  Parameters:
    x: int
  ReturnType: int
  Body:
    BlockStatement:
      IfStatement:
        Condition:
          BinaryExpression: <
            Left:
              Variable: x
            Operator: <
            Right:
              Literal: 0
        Then:
          BlockStatement:
            ReturnStatement:
              Value:
                ErrorConstruct: DivisionByZero
      IfStatement:
        Condition:
          BinaryExpression: >
            Left:
              Variable: x
            Operator: >
            Right:
              Literal: 100
        Then:
          BlockStatement:
            ReturnStatement:
              Value:
                ErrorConstruct: IndexOutOfBounds
      ReturnStatement:
        Value:
          OkConstruct:
            Value:
              Variable: x
FunctionDeclaration: unknownError
  ReturnType: int
  Body:
    BlockStatement:
      ReturnStatement:
        Value:
          ErrorConstruct: UnknownErrorType
FunctionDeclaration: typeMismatchAssignment
  ReturnType: nil
  Body:
    BlockStatement:
      VarDeclaration: x
        Type: int
        Initializer:
          Literal: "hello"
FunctionDeclaration: correctAssignments
  ReturnType: nil
  Body:
    BlockStatement:
      VarDeclaration: success
        Type: int
        Initializer:
          OkConstruct:
            Value:
              Literal: 42
      VarDeclaration: error
        Type: int
        Initializer:
          ErrorConstruct: DivisionByZero
FunctionDeclaration: wrongArgumentTypes
  ReturnType: nil
  Body:
    BlockStatement:
      ExpressionStatement:
        CallExpression:
          Callee:
            Variable: divide
          Arguments:
            Literal: "hello"
            Literal: "world"
FunctionDeclaration: errorNotInSignature
  ReturnType: int
  Body:
    BlockStatement:
      ReturnStatement:
        Value:
          ErrorConstruct: DivisionByZero
FunctionDeclaration: properHandling
  Parameters:
    x: int
    y: int
  ReturnType: int
  Body:
    BlockStatement:
      ReturnStatement:
        Value:
          Literal: 0
FunctionDeclaration: main
  ReturnType: nil
  Body:
    BlockStatement:
      PrintStatement:
        Literal: "Comprehensive error checking test"
      VarDeclaration: result1
        Initializer:
          CallExpression:
            Callee:
              Variable: compatiblePropagation
            Arguments:
              Literal: 10
              Literal: 2
      VarDeclaration: result2
        Initializer:
          CallExpression:
            Callee:
              Variable: propagateFromGeneric
            Arguments:
              Literal: true
      VarDeclaration: result3
        Initializer:
          CallExpression:
            Callee:
              Variable: properHandling
            Arguments:
              Literal: 10
              Literal: 0
      PrintStatement:
        Literal: "Test completed - check error messages above"

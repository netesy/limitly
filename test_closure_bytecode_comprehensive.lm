// Comprehensive test for closure bytecode generation

// Test 1: Simple lambda without captures
var simple = fn(x) { return x * 2; };

// Test 2: Lambda with single variable capture
var multiplier = 3;
var multiply = fn(x) { return x * multiplier; };

// Test 3: Lambda with multiple variable captures
var a = 1;
var b = 2;
var addBoth = fn(x) { return x + a + b; };

// Test 4: Nested lambdas with captures
var outer_var = 100;
var createAdder = fn(increment) {
    var base = 10;
    return fn(value) {
        return value + increment + base + outer_var;
    };
};

// Test 5: Lambda in variable assignment chain
var chain1 = fn(x) { return x + 1; };
var chain2 = chain1;

// Test 6: Lambda with complex expressions
var complex = fn(x) {
    var temp = x * 2;
    if (temp > 10) {
        return temp + outer_var;
    } else {
        return temp - outer_var;
    }
};

print("Comprehensive closure bytecode test completed");